chào, tôi sẽ gửi cho bạn tài liệu, khi bạn đọc xong thì bạn chỉ cần viết tên file đó ra thôi nhé




Được thôi, bạn cứ gửi tài liệu đi, tôi sẽ đọc và chỉ viết tên file sau khi xong.







add_room
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en";
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light";
        session.setAttribute("theme", theme);
    }
%>
<!DOCTYPE html>
<html lang="<%= language %>">
<head>
    <meta charset="UTF-8">
    <title><%= language.equals("vi") ? "Thêm phòng - Khách sạn Oceanic" : "Add Room - Oceanic Hotel" %></title>
    <link rel="icon" href="<%= request.getContextPath() %>/assets/images/logo.png" type="image/x-icon">
    <link rel="stylesheet" href="<%= request.getContextPath() %>/assets/css/main.css">
    <link rel="stylesheet" href="<%= request.getContextPath() %>/assets/css/form.css">
    <script>
        window.contextPath = '<%= request.getContextPath() %>';
    </script>
    <script src="<%= request.getContextPath() %>/assets/js/main.js" type="module" defer></script>
    <script src="<%= request.getContextPath() %>/assets/js/theme.js" type="module" defer></script>
    <script src="<%= request.getContextPath() %>/assets/js/language.js" type="module" defer></script>
</head>
<body class="<%= theme.equals("dark") ? "dark-mode" : "" %>" data-theme="<%= theme %>">
    <div class="admin-container">
        <nav class="sidebar">
            <div class="sidebar-header">
                <h3>Oceanic Hotel</h3>
            </div>
            <ul>
                <li><a href="<%= request.getContextPath() %>/admin/dashboard"><%= language.equals("vi") ? "Tổng quan" : "Dashboard" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/users"><%= language.equals("vi") ? "Quản lý người dùng" : "User Management" %></a></li>
                <li class="active"><a href="<%= request.getContextPath() %>/admin/rooms"><%= language.equals("vi") ? "Quản lý phòng" : "Room Management" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/bookings"><%= language.equals("vi") ? "Quản lý đặt phòng" : "Booking Management" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/transactions"><%= language.equals("vi") ? "Quản lý giao dịch" : "Transaction Management" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/settings"><%= language.equals("vi") ? "Cấu hình hệ thống" : "System Settings" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/reports"><%= language.equals("vi") ? "Báo cáo" : "Reports" %></a></li>
                <li><a href="<%= request.getContextPath() %>/logout"><%= language.equals("vi") ? "Đăng xuất" : "Logout" %></a></li>
            </ul>
        </nav>
        <div class="main-content">
            <header>
                <div class="settings">
                    <select id="languageSelect">
                        <option value="en" <%= language.equals("en") ? "selected" : "" %>><%= language.equals("vi") ? "Tiếng Anh" : "English" %></option>
                        <option value="vi" <%= language.equals("vi") ? "selected" : "" %>><%= language.equals("vi") ? "Tiếng Việt" : "Vietnamese" %></option>
                    </select>
                    <select id="themeSelect">
                        <option value="light" <%= theme.equals("light") ? "selected" : "" %>><%= language.equals("vi") ? "Chế độ sáng" : "Light Mode" %></option>
                        <option value="dark" <%= theme.equals("dark") ? "selected" : "" %>><%= language.equals("vi") ? "Chế độ tối" : "Dark Mode" %></option>
                    </select>
                </div>
                <h2><%= language.equals("vi") ? "Thêm phòng" : "Add Room" %></h2>
            </header>
            <form action="<%= request.getContextPath() %>/admin/rooms/add" method="POST">
                <div class="form-group">
                    <label for="roomNumber"><%= language.equals("vi") ? "Số phòng" : "Room Number" %></label>
                    <input type="text" id="roomNumber" name="roomNumber" required>
                </div>
                <div class="form-group">
                    <label for="roomType"><%= language.equals("vi") ? "Loại phòng" : "Room Type" %></label>
                    <select id="roomType" name="roomType" required>
                        <option value="Single"><%= language.equals("vi") ? "Phòng đơn" : "Single" %></option>
                        <option value="Double"><%= language.equals("vi") ? "Phòng đôi" : "Double" %></option>
                        <option value="Suite"><%= language.equals("vi") ? "Suite" : "Suite" %></option>
                        <option value="Deluxe"><%= language.equals("vi") ? "Deluxe" : "Deluxe" %></option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="pricePerNight"><%= language.equals("vi") ? "Giá mỗi đêm" : "Price per Night" %></label>
                    <input type="number" id="pricePerNight" name="pricePerNight" step="0.01" required>
                </div>
                <div class="form-group">
                    <label for="isAvailable"><%= language.equals("vi") ? "Trạng thái" : "Available" %></label>
                    <input type="checkbox" id="isAvailable" name="isAvailable" value="true" checked>
                </div>
                <div class="form-group">
                    <label for="description"><%= language.equals("vi") ? "Mô tả" : "Description" %></label>
                    <textarea id="description" name="description"></textarea>
                </div>
                <button type="submit" class="action-btn add-btn"><%= language.equals("vi") ? "Thêm" : "Add" %></button>
            </form>
        </div>
    </div>
</body>
</html>




add_room







add_room.jsp nhé




add_room.jsp







<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en";
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light";
        session.setAttribute("theme", theme);
    }
%>
<!DOCTYPE html>
<html lang="<%= language%>">
    <head>
        <meta charset="UTF-8">
        <title><%= language.equals("vi") ? "Thêm người dùng - Khách sạn Oceanic" : "Add User - Oceanic Hotel"%></title>
        <link rel="icon" href="<%= request.getContextPath()%>/assets/images/logo.png" type="image/x-icon">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/main.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/dashboard.css">
        <script>
        window.contextPath = '<%= request.getContextPath()%>';
        </script>
        <script type="module" src="<%= request.getContextPath()%>/assets/js/main.js"></script>
        <script type="module" src="<%= request.getContextPath()%>/assets/js/theme.js"></script>
        <script type="module" src="<%= request.getContextPath()%>/assets/js/language.js"></script>
    </head>
    <body class="<%= theme.equals("dark") ? "dark-mode" : ""%>" data-theme="<%= theme%>">
        <div class="admin-container">
            <!-- Thanh điều hướng bên trái -->
            <nav class="sidebar">
                <div class="sidebar-header">
                    <h3>Oceanic Hotel</h3>
                </div>
                <ul>
                    <li><a href="<%= request.getContextPath()%>/admin/dashboard"><%= language.equals("vi") ? "Tổng quan" : "Dashboard"%></a></li>
                    <li class="active"><a href="<%= request.getContextPath()%>/admin/users"><%= language.equals("vi") ? "Quản lý người dùng" : "User Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/rooms"><%= language.equals("vi") ? "Quản lý phòng" : "Room Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/bookings"><%= language.equals("vi") ? "Quản lý đặt phòng" : "Booking Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/transactions"><%= language.equals("vi") ? "Quản lý giao dịch" : "Transaction Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/settings"><%= language.equals("vi") ? "Cấu hình hệ thống" : "System Settings"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/reports"><%= language.equals("vi") ? "Báo cáo" : "Reports"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/logout"><%= language.equals("vi") ? "Đăng xuất" : "Logout"%></a></li>
                </ul>
            </nav>

            <!-- Nội dung chính -->
            <div class="main-content">
                <header>
                    <div class="settings">
                        <select id="languageSelect">
                            <option value="en" <%= language.equals("en") ? "selected" : ""%>><%= language.equals("vi") ? "Tiếng Anh" : "English"%></option>
                            <option value="vi" <%= language.equals("vi") ? "selected" : ""%>><%= language.equals("vi") ? "Tiếng Việt" : "Vietnamese"%></option>
                        </select>
                        <select id="themeSelect">
                            <option value="light" <%= theme.equals("light") ? "selected" : ""%>><%= language.equals("vi") ? "Chế độ sáng" : "Light Mode"%></option>
                            <option value="dark" <%= theme.equals("dark") ? "selected" : ""%>><%= language.equals("vi") ? "Chế độ tối" : "Dark Mode"%></option>
                        </select>
                    </div>
                    <h2><%= language.equals("vi") ? "Thêm người dùng" : "Add User"%></h2>
                </header>

                <form action="<%= request.getContextPath()%>/admin/users/add" method="POST">
                    <div class="form-group">
                        <label for="username"><%= language.equals("vi") ? "Tên người dùng" : "Username"%></label>
                        <input type="text" id="username" name="username" required>
                    </div>
                    <div class="form-group">
                        <label for="email"><%= language.equals("vi") ? "Email" : "Email"%></label>
                        <input type="email" id="email" name="email" required>
                    </div>
                    <div class="form-group">
                        <label for="password"><%= language.equals("vi") ? "Mật khẩu" : "Password"%></label>
                        <input type="password" id="password" name="password" required>
                    </div>
                    <div class="form-group">
                        <label for="role"><%= language.equals("vi") ? "Vai trò" : "Role"%></label>
                        <select id="role" name="role" required>
                            <option value="user"><%= language.equals("vi") ? "Người dùng" : "User"%></option>
                            <option value="admin"><%= language.equals("vi") ? "Quản trị viên" : "Admin"%></option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="isActive"><%= language.equals("vi") ? "Hoạt động" : "Active"%></label>
                        <input type="checkbox" id="isActive" name="isActive" value="true">
                    </div>
                    <button type="submit" class="action-btn add-btn"><%= language.equals("vi") ? "Thêm" : "Add"%></button>
                </form>
            </div>
        </div>
    </body>
</html>




add_user.jsp







dashboard
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<% 
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en";
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light";
        session.setAttribute("theme", theme);
    }
    // Giả lập dữ liệu tổng quan (sẽ được thay thế bằng dữ liệu từ database)
    int checkInToday = (Integer) request.getAttribute("checkInToday") != null ? (Integer) request.getAttribute("checkInToday") : 0;
    int checkOutToday = (Integer) request.getAttribute("checkOutToday") != null ? (Integer) request.getAttribute("checkOutToday") : 0;
    int totalInHotel = (Integer) request.getAttribute("totalInHotel") != null ? (Integer) request.getAttribute("totalInHotel") : 0;
    int availableRooms = (Integer) request.getAttribute("availableRooms") != null ? (Integer) request.getAttribute("availableRooms") : 0;
    int occupiedRooms = (Integer) request.getAttribute("occupiedRooms") != null ? (Integer) request.getAttribute("occupiedRooms") : 0;
%>
<!DOCTYPE html>
<html lang="<%= language %>">
<head>
    <meta charset="UTF-8">
    <title><%= language.equals("vi") ? "Bảng điều khiển Quản trị - Khách sạn Oceanic" : "Admin Dashboard - Oceanic Hotel" %></title>
    <link rel="icon" href="<%= request.getContextPath() %>/assets/images/logo.png" type="image/x-icon">
    <link rel="stylesheet" href="<%= request.getContextPath() %>/assets/css/main.css">
    <link rel="stylesheet" href="<%= request.getContextPath() %>/assets/css/dashboard.css">
    <script>
        window.contextPath = '<%= request.getContextPath() %>';
    </script>
    <script src="<%= request.getContextPath() %>/assets/js/main.js" defer></script>
    <script src="<%= request.getContextPath() %>/assets/js/theme.js" defer></script>
    <script src="<%= request.getContextPath() %>/assets/js/language.js" defer></script>
</head>
<body class="<%= theme.equals("dark") ? "dark-mode" : "" %>" data-theme="<%= theme %>">
    <div class="admin-container">
        <!-- Thanh điều hướng bên trái -->
        <nav class="sidebar">
            <div class="sidebar-header">
                <h3>Oceanic Hotel</h3>
            </div>
            <ul>
                <li class="active"><a href="<%= request.getContextPath() %>/admin/dashboard"><%= language.equals("vi") ? "Tổng quan" : "Dashboard" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/users"><%= language.equals("vi") ? "Quản lý người dùng" : "User Management" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/rooms"><%= language.equals("vi") ? "Quản lý phòng" : "Room Management" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/bookings"><%= language.equals("vi") ? "Quản lý đặt phòng" : "Booking Management" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/transactions"><%= language.equals("vi") ? "Quản lý giao dịch" : "Transaction Management" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/settings"><%= language.equals("vi") ? "Cấu hình hệ thống" : "System Settings" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/reports"><%= language.equals("vi") ? "Báo cáo" : "Reports" %></a></li>
                <li><a href="<%= request.getContextPath() %>/logout"><%= language.equals("vi") ? "Đăng xuất" : "Logout" %></a></li>
            </ul>
        </nav>

        <!-- Nội dung chính -->
        <div class="main-content">
            <header>
                <div class="settings">
                    <select id="languageSelect">
                        <option value="en" <%= language.equals("en") ? "selected" : "" %>><%= language.equals("vi") ? "Tiếng Anh" : "English" %></option>
                        <option value="vi" <%= language.equals("vi") ? "selected" : "" %>><%= language.equals("vi") ? "Tiếng Việt" : "Vietnamese" %></option>
                    </select>
                    <select id="themeSelect">
                        <option value="light" <%= theme.equals("light") ? "selected" : "" %>><%= language.equals("vi") ? "Chế độ sáng" : "Light Mode" %></option>
                        <option value="dark" <%= theme.equals("dark") ? "selected" : "" %>><%= language.equals("vi") ? "Chế độ tối" : "Dark Mode" %></option>
                    </select>
                </div>
                <h2><%= language.equals("vi") ? "Tổng quan" : "Overview" %></h2>
                <p><%= language.equals("vi") ? "Xin chào" : "Hello" %>, <%= ((com.mycompany.oceanichotel.models.User) session.getAttribute("user")).getUsername() %>!</p>
            </header>

            <!-- Thông tin tổng quan -->
            <div class="overview">
                <div class="card">
                    <h4><%= language.equals("vi") ? "Check-in hôm nay" : "Today's Check-in" %></h4>
                    <p><%= checkInToday %></p>
                </div>
                <div class="card">
                    <h4><%= language.equals("vi") ? "Check-out hôm nay" : "Today's Check-out" %></h4>
                    <p><%= checkOutToday %></p>
                </div>
                <div class="card">
                    <h4><%= language.equals("vi") ? "Tổng số khách trong khách sạn" : "Total In Hotel" %></h4>
                    <p><%= totalInHotel %></p>
                </div>
                <div class="card">
                    <h4><%= language.equals("vi") ? "Phòng trống" : "Available Rooms" %></h4>
                    <p><%= availableRooms %></p>
                </div>
                <div class="card">
                    <h4><%= language.equals("vi") ? "Phòng đã đặt" : "Occupied Rooms" %></h4>
                    <p><%= occupiedRooms %></p>
                </div>
            </div>
        </div>
    </div>
</body>
</html>




dashboard.jsp







<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ page import="com.mycompany.oceanichotel.models.Room" %>
<%
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en";
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light";
        session.setAttribute("theme", theme);
    }
    Room room = (Room) request.getAttribute("room");
%>
<!DOCTYPE html>
<html lang="<%= language %>">
<head>
    <meta charset="UTF-8">
    <title><%= language.equals("vi") ? "Sửa phòng - Khách sạn Oceanic" : "Edit Room - Oceanic Hotel" %></title>
    <link rel="icon" href="<%= request.getContextPath() %>/assets/images/logo.png" type="image/x-icon">
    <link rel="stylesheet" href="<%= request.getContextPath() %>/assets/css/main.css">
    <link rel="stylesheet" href="<%= request.getContextPath() %>/assets/css/form.css">
    <script>
        window.contextPath = '<%= request.getContextPath() %>';
    </script>
    <script src="<%= request.getContextPath() %>/assets/js/main.js" type="module" defer></script>
    <script src="<%= request.getContextPath() %>/assets/js/theme.js" type="module" defer></script>
    <script src="<%= request.getContextPath() %>/assets/js/language.js" type="module" defer></script>
</head>
<body class="<%= theme.equals("dark") ? "dark-mode" : "" %>" data-theme="<%= theme %>">
    <div class="admin-container">
        <nav class="sidebar">
            <div class="sidebar-header">
                <h3>Oceanic Hotel</h3>
            </div>
            <ul>
                <li><a href="<%= request.getContextPath() %>/admin/dashboard"><%= language.equals("vi") ? "Tổng quan" : "Dashboard" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/users"><%= language.equals("vi") ? "Quản lý người dùng" : "User Management" %></a></li>
                <li class="active"><a href="<%= request.getContextPath() %>/admin/rooms"><%= language.equals("vi") ? "Quản lý phòng" : "Room Management" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/bookings"><%= language.equals("vi") ? "Quản lý đặt phòng" : "Booking Management" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/transactions"><%= language.equals("vi") ? "Quản lý giao dịch" : "Transaction Management" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/settings"><%= language.equals("vi") ? "Cấu hình hệ thống" : "System Settings" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/reports"><%= language.equals("vi") ? "Báo cáo" : "Reports" %></a></li>
                <li><a href="<%= request.getContextPath() %>/logout"><%= language.equals("vi") ? "Đăng xuất" : "Logout" %></a></li>
            </ul>
        </nav>
        <div class="main-content">
            <header>
                <div class="settings">
                    <select id="languageSelect">
                        <option value="en" <%= language.equals("en") ? "selected" : "" %>><%= language.equals("vi") ? "Tiếng Anh" : "English" %></option>
                        <option value="vi" <%= language.equals("vi") ? "selected" : "" %>><%= language.equals("vi") ? "Tiếng Việt" : "Vietnamese" %></option>
                    </select>
                    <select id="themeSelect">
                        <option value="light" <%= theme.equals("light") ? "selected" : "" %>><%= language.equals("vi") ? "Chế độ sáng" : "Light Mode" %></option>
                        <option value="dark" <%= theme.equals("dark") ? "selected" : "" %>><%= language.equals("vi") ? "Chế độ tối" : "Dark Mode" %></option>
                    </select>
                </div>
                <h2><%= language.equals("vi") ? "Sửa phòng" : "Edit Room" %></h2>
            </header>
            <form action="<%= request.getContextPath() %>/admin/rooms/update" method="POST">
                <input type="hidden" name="roomId" value="<%= room.getRoomId() %>">
                <div class="form-group">
                    <label for="roomNumber"><%= language.equals("vi") ? "Số phòng" : "Room Number" %></label>
                    <input type="text" id="roomNumber" name="roomNumber" value="<%= room.getRoomNumber() %>" required>
                </div>
                <div class="form-group">
                    <label for="roomType"><%= language.equals("vi") ? "Loại phòng" : "Room Type" %></label>
                    <select id="roomType" name="roomType" required>
                        <option value="Single" <%= room.getRoomType().equals("Single") ? "selected" : "" %>><%= language.equals("vi") ? "Phòng đơn" : "Single" %></option>
                        <option value="Double" <%= room.getRoomType().equals("Double") ? "selected" : "" %>><%= language.equals("vi") ? "Phòng đôi" : "Double" %></option>
                        <option value="Suite" <%= room.getRoomType().equals("Suite") ? "selected" : "" %>><%= language.equals("vi") ? "Suite" : "Suite" %></option>
                        <option value="Deluxe" <%= room.getRoomType().equals("Deluxe") ? "selected" : "" %>><%= language.equals("vi") ? "Deluxe" : "Deluxe" %></option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="pricePerNight"><%= language.equals("vi") ? "Giá mỗi đêm" : "Price per Night" %></label>
                    <input type="number" id="pricePerNight" name="pricePerNight" step="0.01" value="<%= room.getPricePerNight() %>" required>
                </div>
                <div class="form-group">
                    <label for="isAvailable"><%= language.equals("vi") ? "Trạng thái" : "Available" %></label>
                    <input type="checkbox" id="isAvailable" name="isAvailable" value="true" <%= room.isAvailable() ? "checked" : "" %>>
                </div>
                <div class="form-group">
                    <label for="description"><%= language.equals("vi") ? "Mô tả" : "Description" %></label>
                    <textarea id="description" name="description"><%= room.getDescription() != null ? room.getDescription() : "" %></textarea>
                </div>
                <div class="form-buttons">
                    <button type="submit" class="action-btn add-btn"><%= language.equals("vi") ? "Lưu" : "Save" %></button>
                    <a href="<%= request.getContextPath() %>/admin/rooms" class="action-btn cancel-btn"><%= language.equals("vi") ? "Hủy" : "Cancel" %></a>
                </div>
            </form>
        </div>
    </div>
</body>
</html>
edit_room

edit_user
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ page import="com.mycompany.oceanichotel.models.User" %>
<%
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en";
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light";
        session.setAttribute("theme", theme);
    }
    User user = (User) request.getAttribute("user");
%>
<!DOCTYPE html>
<html lang="<%= language%>">
    <head>
        <meta charset="UTF-8">
        <title><%= language.equals("vi") ? "Sửa người dùng - Khách sạn Oceanic" : "Edit User - Oceanic Hotel"%></title>
        <link rel="icon" href="<%= request.getContextPath()%>/assets/images/logo.png" type="image/x-icon">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/main.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/sidebar.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/form.css">
        <script>
            window.contextPath = '<%= request.getContextPath()%>';
        </script>
        <script type="module" src="<%= request.getContextPath()%>/assets/js/main.js"></script>
        <script type="module" src="<%= request.getContextPath()%>/assets/js/theme.js"></script>
        <script type="module" src="<%= request.getContextPath()%>/assets/js/language.js"></script>


    </head>
    <body class="<%= theme.equals("dark") ? "dark-mode" : ""%>" data-theme="<%= theme%>">
        <div class="admin-container">
            <nav class="sidebar">
                <div class="sidebar-header">
                    <h3>Oceanic Hotel</h3>
                </div>
                <ul>
                    <li><a href="<%= request.getContextPath()%>/admin/dashboard"><%= language.equals("vi") ? "Tổng quan" : "Dashboard"%></a></li>
                    <li class="active"><a href="<%= request.getContextPath()%>/admin/users"><%= language.equals("vi") ? "Quản lý người dùng" : "User Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/rooms"><%= language.equals("vi") ? "Quản lý phòng" : "Room Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/bookings"><%= language.equals("vi") ? "Quản lý đặt phòng" : "Booking Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/transactions"><%= language.equals("vi") ? "Quản lý giao dịch" : "Transaction Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/settings"><%= language.equals("vi") ? "Cấu hình hệ thống" : "System Settings"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/reports"><%= language.equals("vi") ? "Báo cáo" : "Reports"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/logout"><%= language.equals("vi") ? "Đăng xuất" : "Logout"%></a></li>
                </ul>
            </nav>
            <div class="main-content">
                <header>
                    <div class="settings">
                        <select id="languageSelect">
                            <option value="en" <%= language.equals("en") ? "selected" : ""%>><%= language.equals("vi") ? "Tiếng Anh" : "English"%></option>
                            <option value="vi" <%= language.equals("vi") ? "selected" : ""%>><%= language.equals("vi") ? "Tiếng Việt" : "Vietnamese"%></option>
                        </select>
                        <select id="themeSelect">
                            <option value="light" <%= theme.equals("light") ? "selected" : ""%>><%= language.equals("vi") ? "Chế độ sáng" : "Light Mode"%></option>
                            <option value="dark" <%= theme.equals("dark") ? "selected" : ""%>><%= language.equals("vi") ? "Chế độ tối" : "Dark Mode"%></option>
                        </select>
                    </div>
                    <h2><%= language.equals("vi") ? "Sửa người dùng" : "Edit User"%></h2>
                </header>
                <form action="<%= request.getContextPath()%>/admin/users/update" method="POST">
                    <input type="hidden" name="userId" value="<%= user.getUserId()%>">
                    <div class="form-group">
                        <label for="username"><%= language.equals("vi") ? "Tên người dùng" : "Username"%></label>
                        <input type="text" id="username" name="username" value="<%= user.getUsername()%>" required>
                    </div>
                    <div class="form-group">
                        <label for="email"><%= language.equals("vi") ? "Email" : "Email"%></label>
                        <input type="email" id="email" name="email" value="<%= user.getEmail()%>" required>
                    </div>
                    <div class="form-group">
                        <label for="role"><%= language.equals("vi") ? "Vai trò" : "Role"%></label>
                        <select id="role" name="role" required>
                            <option value="user" <%= user.getRole().equals("user") ? "selected" : ""%>><%= language.equals("vi") ? "Người dùng" : "User"%></option>
                            <option value="admin" <%= user.getRole().equals("admin") ? "selected" : ""%>><%= language.equals("vi") ? "Quản trị viên" : "Admin"%></option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="isActive"><%= language.equals("vi") ? "Hoạt động" : "Active"%></label>
                        <input type="checkbox" id="isActive" name="isActive" value="true" <%= user.isActive() ? "checked" : ""%>>
                    </div>
                    <div class="form-buttons">
                        <button type="submit" class="action-btn add-btn"><%= language.equals("vi") ? "Lưu" : "Save"%></button>
                        <a href="<%= request.getContextPath()%>/admin/users" class="action-btn cancel-btn"><%= language.equals("vi") ? "Hủy" : "Cancel"%></a>
                    </div>
                </form>
            </div>
        </div>
    </body>
</html>

login_history
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ page import="java.util.List" %>
<%@ page import="com.mycompany.oceanichotel.models.LoginHistory" %>
<%
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en";
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light";
        session.setAttribute("theme", theme);
    }
    List<LoginHistory> loginHistory = (List<LoginHistory>) request.getAttribute("loginHistory");
    int userId = request.getParameter("userId") != null ? Integer.parseInt(request.getParameter("userId")) : 0;
%>
<!DOCTYPE html>
<html lang="<%= language %>">
<head>
    <meta charset="UTF-8">
    <title><%= language.equals("vi") ? "Lịch sử đăng nhập - Khách sạn Oceanic" : "Login History - Oceanic Hotel" %></title>
    <link rel="icon" href="<%= request.getContextPath() %>/assets/images/logo.png" type="image/x-icon">
    <link rel="stylesheet" href="<%= request.getContextPath() %>/assets/css/main.css">
    <link rel="stylesheet" href="<%= request.getContextPath() %>/assets/css/sidebar.css">
    <link rel="stylesheet" href="<%= request.getContextPath() %>/assets/css/table.css">
    <script>
        window.contextPath = '<%= request.getContextPath() %>';
    </script>
    <script src="<%= request.getContextPath() %>/assets/js/main.js" type="module" defer></script>
    <script src="<%= request.getContextPath() %>/assets/js/theme.js" type="module" defer></script>
    <script src="<%= request.getContextPath() %>/assets/js/language.js" type="module" defer></script>
</head>
<body class="<%= theme.equals("dark") ? "dark-mode" : "" %>" data-theme="<%= theme %>">
    <div class="admin-container">
        <nav class="sidebar">
            <div class="sidebar-header">
                <h3>Oceanic Hotel</h3>
            </div>
            <ul>
                <li><a href="<%= request.getContextPath() %>/admin/dashboard"><%= language.equals("vi") ? "Tổng quan" : "Dashboard" %></a></li>
                <li class="active"><a href="<%= request.getContextPath() %>/admin/users"><%= language.equals("vi") ? "Quản lý người dùng" : "User Management" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/rooms"><%= language.equals("vi") ? "Quản lý phòng" : "Room Management" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/bookings"><%= language.equals("vi") ? "Quản lý đặt phòng" : "Booking Management" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/transactions"><%= language.equals("vi") ? "Quản lý giao dịch" : "Transaction Management" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/settings"><%= language.equals("vi") ? "Cấu hình hệ thống" : "System Settings" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/reports"><%= language.equals("vi") ? "Báo cáo" : "Reports" %></a></li>
                <li><a href="<%= request.getContextPath() %>/logout"><%= language.equals("vi") ? "Đăng xuất" : "Logout" %></a></li>
            </ul>
        </nav>
        <div class="main-content">
            <header>
                <div class="settings">
                    <select id="languageSelect">
                        <option value="en" <%= language.equals("en") ? "selected" : "" %>><%= language.equals("vi") ? "Tiếng Anh" : "English" %></option>
                        <option value="vi" <%= language.equals("vi") ? "selected" : "" %>><%= language.equals("vi") ? "Tiếng Việt" : "Vietnamese" %></option>
                    </select>
                    <select id="themeSelect">
                        <option value="light" <%= theme.equals("light") ? "selected" : "" %>><%= language.equals("vi") ? "Chế độ sáng" : "Light Mode" %></option>
                        <option value="dark" <%= theme.equals("dark") ? "selected" : "" %>><%= language.equals("vi") ? "Chế độ tối" : "Dark Mode" %></option>
                    </select>
                </div>
                <h2><%= language.equals("vi") ? "Lịch sử đăng nhập" : "Login History" %></h2>
            </header>
            <div class="table-header">
                <a href="<%= request.getContextPath() %>/admin/users" class="action-btn back-btn">
                    <%= language.equals("vi") ? "Quay lại" : "Back" %>
                </a>
            </div>
            <table class="data-table">
                <thead>
                    <tr>
                        <th><%= language.equals("vi") ? "ID" : "ID" %></th>
                        <th><%= language.equals("vi") ? "Thời gian đăng nhập" : "Login Time" %></th>
                        <th><%= language.equals("vi") ? "Địa chỉ IP" : "IP Address" %></th>
                    </tr>
                </thead>
                <tbody>
                    <%
                        if (loginHistory != null && !loginHistory.isEmpty()) {
                            for (LoginHistory history : loginHistory) {
                    %>
                    <tr>
                        <td><%= history.getLoginId() %></td>
                        <td><%= history.getLoginTime() %></td>
                        <td><%= history.getIpAddress() != null ? history.getIpAddress() : language.equals("vi") ? "Không có" : "N/A" %></td>
                    </tr>
                    <%
                            }
                        } else {
                    %>
                    <tr>
                        <td colspan="3"><%= language.equals("vi") ? "Không có dữ liệu lịch sử đăng nhập" : "No login history available" %></td>
                    </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
    </div>
</body>
</html>

rooms
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ page import="java.util.List" %>
<%@ page import="com.mycompany.oceanichotel.models.Room" %>
<%
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en";
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light";
        session.setAttribute("theme", theme);
    }
    int currentPage = request.getAttribute("currentPage") != null ? (Integer) request.getAttribute("currentPage") : 1;
    int totalPages = request.getAttribute("totalPages") != null ? (Integer) request.getAttribute("totalPages") : 1;
%>
<!DOCTYPE html>
<html lang="<%= language %>">
<head>
    <meta charset="UTF-8">
    <title><%= language.equals("vi") ? "Quản lý phòng - Khách sạn Oceanic" : "Room Management - Oceanic Hotel" %></title>
    <link rel="icon" href="<%= request.getContextPath() %>/assets/images/logo.png" type="image/x-icon">
    <link rel="stylesheet" href="<%= request.getContextPath() %>/assets/css/main.css">
    <link rel="stylesheet" href="<%= request.getContextPath() %>/assets/css/sidebar.css">
    <link rel="stylesheet" href="<%= request.getContextPath() %>/assets/css/table.css">
    <link rel="stylesheet" href="<%= request.getContextPath() %>/assets/css/modal.css">
    <script>
        window.contextPath = '<%= request.getContextPath() %>';
        window.language = '<%= language %>';
    </script>
    <script src="<%= request.getContextPath() %>/assets/js/main.js" type="module" defer></script>
    <script src="<%= request.getContextPath() %>/assets/js/theme.js" type="module" defer></script>
    <script src="<%= request.getContextPath() %>/assets/js/language.js" type="module" defer></script>
    <script src="<%= request.getContextPath() %>/assets/js/modal.js" type="module" defer></script>
    <script src="<%= request.getContextPath() %>/assets/js/dropdown.js" type="module" defer></script>
    <script type="module">
        import { showConfirmModal, closeModal } from '<%= request.getContextPath() %>/assets/js/modal.js';
        window.showConfirmModal = showConfirmModal;
        window.closeModal = closeModal;
    </script>
</head>
<body class="<%= theme.equals("dark") ? "dark-mode" : "" %>" data-theme="<%= theme %>">
    <div class="admin-container">
        <nav class="sidebar">
            <div class="sidebar-header">
                <h3>Oceanic Hotel</h3>
            </div>
            <ul>
                <li><a href="<%= request.getContextPath() %>/admin/dashboard"><%= language.equals("vi") ? "Tổng quan" : "Dashboard" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/users"><%= language.equals("vi") ? "Quản lý người dùng" : "User Management" %></a></li>
                <li class="active"><a href="<%= request.getContextPath() %>/admin/rooms"><%= language.equals("vi") ? "Quản lý phòng" : "Room Management" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/bookings"><%= language.equals("vi") ? "Quản lý đặt phòng" : "Booking Management" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/transactions"><%= language.equals("vi") ? "Quản lý giao dịch" : "Transaction Management" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/settings"><%= language.equals("vi") ? "Cấu hình hệ thống" : "System Settings" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/reports"><%= language.equals("vi") ? "Báo cáo" : "Reports" %></a></li>
                <li><a href="<%= request.getContextPath() %>/logout"><%= language.equals("vi") ? "Đăng xuất" : "Logout" %></a></li>
            </ul>
        </nav>
        <div class="main-content">
            <header>
                <div class="settings">
                    <select id="languageSelect">
                        <option value="en" <%= language.equals("en") ? "selected" : "" %>><%= language.equals("vi") ? "Tiếng Anh" : "English" %></option>
                        <option value="vi" <%= language.equals("vi") ? "selected" : "" %>><%= language.equals("vi") ? "Tiếng Việt" : "Vietnamese" %></option>
                    </select>
                    <select id="themeSelect">
                        <option value="light" <%= theme.equals("light") ? "selected" : "" %>><%= language.equals("vi") ? "Chế độ sáng" : "Light Mode" %></option>
                        <option value="dark" <%= theme.equals("dark") ? "selected" : "" %>><%= language.equals("vi") ? "Chế độ tối" : "Dark Mode" %></option>
                    </select>
                </div>
                <h2><%= language.equals("vi") ? "Quản lý phòng" : "Room Management" %></h2>
            </header>
            <div class="table-header">
                <div class="add-room">
                    <button class="action-btn add-btn" onclick="window.location.href='<%= request.getContextPath() %>/admin/rooms/add'">
                        <%= language.equals("vi") ? "Thêm phòng" : "Add Room" %>
                    </button>
                </div>
                <div class="search">
                    <form action="<%= request.getContextPath() %>/admin/rooms" method="GET">
                        <input type="text" name="search" placeholder="<%= language.equals("vi") ? "Tìm kiếm theo số phòng" : "Search by room number" %>"
                               value="<%= request.getParameter("search") != null ? request.getParameter("search") : "" %>">
                        <button type="submit" style="display: none;"></button>
                    </form>
                </div>
            </div>
            <table class="data-table">
                <thead>
                    <tr>
                        <th><%= language.equals("vi") ? "ID" : "ID" %></th>
                        <th><%= language.equals("vi") ? "Số phòng" : "Room Number" %></th>
                        <th><%= language.equals("vi") ? "Loại phòng" : "Room Type" %></th>
                        <th><%= language.equals("vi") ? "Giá mỗi đêm" : "Price/Night" %></th>
                        <th><%= language.equals("vi") ? "Trạng thái" : "Status" %></th>
                        <th><%= language.equals("vi") ? "Ngày tạo" : "Created At" %></th>
                        <th>...</th>
                    </tr>
                </thead>
                <tbody>
                    <%
                        List<Room> rooms = (List<Room>) request.getAttribute("rooms");
                        if (rooms != null) {
                            for (Room room : rooms) {
                    %>
                    <tr>
                        <td><%= room.getRoomId() %></td>
                        <td><%= room.getRoomNumber() %></td>
                        <td><%= room.getRoomType() %></td>
                        <td><%= room.getPricePerNight() %></td>
                        <td>
                            <span class="status <%= room.isAvailable() ? "clean" : "dirty" %>">
                                <%= room.isAvailable() ? (language.equals("vi") ? "Trống" : "Available") : (language.equals("vi") ? "Đã đặt" : "Occupied") %>
                            </span>
                        </td>
                        <td><%= room.getCreatedAt() %></td>
                        <td>
                            <div class="dropdown">
                                <button class="dropdown-btn">⋮</button>
                                <div class="dropdown-content">
                                    <a href="#" onclick="event.preventDefault(); showConfirmModal('edit', '<%= room.getRoomId() %>')">
                                        <%= language.equals("vi") ? "Sửa thông tin" : "Edit Room" %>
                                    </a>
                                    <a href="#" onclick="event.preventDefault(); showConfirmModal('delete', '<%= room.getRoomId() %>')">
                                        <%= language.equals("vi") ? "Xóa phòng" : "Delete Room" %>
                                    </a>
                                    <a href="<%= request.getContextPath() %>/admin/rooms/edit-history?roomId=<%= room.getRoomId() %>">
                                        <%= language.equals("vi") ? "Xem lịch sử chỉnh sửa" : "View Edit History" %>
                                    </a>
                                </div>
                            </div>
                        </td>
                    </tr>
                    <%
                            }
                        }
                    %>
                </tbody>
            </table>
            <div class="custom-modal" id="confirmModal" style="display: none;">
                <div class="modal-content animate-modal">
                    <h3><%= language.equals("vi") ? "Xác nhận" : "Confirmation" %></h3>
                    <p id="confirmMessage"></p>
                    <div class="modal-buttons">
                        <button class="modal-btn confirm-btn" id="confirmYes"><%= language.equals("vi") ? "Có" : "Yes" %></button>
                        <button class="modal-btn cancel-btn" onclick="closeModal('confirmModal')"><%= language.equals("vi") ? "Không" : "No" %></button>
                    </div>
                </div>
            </div>
            <% if (totalPages > 1) { %>
            <div class="pagination">
                <% if (currentPage > 1) { %>
                <a href="<%= request.getContextPath() %>/admin/rooms?page=<%= currentPage - 1 %><%= request.getParameter("search") != null ? "&search=" + request.getParameter("search") : "" %>">
                    <button class="page-btn">Previous</button>
                </a>
                <% } %>
                <% for (int i = 1; i <= totalPages; i++) { %>
                <a href="<%= request.getContextPath() %>/admin/rooms?page=<%= i %><%= request.getParameter("search") != null ? "&search=" + request.getParameter("search") : "" %>">
                    <button class="page-btn <%= currentPage == i ? "active" : "" %>"><%= i %></button>
                </a>
                <% } %>
                <% if (currentPage < totalPages) { %>
                <a href="<%= request.getContextPath() %>/admin/rooms?page=<%= currentPage + 1 %><%= request.getParameter("search") != null ? "&search=" + request.getParameter("search") : "" %>">
                    <button class="page-btn">Next</button>
                </a>
                <% } %>
            </div>
            <% } %>
        </div>
    </div>
</body>
</html>

users
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ page import="java.util.List" %>
<%@ page import="com.mycompany.oceanichotel.models.User" %>
<%
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en";
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light";
        session.setAttribute("theme", theme);
    }
    int currentPage = request.getAttribute("currentPage") != null ? (Integer) request.getAttribute("currentPage") : 1;
    int totalPages = request.getAttribute("totalPages") != null ? (Integer) request.getAttribute("totalPages") : 1;
%>
<!DOCTYPE html>
<html lang="<%= language%>">
    <head>
        <meta charset="UTF-8">
        <title><%= language.equals("vi") ? "Quản lý người dùng - Khách sạn Oceanic" : "User Management - Oceanic Hotel"%></title>
        <link rel="icon" href="<%= request.getContextPath()%>/assets/images/logo.png" type="image/x-icon">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/main.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/sidebar.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/table.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/modal.css">
        <script>
            window.contextPath = '<%= request.getContextPath()%>';
            window.language = '<%= language%>';
        </script>
        <script src="<%= request.getContextPath()%>/assets/js/main.js" type="module" defer></script>
        <script src="<%= request.getContextPath()%>/assets/js/theme.js" type="module" defer></script>
        <script src="<%= request.getContextPath()%>/assets/js/language.js" type="module" defer></script>
        <script src="<%= request.getContextPath()%>/assets/js/modal.js" type="module" defer></script>
        <script src="<%= request.getContextPath()%>/assets/js/dropdown.js" type="module" defer></script>
        <script type="module">
            import { showConfirmModal, closeModal } from '<%= request.getContextPath()%>/assets/js/modal.js';
            // Gán vào window để dùng trong onclick
            window.showConfirmModal = showConfirmModal;
            window.closeModal = closeModal;
        </script>
    </head>
    <body class="<%= theme.equals("dark") ? "dark-mode" : ""%>" data-theme="<%= theme%>">
        <div class="admin-container">
            <nav class="sidebar">
                <div class="sidebar-header">
                    <h3>Oceanic Hotel</h3>
                </div>
                <ul>
                    <li><a href="<%= request.getContextPath()%>/admin/dashboard"><%= language.equals("vi") ? "Tổng quan" : "Dashboard"%></a></li>
                    <li class="active"><a href="<%= request.getContextPath()%>/admin/users"><%= language.equals("vi") ? "Quản lý người dùng" : "User Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/rooms"><%= language.equals("vi") ? "Quản lý phòng" : "Room Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/bookings"><%= language.equals("vi") ? "Quản lý đặt phòng" : "Booking Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/transactions"><%= language.equals("vi") ? "Quản lý giao dịch" : "Transaction Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/settings"><%= language.equals("vi") ? "Cấu hình hệ thống" : "System Settings"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/reports"><%= language.equals("vi") ? "Báo cáo" : "Reports"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/logout"><%= language.equals("vi") ? "Đăng xuất" : "Logout"%></a></li>
                </ul>
            </nav>
            <div class="main-content">
                <% if (request.getParameter("message") != null || request.getParameter("error") != null) {%>
                <div class="custom-modal" id="notificationModal">
                    <div class="modal-content animate-modal">
                        <h3><%= language.equals("vi") ? "Thông báo" : "Notification"%></h3>
                        <p>
                            <%
                                if (request.getParameter("message") != null) {
                                    if (request.getParameter("message").equals("delete_success")) {
                                        out.print(language.equals("vi") ? "Xóa người dùng thành công!" : "User deleted successfully!");
                                    } else if (request.getParameter("message").equals("update_success")) {
                                        out.print(language.equals("vi") ? "Cập nhật người dùng thành công!" : "User updated successfully!");
                                    }
                                } else if (request.getParameter("error") != null) {
                                    if (request.getParameter("error").equals("user_not_found")) {
                                        out.print(language.equals("vi") ? "Không tìm thấy người dùng!" : "User not found!");
                                    } else {
                                        out.print(language.equals("vi") ? "ID người dùng không hợp lệ!" : "Invalid user ID!");
                                    }
                                }
                            %>
                        </p>
                        <div class="modal-buttons">
                            <button class="modal-btn confirm-btn" onclick="closeModal('notificationModal')">OK</button>
                        </div>
                    </div>
                </div>
                <% }%>
                <header>
                    <div class="settings">
                        <select id="languageSelect">
                            <option value="en" <%= language.equals("en") ? "selected" : ""%>><%= language.equals("vi") ? "Tiếng Anh" : "English"%></option>
                            <option value="vi" <%= language.equals("vi") ? "selected" : ""%>><%= language.equals("vi") ? "Tiếng Việt" : "Vietnamese"%></option>
                        </select>
                        <select id="themeSelect">
                            <option value="light" <%= theme.equals("light") ? "selected" : ""%>><%= language.equals("vi") ? "Chế độ sáng" : "Light Mode"%></option>
                            <option value="dark" <%= theme.equals("dark") ? "selected" : ""%>><%= language.equals("vi") ? "Chế độ tối" : "Dark Mode"%></option>
                        </select>
                    </div>
                    <h2><%= language.equals("vi") ? "Quản lý người dùng" : "User Management"%></h2>
                </header>
                <div class="table-header">
                    <div class="add-user">
                        <button class="action-btn add-btn" onclick="window.location.href = '<%= request.getContextPath()%>/admin/users/add'">
                            <%= language.equals("vi") ? "Thêm người dùng" : "Add User"%>
                        </button>
                    </div>
                    <div class="search">
                        <form action="<%= request.getContextPath()%>/admin/users" method="GET">
                            <input type="text" name="search" placeholder="<%= language.equals("vi") ? "Tìm kiếm theo tên người dùng hoặc email" : "Search by username or email"%>" value="<%= request.getParameter("search") != null ? request.getParameter("search") : ""%>">
                            <button type="submit" style="display: none;"></button>
                        </form>
                    </div>
                    <div class="filter">
                        <button class="filter-btn" onclick="document.querySelector('.search form').submit();">
                            <span><%= language.equals("vi") ? "Bộ lọc" : "Filter"%></span>
                            <i class="fas fa-filter"></i>
                        </button>
                    </div>
                </div>
                <table class="data-table">
                    <thead>
                        <tr>
                            <th><%= language.equals("vi") ? "ID" : "ID"%></th>
                            <th><%= language.equals("vi") ? "Tên người dùng" : "Username"%></th>
                            <th><%= language.equals("vi") ? "Email" : "Email"%></th>
                            <th><%= language.equals("vi") ? "Vai trò" : "Role"%></th>
                            <th><%= language.equals("vi") ? "Hoạt động" : "Active"%></th>
                            <th><%= language.equals("vi") ? "Ngày tạo" : "Created At"%></th>
                            <th>...</th>
                        </tr>
                    </thead>
                    <tbody>
                        <%
                            List<User> users = (List<User>) request.getAttribute("users");
                            if (users != null) {
                                for (User user : users) {
                        %>
                        <tr>
                            <td><%= user.getUserId()%></td>
                            <td><%= user.getUsername()%></td>
                            <td><%= user.getEmail()%></td>
                            <td><%= user.getRole()%></td>
                            <td>
                                <span class="status <%= user.isActive() ? "clean" : "dirty"%>">
                                    <%= user.isActive() ? (language.equals("vi") ? "hoạt động" : "able") : (language.equals("vi") ? "Không hoạt động" : "disable")%>
                                </span>
                            </td>
                            <td><%= user.getCreatedAt()%></td>
                            <td>
                                <div class="dropdown">
                                    <button class="dropdown-btn">⋮</button>
                                    <div class="dropdown-content">
                                        <a href="#" onclick="event.preventDefault(); showConfirmModal('edit', '<%= user.getUserId()%>')">
                                            <%= language.equals("vi") ? "Sửa thông tin" : "Edit Profile"%>
                                        </a>
                                        <a href="#" onclick="event.preventDefault(); showConfirmModal('delete', '<%= user.getUserId()%>')">
                                            <%= language.equals("vi") ? "Xóa tài khoản" : "Delete Account"%>
                                        </a>
                                        <a href="<%= request.getContextPath()%>/admin/users/login-history?userId=<%= user.getUserId()%>">
                                            <%= language.equals("vi") ? "Xem lịch sử đăng nhập" : "View Login History"%>
                                        </a>
                                    </div>
                                </div>
                            </td>
                        </tr>
                        <%
                                }
                            }
                        %>
                    </tbody>
                </table>
                <div class="custom-modal" id="confirmModal" style="display: none;">
                    <div class="modal-content animate-modal">
                        <h3><%= language.equals("vi") ? "Xác nhận" : "Confirmation"%></h3>
                        <p id="confirmMessage"></p>
                        <div class="modal-buttons">
                            <button class="modal-btn confirm-btn" id="confirmYes"><%= language.equals("vi") ? "Có" : "Yes"%></button>
                            <button class="modal-btn cancel-btn" onclick="closeModal('confirmModal')"><%= language.equals("vi") ? "Không" : "No"%></button>
                        </div>
                    </div>
                </div>
                <% if (totalPages > 1) { %>
                <div class="pagination">
                    <% if (currentPage > 1) {%>
                    <a href="<%= request.getContextPath()%>/admin/users?page=<%= currentPage - 1%><%= request.getParameter("search") != null ? "&search=" + request.getParameter("search") : ""%>">
                        <button class="page-btn">Previous</button>
                    </a>
                    <% } %>
                    <% for (int i = 1; i <= totalPages; i++) {%>
                    <a href="<%= request.getContextPath()%>/admin/users?page=<%= i%><%= request.getParameter("search") != null ? "&search=" + request.getParameter("search") : ""%>">
                        <button class="page-btn <%= currentPage == i ? "active" : ""%>"><%= i%></button>
                    </a>
                    <% } %>
                    <% if (currentPage < totalPages) {%>
                    <a href="<%= request.getContextPath()%>/admin/users?page=<%= currentPage + 1%><%= request.getParameter("search") != null ? "&search=" + request.getParameter("search") : ""%>">
                        <button class="page-btn">Next</button>
                    </a>
                    <% } %>
                </div>
                <% }%>
            </div>
        </div>
    </body>
</html>




edit_room.jsp

edit_user.jsp

login_history.jsp

rooms.jsp

users.jsp







error-modal.jsp
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<% 
    String error = (String) request.getAttribute("error");
    if (error != null) { 
%>
<div class="custom-modal" id="errorModal">
    <div class="modal-content">
        <h3><%= language.equals("vi") ? "Lỗi" : "Error" %></h3>
        <p><%= error %></p>
        <div class="modal-buttons">
            <button class="modal-btn cancel-btn" onclick="closeModal('errorModal')">
                <%= language.equals("vi") ? "Đóng" : "Close" %>
            </button>
        </div>
    </div>
</div>
<% } %>




error-modal.jsp







base
/*Style cơ bản cho toàn bộ trang (body, tiêu đề h2, link a).*/
body {
    background-image: var(--background-image);
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    background-color: var(--background-color);
    min-height: 95vh;
    padding: 20px;
    transition: background-color 0.5s ease;
}

h2 {
    color: var(--title-color);
    margin-bottom: 20px;
    font-size: 24px;
    font-weight: 600;
    letter-spacing: 0.5px;
}

a {
    color: var(--link-color);
    text-decoration: none;
}

container
/*Style cho container chính (admin-container, main-content, header).*/
.admin-container {
    display: flex;
    min-height: 95vh;
    width: 96.5vw;
    opacity: 0.95;
}

.main-content {
    flex: 1;
    padding: 20px;
    background-color: var(--background-color);
}

header {
    margin-bottom: 30px;
}

button
/*Style cho các nút hành động (action-btn, add-btn, cancel-btn).*/

.action-btn {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
}

.add-btn {
    background-color: #2ecc71;
    color: #fff;
}

.add-btn:hover {
    background-color: #27ae60;
    transform: scale(1.02);
}

.cancel-btn {
    background-color: #e74c3c;
    color: #fff;
    text-decoration: none;
    display: flex;
    align-items: center;
    justify-content: center;
}

.cancel-btn:hover {
    background-color: #c0392b;
    transform: scale(1.02);
}

dashboard
/* dashboard.css - Style cho trang dashboard */

/* Tổng quan (Overview) */
.overview {
    display: flex;
    gap: 20px;
    flex-wrap: wrap;
}

.card {
    background-color: #fff;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    flex: 1;
    min-width: 150px;
    text-align: center;
}

.card h4 {
    margin-bottom: 10px;
    font-size: 16px;
    color: #2c3e50;
}

.card p {
    font-size: 24px;
    font-weight: bold;
    color: #3498db;
}

.dark-mode .card {
    background-color: #444;
}

.dark-mode .card h4 {
    color: #fff;
}

.dark-mode .card p {
    color: #1e90ff;
}

/* Action Buttons */
.action-buttons {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
}

.check-in-btn {
    background-color: #3498db;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.check-in-btn:hover {
    background-color: #2980b9;
}

.check-out-btn {
    background-color: #e74c3c;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.check-out-btn:hover {
    background-color: #c0392b;
}



form
/*Style cho form và các thành phần nhập liệu (form-group, input, select, textarea, checkbox).form-group*/

.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
    color: var(--text-color);
}

.form-group input[type="text"],
.form-group input[type="email"],
.form-group input[type="password"],
.form-group input[type="number"],
.form-group select,
.form-group textarea {
    width: 50%;
    padding: 10px;
    border: 1px solid var(--border-color);
    border-radius: 5px;
    font-size: 14px;
    background-color: var(--container-bg);
    color: var(--text-color);
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

.form-group input[type="text"]:focus,
.form-group input[type="email"]:focus,
.form-group input[type="password"]:focus,
.form-group input[type="number"]:focus,
.form-group select:focus,
.form-group textarea:focus {
    border-color: var(--button-bg);
    box-shadow: 0 0 5px rgba(52, 152, 219, 0.3);
    outline: none;
}

.form-group input[type="checkbox"] {
    margin-left: 10px;
}

.form-group textarea {
    min-height: 100px;
    resize: vertical;
}

main
/* main.css */
@import url('reset.css');
@import url('variables.css');
@import url('base.css');
@import url('container.css');
@import url('sidebar.css');
@import url('form.css');
@import url('button.css');
@import url('table.css');
@import url('modal.css');
@import url('notification.css');
@import url('settings.css');
@import url('dashboard.css'); /* Thêm file dashboard */

/* assets/css/main.css */
.custom-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    justify-content: center;
    align-items: center;
    z-index: 1000;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.custom-modal.active {
    opacity: 1;
}

.modal-content {
    background-color: var(--background-color);
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    max-width: 500px;
    width: 90%;
    transform: scale(0.8);
    transition: transform 0.3s ease;
}

.custom-modal.active .modal-content {
    transform: scale(1);
}

.modal-buttons {
    margin-top: 20px;
    text-align: right;
}

.modal-btn {
    padding: 8px 16px;
    margin-left: 10px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.cancel-btn {
    background-color: #dc3545;
    color: white;
}

.custom-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    justify-content: center;
    align-items: center;
    z-index: 1000;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.custom-modal.active {
    opacity: 1;
    display: flex;
}

.modal-content {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    max-width: 500px;
    width: 90%;
    transform: scale(0.8);
    transition: transform 0.3s ease;
}

.custom-modal.active .modal-content {
    transform: scale(1);
}

.modal-content h3 {
    margin: 0 0 10px;
    color: #dc3545; /* Màu đỏ cho tiêu đề lỗi */
    font-size: 1.5em;
}

.modal-content p {
    margin: 0 0 20px;
    font-size: 1em;
    color: #333;
}

.modal-buttons {
    text-align: right;
}

.modal-btn {
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.cancel-btn {
    background-color: #dc3545;
    color: white;
}

.cancel-btn:hover {
    background-color: #c82333;
}

modal
/*Style cho modal (hộp thoại xác nhận, lọc, v.v.) (custom-modal, modal-content, modal-btn).*/

.custom-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.6);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.custom-modal.active {
    opacity: 1;
}

.modal-content {
    background: var(--container-bg);
    padding: 25px;
    border-radius: 15px;
    box-shadow: 0 8px 20px var(--shadow-color);
    width: 350px;
    text-align: center;
    transform: scale(0.8);
    transition: transform 0.3s ease, opacity 0.3s ease;
}

.animate-modal {
    transform: scale(1);
    opacity: 1;
}

.modal-content h3 {
    color: var(--title-color);
    margin-bottom: 15px;
    font-size: 22px;
    font-weight: 600;
}

.modal-content p {
    color: var(--text-color);
    margin-bottom: 20px;
    font-size: 16px;
}

.modal-buttons {
    display: flex;
    gap: 15px;
    justify-content: center;
}

.modal-btn {
    padding: 10px 20px;
    border-radius: 25px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    transition: transform 0.2s ease, background-color 0.3s ease;
}

/* modal.css (thêm vào cuối file) */
.modal-input {
    width: 100%;
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid var(--border-color);
    border-radius: 5px;
    font-size: 14px;
    background-color: var(--container-bg);
    color: var(--text-color);
}

.modal-btn:hover {
    transform: translateY(-2px);
}

.confirm-btn {
    background-color: #2ecc71;
    color: #fff;
    border: none;
}

.confirm-btn:hover {
    background-color: #27ae60;
}

.cancel-btn {
    background-color: #e74c3c;
    color: #fff;
    border: none;
}

.cancel-btn:hover {
    background-color: #c0392b;
}

.dark-mode .modal-content {
    background: rgba(80, 80, 80, 0.9);
}



notification
/*Style cho thông báo thành công hoặc lỗi (notification, success, error).*/

.notification {
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 20px;
    text-align: center;
}

.notification.success {
    background-color: #1e90ff;
    color: #fff;
}

.notification.error {
    background-color: #e74c3c;
    color: #fff;
}

reset
/*Reset style mặc định của trình duyệt (margin, padding, box-sizing, font)*/
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Arial', sans-serif;
}

setiing
/*Style cho phần cài đặt ngôn ngữ và chủ đề (settings, select).*/

.settings {
    position: absolute;
    top: 20px;
    right: 20px;
    display: flex;
    gap: 10px;
    z-index: 1000;
}

.settings select {
    padding: 5px 10px;
    border-radius: 5px;
    border: 1px solid var(--border-color);
    background-color: var(--container-bg);
    color: var(--text-color);
    cursor: pointer;
    font-size: 14px;
    transition: border-color 0.3s ease, background-color 0.3s ease;
}

.settings select:focus {
    outline: none;
    border-color: var(--button-bg);
}

sidebar
/*Style cho thanh điều hướng bên trái (sidebar, menu, tiêu đề sidebar).*/

.sidebar {
    width: 250px;
    background-color: #2c3e50;
    color: #fff;
    padding: 20px;
}

.sidebar-header {
    text-align: center;
    margin-bottom: 30px;
}

.sidebar-header h3 {
    color: #fff;
    font-size: 24px;
}

.sidebar ul {
    list-style: none;
    padding: 0;
}

.sidebar ul li {
    margin-bottom: 15px;
}

.sidebar ul li a {
    color: #fff;
    text-decoration: none;
    font-size: 16px;
    display: block;
    padding: 10px;
    border-radius: 5px;
}

.sidebar ul li a:hover,
.sidebar ul li.active a {
    background-color: #3498db;
}

table
/*Style cho bảng dữ liệu và các thành phần liên quan (table-header, data-table, status, pagination, dropdown, filter-btn, search).*/

.filter-btn {
    display: flex;
    align-items: center;
    gap: 5px;
    padding: 8px 15px;
    border: 1px solid var(--border-color);
    border-radius: 5px;
    background-color: var(--button-bg);
    color: #fff;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.filter-btn:hover {
    background-color: var(--button-hover-bg);
}

.filter-btn i {
    font-size: 14px;
}

.dark-mode .filter-btn {
    border-color: var(--border-color);
    background-color: var(--button-bg);
}

.dark-mode .filter-btn:hover {
    background-color: var(--button-hover-bg);
}

.table-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.search input {
    padding: 8px 15px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 14px;
    width: 200px;
}

.data-table {
    width: 100%;
    border-collapse: collapse;
    background-color: #fff;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.data-table th,
.data-table td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

.data-table th {
    background-color: #f5f5f5;
    font-weight: 600;
    color: #2c3e50;
}

.data-table td {
    color: #34495e;
}

.status {
    padding: 5px 10px;
    border-radius: 5px;
    font-size: 12px;
    font-weight: 500;
}

.status.clean {
    background-color: #2ecc71;
    color: #fff;
}

.status.dirty {
    background-color: #e74c3c;
    color: #fff;
}

/* table.css (thêm vào phần .status) */
.status.inspected {
    background-color: #f1c40f;
    color: #fff;
}

.status.pick-up {
    background-color: #3498db;
    color: #fff;
}

.dark-mode .data-table {
    background-color: #444;
}

.dark-mode .data-table th {
    background-color: #555;
    color: #fff;
}

.dark-mode .data-table td {
    color: #ddd;
    border-bottom: 1px solid #666;
}

.pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 10px;
    margin-top: 20px;
}

.page-btn {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background-color: #fff;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.page-btn:hover {
    background-color: #f5f5f5;
}

.page-btn.active {
    background-color: #3498db;
    color: #fff;
    border-color: #3498db;
}

.dark-mode .page-btn {
    background-color: #555;
    border-color: #666;
    color: #fff;
}

.dark-mode .page-btn:hover {
    background-color: #666;
}

.dark-mode .page-btn.active {
    background-color: #1e90ff;
    border-color: #1e90ff;
}

.dropdown {
    position: relative;
    display: inline-block;
}

.dropdown-btn {
    background: none;
    border: none;
    font-size: 20px;
    cursor: pointer;
    padding: 0 10px;
    color: var(--text-color);
}

.dropdown-content {
    display: none;
    position: absolute;
    right: 0;
    background-color: var(--container-bg);
    min-width: 160px;
    box-shadow: 0 8px 16px var(--shadow-color);
    z-index: 1;
    border-radius: 5px;
    border: 1px solid var(--border-color);
}

.dropdown-content a {
    color: var(--text-color);
    padding: 8px 16px;
    text-decoration: none;
    display: block;
    border-bottom: 1px solid var(--border-color);
}

.dropdown-content a:last-child {
    border-bottom: none;
}

.dropdown-content a:hover {
    background-color: var(--button-hover-bg);
    color: #fff;
}

.dropdown:hover .dropdown-content {
    display: block;
}

.dark-mode .dropdown-btn {
    color: #fff;
}

.dark-mode .dropdown-content {
    background-color: #555;
}

variables
/*CSS toàn cục (màu sắc, hình nền, v.v.) cho cả chế độ sáng và tối.*/

:root {
    /* Chế độ sáng (mặc định) */
    --background-color: #f0f4f8;
    --container-bg: rgba(255, 255, 255, 0.65);
    --text-color: #34495e;
    --title-color: #2c3e50;
    --border-color: #dcdcdc;
    --button-bg: #3498db;
    --button-hover-bg: #2980b9;
    --link-color: #3498db;
    --error-color: #e74c3c;
    --shadow-color: rgba(0, 0, 0, 0.1);
    --background-image: url('../images/Home-BG.png');
}

body.dark-mode {
    /* Chế độ tối */
    --background-color: #1a1a1a;
    --container-bg: rgba(80, 80, 80, 0.8);
    --text-color: #f0f0f0;
    --title-color: #ffffff;
    --border-color: #666666;
    --button-bg: #1e90ff;
    --button-hover-bg: #1c86ee;
    --link-color: #1e90ff;
    --error-color: #ff5555;
    --shadow-color: rgba(255, 255, 255, 0.2);
    --background-image: url('../images/darkbackground.png');
}




base.css

container.css

button.css

dashboard.css

form.css

main.css

modal.css

notification.css

reset.css

settings.css

sidebar.css

table.css

variables.css







dropdown.js
// assets/js/dropdown.js

// Xử lý dropdown
export function initDropdown() {
    document.querySelectorAll('.dropdown-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            const dropdownContent = this.nextElementSibling;
            const isVisible = dropdownContent.style.display === 'block';
            document.querySelectorAll('.dropdown-content').forEach(content => {
                content.style.display = 'none';
            });
            dropdownContent.style.display = isVisible ? 'none' : 'block';
        });
    });

    document.addEventListener('click', function(e) {
        if (!e.target.classList.contains('dropdown-btn')) {
            document.querySelectorAll('.dropdown-content').forEach(content => {
                content.style.display = 'none';
            });
        }
    });
}

// Khởi tạo dropdown khi trang tải
document.addEventListener('DOMContentLoaded', () => {
    initDropdown();
});

error
document.addEventListener('DOMContentLoaded', function () {
    const contextPath = window.contextPath || '';
    fetch(contextPath + '/get-error')
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.text();
        })
        .then(errorMessage => {
            if (errorMessage) {
                const errorDiv = document.getElementById("error-message");
                if (errorDiv) {
                    errorDiv.textContent = errorMessage;
                    errorDiv.style.display = "block";
                }
            }
        })
        .catch(error => console.error('Error fetching error message:', error));
});

languages
document.addEventListener('DOMContentLoaded', () => {
    const languageSelect = document.getElementById('languageSelect');
    if (languageSelect) {
        languageSelect.addEventListener('change', (e) => {
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = window.contextPath + '/settings';
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = 'language';
            input.value = e.target.value;
            form.appendChild(input);
            document.body.appendChild(form);
            form.submit();
        });
    }
});

main
import './theme.js';
import './language.js';
import './error.js';
import './modal.js';
import './dropdown.js';


modal
// assets/js/modal.js

// Đóng modal
export function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.classList.remove('active');
        setTimeout(() => modal.style.display = 'none', 300); // Chờ animation hoàn tất
    } else {
        console.error(`Modal with ID ${modalId} not found`);
    }
}

// Hiển thị modal với hiệu ứng
export function showModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'flex';
        setTimeout(() => modal.classList.add('active'), 10); // Thêm class sau khi display để chạy animation
    } else {
        console.error(`Modal with ID ${modalId} not found`);
    }
}

// Hiển thị modal xác nhận
export function showConfirmModal(action, userId, contextPath = window.contextPath, language = window.language) {
    console.log('showConfirmModal called with:', { action, userId, contextPath, language });
    const modal = document.getElementById('confirmModal');
    const message = document.getElementById('confirmMessage');
    const yesBtn = document.getElementById('confirmYes');

    if (!modal || !message || !yesBtn) {
        console.error('Modal elements not found');
        return;
    }

    if (action === 'delete') {
        message.textContent = language === 'vi' ? 'Bạn có chắc chắn muốn xóa người dùng này không?' : 'Are you sure you want to delete this user?';
        yesBtn.onclick = function() {
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = `${contextPath}/admin/users/delete`;
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = 'userId';
            input.value = userId;
            form.appendChild(input);
            document.body.appendChild(form);
            form.submit();
        };
    } else if (action === 'edit') {
        message.textContent = language === 'vi' ? 'Bạn có chắc chắn muốn chỉnh sửa thông tin người dùng này không?' : 'Are you sure you want to edit this user\'s information?';
        yesBtn.onclick = function() {
            window.location.href = `${contextPath}/admin/users/edit?userId=${userId}`;
        };
    }

    showModal('confirmModal');
}

// Tự động hiển thị notification modal nếu có
export function initNotificationModal() {
    if (document.getElementById('notificationModal')) {
        showModal('notificationModal');
    }
}

// Khởi tạo modal khi trang tải
document.addEventListener('DOMContentLoaded', () => {
    initNotificationModal();
});

theme
document.addEventListener('DOMContentLoaded', () => {
    const themeSelect = document.getElementById('themeSelect');
    if (themeSelect) {
        themeSelect.addEventListener('change', (e) => {
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = window.contextPath + '/settings';
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = 'theme';
            input.value = e.target.value;
            form.appendChild(input);
            document.body.appendChild(form);
            form.submit();
        });
    }
});




dropdown.js

error.js

language.js

main.js

modal.js

theme.js







/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.mycompany.oceanichotel.controllers.admin;

import com.mycompany.oceanichotel.models.User;
import com.mycompany.oceanichotel.utils.DatabaseUtil;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;

/**
 *
 * @author annc1
 */
@WebServlet("/admin/dashboard")
public class AdminDashboardController extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        if (session != null && session.getAttribute("user") != null) {
            User user = (User) session.getAttribute("user");
            if ("admin".equals(user.getRole())) {
                try {
                    // Lấy dữ liệu tổng quan
                    int checkInToday = getCheckInToday();
                    int checkOutToday = getCheckOutToday();
                    int totalInHotel = getTotalInHotel();
                    int availableRooms = getAvailableRooms();
                    int occupiedRooms = getOccupiedRooms();

                    // Đặt dữ liệu vào request
                    request.setAttribute("checkInToday", checkInToday);
                    request.setAttribute("checkOutToday", checkOutToday);
                    request.setAttribute("totalInHotel", totalInHotel);
                    request.setAttribute("availableRooms", availableRooms);
                    request.setAttribute("occupiedRooms", occupiedRooms);
                    request.setAttribute("username", user.getUsername());

                    request.getRequestDispatcher("/WEB-INF/views/admin/dashboard.jsp").forward(request, response);
                    return;
                } catch (SQLException e) {
                    throw new ServletException("Database error", e);
                }
            }
        }
        response.sendRedirect(request.getContextPath() + "/login");
    }
    
    private int getCheckInToday() throws SQLException {
        String query = "SELECT COUNT(*) FROM Bookings WHERE check_in_date = ? AND status = 'Confirmed'";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setDate(1, java.sql.Date.valueOf(LocalDate.now()));
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return 0;
    }

    private int getCheckOutToday() throws SQLException {
        String query = "SELECT COUNT(*) FROM Bookings WHERE check_out_date = ? AND status = 'Confirmed'";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setDate(1, java.sql.Date.valueOf(LocalDate.now()));
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return 0;
    }
    
    private int getTotalInHotel() throws SQLException {
        String query = "SELECT COUNT(*) FROM Bookings WHERE check_in_date <= ? AND check_out_date >= ? AND status = 'Confirmed'";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            LocalDate today = LocalDate.now();
            stmt.setDate(1, java.sql.Date.valueOf(today));
            stmt.setDate(2, java.sql.Date.valueOf(today));
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return 0;
    }

    private int getAvailableRooms() throws SQLException {
        String query = "SELECT COUNT(*) FROM Rooms WHERE is_available = 1";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return 0;
    }

    private int getOccupiedRooms() throws SQLException {
        String query = "SELECT COUNT(*) FROM Rooms WHERE is_available = 0";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return 0;
    }
}


package com.mycompany.oceanichotel.controllers.admin;

import com.mycompany.oceanichotel.models.Room;
import com.mycompany.oceanichotel.services.admin.AdminRoomService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Logger;
import java.util.logging.Level;

@WebServlet("/admin/rooms/*")
public class AdminRoomController extends HttpServlet {

    private AdminRoomService roomService;
    private static final Logger LOGGER = Logger.getLogger(AdminRoomController.class.getName());

    @Override
    public void init() throws ServletException {
        roomService = new AdminRoomService();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String pathInfo = request.getPathInfo();
        try {
            if (pathInfo == null || pathInfo.equals("/")) {
                int page = request.getParameter("page") != null ? Integer.parseInt(request.getParameter("page")) : 1;
                String search = request.getParameter("search");
                String status = request.getParameter("status");
                String roomType = request.getParameter("roomType");

                List<Room> rooms = roomService.getRooms(page, search, status, roomType);
                int totalRooms = roomService.getTotalRooms(search, status, roomType);
                int totalPages = (int) Math.ceil((double) totalRooms / 10);

                request.setAttribute("rooms", rooms);
                request.setAttribute("currentPage", page);
                request.setAttribute("totalPages", totalPages);
                request.getRequestDispatcher("/WEB-INF/views/admin/rooms.jsp").forward(request, response);
            } else if (pathInfo.equals("/add")) {
                request.getRequestDispatcher("/WEB-INF/views/admin/add_room.jsp").forward(request, response);
            } else if (pathInfo.equals("/edit")) {
                int roomId = Integer.parseInt(request.getParameter("roomId"));
                Room room = roomService.getRoomById(roomId);
                if (room != null) {
                    request.setAttribute("room", room);
                    request.getRequestDispatcher("/WEB-INF/views/admin/edit_room.jsp").forward(request, response);
                } else {
                    request.setAttribute("notificationType", "error");
                    request.setAttribute("notificationMessage", "Room not found.");
                    request.getRequestDispatcher("/WEB-INF/views/admin/rooms.jsp").forward(request, response);
                }
            } else if (pathInfo.equals("/edit-history")) {
                int roomId = Integer.parseInt(request.getParameter("roomId"));
                request.setAttribute("notificationType", "error");
                request.setAttribute("notificationMessage", "Edit history not implemented yet.");
                request.getRequestDispatcher("/WEB-INF/views/admin/rooms.jsp").forward(request, response);
            }
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Database error in doGet", e);
            request.setAttribute("notificationType", "error");
            request.setAttribute("notificationMessage", "Database error occurred. Please try again.");
            request.getRequestDispatcher("/WEB-INF/views/admin/rooms.jsp").forward(request, response);
        } catch (NumberFormatException e) {
            LOGGER.log(Level.WARNING, "Invalid roomId in doGet: " + request.getParameter("roomId"), e);
            request.setAttribute("notificationType", "error");
            request.setAttribute("notificationMessage", "Invalid room ID.");
            request.getRequestDispatcher("/WEB-INF/views/admin/rooms.jsp").forward(request, response);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String pathInfo = request.getPathInfo();
        try {
            if (pathInfo.equals("/add")) {
                String roomNumber = request.getParameter("roomNumber");
                String roomType = request.getParameter("roomType");
                double pricePerNight = Double.parseDouble(request.getParameter("pricePerNight"));
                boolean isAvailable = "true".equals(request.getParameter("isAvailable"));
                String description = request.getParameter("description");

                // Kiểm tra trùng lặp
                if (roomService.isRoomNumberExists(roomNumber)) {
                    request.setAttribute("notificationType", "error");
                    request.setAttribute("notificationMessage", "Room number '" + roomNumber + "' already exists.");
                    request.getRequestDispatcher("/WEB-INF/views/admin/add_room.jsp").forward(request, response);
                    return;
                }

                Room room = new Room();
                room.setRoomNumber(roomNumber);
                room.setRoomType(roomType);
                room.setPricePerNight(pricePerNight);
                room.setAvailable(isAvailable);
                room.setDescription(description);
                roomService.addRoom(room);
                request.setAttribute("notificationType", "success");
                request.setAttribute("notificationMessage", "Room added successfully!");
                request.getRequestDispatcher("/WEB-INF/views/admin/rooms.jsp").forward(request, response);
            } else if (pathInfo.equals("/update")) {
                int roomId = Integer.parseInt(request.getParameter("roomId"));
                String roomNumber = request.getParameter("roomNumber");
                String roomType = request.getParameter("roomType");
                double pricePerNight = Double.parseDouble(request.getParameter("pricePerNight"));
                boolean isAvailable = "true".equals(request.getParameter("isAvailable"));
                String description = request.getParameter("description");

                Room existingRoom = roomService.getRoomById(roomId);
                if (existingRoom == null) {
                    request.setAttribute("notificationType", "error");
                    request.setAttribute("notificationMessage", "Room not found.");
                    request.getRequestDispatcher("/WEB-INF/views/admin/edit_room.jsp").forward(request, response);
                    return;
                }

                // Kiểm tra trùng lặp (bỏ qua chính room hiện tại)
                if (!roomNumber.equals(existingRoom.getRoomNumber()) && roomService.isRoomNumberExists(roomNumber)) {
                    request.setAttribute("notificationType", "error");
                    request.setAttribute("notificationMessage", "Room number '" + roomNumber + "' already exists.");
                    request.setAttribute("room", existingRoom);
                    request.getRequestDispatcher("/WEB-INF/views/admin/edit_room.jsp").forward(request, response);
                    return;
                }

                Room room = new Room();
                room.setRoomId(roomId);
                room.setRoomNumber(roomNumber);
                room.setRoomType(roomType);
                room.setPricePerNight(pricePerNight);
                room.setAvailable(isAvailable);
                room.setDescription(description);
                roomService.updateRoom(room);
                request.setAttribute("notificationType", "success");
                request.setAttribute("notificationMessage", "Room updated successfully!");
                request.getRequestDispatcher("/WEB-INF/views/admin/rooms.jsp").forward(request, response);
            } else if (pathInfo.equals("/delete")) {
                int roomId = Integer.parseInt(request.getParameter("roomId"));
                Room room = roomService.getRoomById(roomId);
                if (room == null) {
                    request.setAttribute("notificationType", "error");
                    request.setAttribute("notificationMessage", "Room not found.");
                    request.getRequestDispatcher("/WEB-INF/views/admin/rooms.jsp").forward(request, response);
                    return;
                }
                // Hiển thị thông báo xác nhận trước khi xóa
                request.setAttribute("notificationType", "confirm");
                request.setAttribute("notificationMessage", "Are you sure you want to delete room '" + room.getRoomNumber() + "'?");
                request.setAttribute("confirmAction", request.getContextPath() + "/admin/rooms/delete-confirmed?roomId=" + roomId);
                request.getRequestDispatcher("/WEB-INF/views/admin/rooms.jsp").forward(request, response);
            } else if (pathInfo.equals("/delete-confirmed")) {
                int roomId = Integer.parseInt(request.getParameter("roomId"));
                roomService.deleteRoom(roomId);
                request.setAttribute("notificationType", "success");
                request.setAttribute("notificationMessage", "Room deleted successfully!");
                request.getRequestDispatcher("/WEB-INF/views/admin/rooms.jsp").forward(request, response);
            }
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Database error in doPost", e);
            request.setAttribute("notificationType", "error");
            request.setAttribute("notificationMessage", "Database error occurred. Please try again.");
            if (pathInfo.equals("/add")) {
                request.getRequestDispatcher("/WEB-INF/views/admin/add_room.jsp").forward(request, response);
            } else if (pathInfo.equals("/update")) {
                request.getRequestDispatcher("/WEB-INF/views/admin/edit_room.jsp").forward(request, response);
            } else {
                request.getRequestDispatcher("/WEB-INF/views/admin/rooms.jsp").forward(request, response);
            }
        } catch (NumberFormatException e) {
            LOGGER.log(Level.WARNING, "Invalid roomId or price in doPost: " + request.getParameter("roomId"), e);
            request.setAttribute("notificationType", "error");
            request.setAttribute("notificationMessage", "Invalid input (room ID or price).");
            if (pathInfo.equals("/add")) {
                request.getRequestDispatcher("/WEB-INF/views/admin/add_room.jsp").forward(request, response);
            } else if (pathInfo.equals("/update")) {
                request.getRequestDispatcher("/WEB-INF/views/admin/edit_room.jsp").forward(request, response);
            } else {
                request.getRequestDispatcher("/WEB-INF/views/admin/rooms.jsp").forward(request, response);
            }
        }
    }
}

package com.mycompany.oceanichotel.services.admin;

import com.mycompany.oceanichotel.models.LoginHistory;
import com.mycompany.oceanichotel.models.User;
import com.mycompany.oceanichotel.utils.DatabaseUtil;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import java.util.logging.Level;
import org.mindrot.jbcrypt.BCrypt;

public class AdminUserService {

    private static final int PAGE_SIZE = 10;
    private static final Logger LOGGER = Logger.getLogger(AdminUserService.class.getName());

    public List<User> getUsers(int page, String search) throws SQLException {
        if (page < 1) {
            LOGGER.log(Level.WARNING, "Invalid page number: {0}, defaulting to 1", page);
            page = 1;
        }
        List<User> users = new ArrayList<>();
        String query = "SELECT * FROM Users WHERE 1=1";
        if (search != null && !search.trim().isEmpty()) {
            query += " AND (username LIKE ? OR email LIKE ?)";
        }
        query += " ORDER BY user_id OFFSET ? ROWS FETCH NEXT ? ROWS ONLY";

        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            int paramIndex = 1;
            if (search != null && !search.trim().isEmpty()) {
                stmt.setString(paramIndex++, "%" + search + "%");
                stmt.setString(paramIndex++, "%" + search + "%");
            }
            stmt.setInt(paramIndex++, (page - 1) * PAGE_SIZE);
            stmt.setInt(paramIndex, PAGE_SIZE);

            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                User user = new User();
                user.setUserId(rs.getInt("user_id"));
                user.setUsername(rs.getString("username"));
                user.setPassword(rs.getString("password"));
                user.setEmail(rs.getString("email"));
                user.setRole(rs.getString("role"));
                user.setAvatar(rs.getString("avatar"));
                user.setActive(rs.getBoolean("is_active"));
                user.setCreatedAt(rs.getTimestamp("created_at"));
                users.add(user);
            }
        }
        return users;
    }

    public int getTotalUsers(String search) throws SQLException {
        String query = "SELECT COUNT(*) FROM Users WHERE 1=1";
        if (search != null && !search.trim().isEmpty()) {
            query += " AND (username LIKE ? OR email LIKE ?)";
        }

        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            if (search != null && !search.trim().isEmpty()) {
                stmt.setString(1, "%" + search + "%");
                stmt.setString(2, "%" + search + "%");
            }
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return 0;
    }

    public User getUserById(int userId) throws SQLException {
        if (userId <= 0) {
            LOGGER.log(Level.WARNING, "Invalid userId in getUserById: {0}", userId);
            return null;
        }
        String query = "SELECT * FROM Users WHERE user_id = ?";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, userId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                User user = new User();
                user.setUserId(rs.getInt("user_id"));
                user.setUsername(rs.getString("username"));
                user.setPassword(rs.getString("password"));
                user.setEmail(rs.getString("email"));
                user.setRole(rs.getString("role"));
                user.setAvatar(rs.getString("avatar"));
                user.setActive(rs.getBoolean("is_active"));
                user.setCreatedAt(rs.getTimestamp("created_at"));
                return user;
            }
        }
        return null;
    }

    public void addUser(User user) throws SQLException {
        if (user == null || user.getUsername() == null || user.getPassword() == null) {
            LOGGER.log(Level.SEVERE, "Invalid user data in addUser");
            throw new SQLException("User data cannot be null");
        }
        String query = "INSERT INTO Users (username, password, email, role, is_active, created_at) VALUES (?, ?, ?, ?, ?, GETDATE())";
        String hashedPassword = BCrypt.hashpw(user.getPassword(), BCrypt.gensalt());

        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, user.getUsername());
            stmt.setString(2, hashedPassword);
            stmt.setString(3, user.getEmail());
            stmt.setString(4, user.getRole());
            stmt.setBoolean(5, user.isActive());
            stmt.executeUpdate();
        }
    }

    public void updateUser(User user) throws SQLException {
        if (user == null || user.getUserId() <= 0) {
            LOGGER.log(Level.SEVERE, "Invalid user data in updateUser: {0}", user != null ? user.getUserId() : "null");
            throw new SQLException("User ID cannot be null or negative");
        }
        String query = "UPDATE Users SET username = ?, email = ?, role = ?, is_active = ? WHERE user_id = ?";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, user.getUsername());
            stmt.setString(2, user.getEmail());
            stmt.setString(3, user.getRole());
            stmt.setBoolean(4, user.isActive());
            stmt.setInt(5, user.getUserId());
            stmt.executeUpdate();
        }
    }

    public void deleteUser(int userId) throws SQLException {
        if (userId <= 0) {
            LOGGER.log(Level.WARNING, "Invalid userId in deleteUser: {0}", userId);
            throw new SQLException("User ID must be positive");
        }
        String query = "DELETE FROM Users WHERE user_id = ?";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, userId);
            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected == 0) {
                LOGGER.log(Level.WARNING, "No user found with userId: {0}", userId);
            }
        }
    }

    public List<LoginHistory> getLoginHistory(int userId) throws SQLException {
        if (userId <= 0) {
            LOGGER.log(Level.WARNING, "Invalid userId in getLoginHistory: {0}", userId);
            return new ArrayList<>();
        }
        List<LoginHistory> history = new ArrayList<>();
        String query = "SELECT login_id, user_id, login_time, ip_address FROM Login_History WHERE user_id = ? ORDER BY login_time DESC";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, userId);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                LoginHistory login = new LoginHistory();
                login.setLoginId(rs.getInt("login_id")); // Sửa: dùng "login_id" thay vì "id"
                login.setUserId(rs.getInt("user_id"));
                login.setLoginTime(rs.getTimestamp("login_time"));
                login.setIpAddress(rs.getString("ip_address"));
                // Bỏ: login.setBrowser(rs.getString("browser")); vì cột "browser" không tồn tại
                history.add(login);
            }
        }
        return history;
    }

    public boolean verifyPassword(int userId, String password) throws SQLException {
        if (userId <= 0 || password == null) {
            LOGGER.log(Level.WARNING, "Invalid input in verifyPassword: userId={0}, password={1}", new Object[]{userId, password});
            return false;
        }
        String query = "SELECT password FROM Users WHERE user_id = ?";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, userId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                String storedPassword = rs.getString("password");
                return BCrypt.checkpw(password, storedPassword); // Sử dụng BCrypt để kiểm tra
            }
        }
        return false;
    }
    
    public boolean isUsernameExists(String username) throws SQLException {
        String query = "SELECT COUNT(*) FROM Users WHERE username = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, username);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        }
        return false;
    }

    public boolean isEmailExists(String email) throws SQLException {
        String query = "SELECT COUNT(*) FROM Users WHERE email = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, email);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        }
        return false;
    }
}




AdminDashboardController.java

AdminRoomController.java

AdminUserController.java







package com.mycompany.oceanichotel.controllers.user;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import jakarta.servlet.annotation.WebServlet;

import java.io.IOException;

@WebServlet("/get-error")
public class ErrorHandlerServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        String error = (session != null && session.getAttribute("error") != null)
                ? (String) session.getAttribute("error")
                : "";
        if (session != null) {
            session.removeAttribute("error");
        }
        response.setContentType("text/plain");
        response.getWriter().write(error);
    }
}

package com.mycompany.oceanichotel.controllers.user;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@WebServlet("/index")
public class IndexServlet extends HttpServlet {
    private static final Logger logger = LoggerFactory.getLogger(IndexServlet.class);

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        logger.info("Handling request for URL: {}", request.getRequestURI());
        logger.info("Forwarding to login.jsp");
        request.getRequestDispatcher("/WEB-INF/views/public/login.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        doGet(request, response);
    }
}



package com.mycompany.oceanichotel.controllers.user;

import com.mycompany.oceanichotel.models.User;
import com.mycompany.oceanichotel.services.user.UserService;
import com.mycompany.oceanichotel.utils.DatabaseUtil;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

@WebServlet("/login")
public class LoginController extends HttpServlet {

    private UserService userService;

    @Override
    public void init() throws ServletException {
        userService = new UserService();
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        req.getRequestDispatcher("/WEB-INF/views/public/login.jsp").forward(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String username = req.getParameter("username");
        String password = req.getParameter("password");

        try {
            User user = userService.loginUser(username, password);
            if (user != null) {
                HttpSession session = req.getSession();
                session.setAttribute("user", user);

                String ipAddress = req.getRemoteAddr();
                try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(
                        "INSERT INTO Login_History (user_id, ip_address) VALUES (?, ?)")) {
                    stmt.setInt(1, user.getUserId());
                    stmt.setString(2, ipAddress);
                    stmt.executeUpdate();
                } catch (SQLException e) {
                    throw new ServletException("Error logging login history", e);
                }

                if ("admin".equals(user.getRole())) {
                    resp.sendRedirect(req.getContextPath() + "/admin/dashboard");
                } else {
                    resp.sendRedirect(req.getContextPath() + "/user/dashboard");
                    
                }

            } else {
                req.setAttribute("error", "Invalid username or password");
                req.getRequestDispatcher("/WEB-INF/views/public/login.jsp").forward(req, resp);
            }
        } catch (SQLException e) {
            throw new ServletException("Database error", e);
        }
    }
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.mycompany.oceanichotel.controllers.user;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;
/**
 *
 * @author annc1
 */
@WebServlet("/logout")
public class LogoutController extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        HttpSession session = req.getSession(false);
        if (session != null) {
            session.invalidate();
        }
        resp.sendRedirect(req.getContextPath() + "/login");
    }
}


package com.mycompany.oceanichotel.controllers.user;

import com.mycompany.oceanichotel.models.User;
import com.mycompany.oceanichotel.services.user.UserService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.sql.SQLException;

@WebServlet("/register")
public class RegisterController extends HttpServlet {
    private UserService userService;

    @Override
    public void init() throws ServletException {
        userService = new UserService();
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        req.getRequestDispatcher("/WEB-INF/views/public/register.jsp").forward(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String username = req.getParameter("username");
        String email = req.getParameter("email");
        String password = req.getParameter("password");

        User user = new User(username, password, email);
        try {
            userService.registerUser(user);
            resp.sendRedirect(req.getContextPath() + "/login"); // Đã đúng: chuyển đến login
        } catch (SQLException e) {
            req.setAttribute("error", e.getMessage());
            req.getRequestDispatcher("/WEB-INF/views/public/register.jsp").forward(req, resp);
        }
    }
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.mycompany.oceanichotel.controllers.user;

import com.mycompany.oceanichotel.models.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;

/**
 *
 * @author annc1
 */
@WebServlet("/user/dashboard")
public class UserDashboardController extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        if (session != null && session.getAttribute("user") != null) {
            User user = (User) session.getAttribute("user");
            if ("user".equals(user.getRole())) {
                request.setAttribute("username", user.getUsername());
                request.getRequestDispatcher("/WEB-INF/views/public/dashboard.jsp").forward(request, response);
                return;
            }
        }
        response.sendRedirect(request.getContextPath() + "/login");
    }
}


package com.mycompany.oceanichotel.controllers.user;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import jakarta.servlet.annotation.WebServlet;

import java.io.IOException;

@WebServlet("/settings")
public class SettingsServlet extends HttpServlet {
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession();
        
        String language = request.getParameter("language");
        if (language != null && (language.equals("en") || language.equals("vi"))) {
            session.setAttribute("language", language);
        }

        String theme = request.getParameter("theme");
        if (theme != null && (theme.equals("light") || theme.equals("dark"))) {
            session.setAttribute("theme", theme);
        }

        String referer = request.getHeader("Referer");
        response.sendRedirect(referer != null ? referer : request.getContextPath() + "/admin/users");
    }
}




ErrorHandlerServlet.java

IndexServlet.java

LoginController.java

LogoutController.java

RegisterController.java

UserDashboardController.java

SettingsServlet.java







package com.mycompany.oceanichotel.models;

import java.sql.Timestamp;

public class LoginHistory {
    private int loginId;
    private int userId;
    private Timestamp loginTime;
    private String ipAddress;

    // Getters and Setters
    public int getLoginId() { return loginId; }
    public void setLoginId(int loginId) { this.loginId = loginId; }
    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }
    public Timestamp getLoginTime() { return loginTime; }
    public void setLoginTime(Timestamp loginTime) { this.loginTime = loginTime; }
    public String getIpAddress() { return ipAddress; }
    public void setIpAddress(String ipAddress) { this.ipAddress = ipAddress; }
}

package com.mycompany.oceanichotel.models;

import java.sql.Timestamp;

public class Room {
    private int roomId;
    private String roomNumber;
    private String roomType;
    private double pricePerNight;
    private boolean isAvailable;
    private String description;
    private Timestamp createdAt;

    // Getters and Setters
    public int getRoomId() { return roomId; }
    public void setRoomId(int roomId) { this.roomId = roomId; }
    public String getRoomNumber() { return roomNumber; }
    public void setRoomNumber(String roomNumber) { this.roomNumber = roomNumber; }
    public String getRoomType() { return roomType; }
    public void setRoomType(String roomType) { this.roomType = roomType; }
    public double getPricePerNight() { return pricePerNight; }
    public void setPricePerNight(double pricePerNight) { this.pricePerNight = pricePerNight; }
    public boolean isAvailable() { return isAvailable; }
    public void setAvailable(boolean available) { isAvailable = available; }
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
    public Timestamp getCreatedAt() { return createdAt; }
    public void setCreatedAt(Timestamp createdAt) { this.createdAt = createdAt; }
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.mycompany.oceanichotel.models;

import java.sql.Timestamp;

/**
 *
 * @author annc1
 */
public class User {

    private int userId;
    private String username;
    private String email;
    private String password;
    private String role;
    private String avatar;
    private boolean isActive;
    private Timestamp createdAt;

    private String language;
    private String theme;

    public User() {
        this.language = "en";
        this.theme = "light";
    }

    public User(String username, String password, String email) {
        this.username = username;
        this.password = password;
        this.email = email;
        this.role = "user";
        this.isActive = true;
        this.language = "en";
        this.theme = "light";
    }

    // Getter và Setter
    public int getUserId() {
        return userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    // Thêm các getter/setter còn lại tương tự
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    public String getAvatar() {
        return avatar;
    }

    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }

    public boolean isActive() {
        return isActive;
    }

    public void setActive(boolean active) {
        isActive = active;
    }

    public Timestamp getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(Timestamp createdAt) {
        this.createdAt = createdAt;
    }
    
    public String getLanguage() {
        return language;
    }

    public void setLanguage(String language) {
        this.language = language;
    }

    public String getTheme() {
        return theme;
    }

    public void setTheme(String theme) {
        this.theme = theme;
    }
}






LoginHistory.java

Room.java

User.java







package com.mycompany.oceanichotel.services.admin;

import com.mycompany.oceanichotel.models.Room;
import com.mycompany.oceanichotel.utils.DatabaseUtil;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import java.util.logging.Level;

public class AdminRoomService {

    private static final int PAGE_SIZE = 10;
    private static final Logger LOGGER = Logger.getLogger(AdminRoomService.class.getName());

    public List<Room> getRooms(int page, String search, String status, String roomType) throws SQLException {
        if (page < 1) {
            LOGGER.log(Level.WARNING, "Invalid page number: {0}, defaulting to 1", page);
            page = 1;
        }
        List<Room> rooms = new ArrayList<>();
        String query = "SELECT * FROM Rooms WHERE 1=1";
        if (search != null && !search.trim().isEmpty()) {
            query += " AND room_number LIKE ?";
        }
        if (status != null && !status.isEmpty()) {
            query += " AND is_available = ?";
        }
        if (roomType != null && !roomType.isEmpty()) {
            query += " AND room_type = ?";
        }
        query += " ORDER BY room_id OFFSET ? ROWS FETCH NEXT ? ROWS ONLY";

        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            int paramIndex = 1;
            if (search != null && !search.trim().isEmpty()) {
                stmt.setString(paramIndex++, "%" + search + "%");
            }
            if (status != null && !status.isEmpty()) {
                stmt.setBoolean(paramIndex++, Boolean.parseBoolean(status));
            }
            if (roomType != null && !roomType.isEmpty()) {
                stmt.setString(paramIndex++, roomType);
            }
            stmt.setInt(paramIndex++, (page - 1) * PAGE_SIZE);
            stmt.setInt(paramIndex, PAGE_SIZE);

            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                Room room = new Room();
                room.setRoomId(rs.getInt("room_id"));
                room.setRoomNumber(rs.getString("room_number"));
                room.setRoomType(rs.getString("room_type"));
                room.setPricePerNight(rs.getDouble("price_per_night"));
                room.setAvailable(rs.getBoolean("is_available"));
                room.setDescription(rs.getString("description"));
                room.setCreatedAt(rs.getTimestamp("created_at"));
                rooms.add(room);
            }
        }
        return rooms;
    }

    public int getTotalRooms(String search, String status, String roomType) throws SQLException {
        String query = "SELECT COUNT(*) FROM Rooms WHERE 1=1";
        if (search != null && !search.trim().isEmpty()) {
            query += " AND room_number LIKE ?";
        }
        if (status != null && !status.isEmpty()) {
            query += " AND is_available = ?";
        }
        if (roomType != null && !roomType.isEmpty()) {
            query += " AND room_type = ?";
        }
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            int paramIndex = 1;
            if (search != null && !search.trim().isEmpty()) {
                stmt.setString(paramIndex++, "%" + search + "%");
            }
            if (status != null && !status.isEmpty()) {
                stmt.setBoolean(paramIndex++, Boolean.parseBoolean(status));
            }
            if (roomType != null && !roomType.isEmpty()) {
                stmt.setString(paramIndex++, roomType);
            }
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return 0;
    }

    public Room getRoomById(int roomId) throws SQLException {
        String query = "SELECT * FROM Rooms WHERE room_id = ?";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, roomId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                Room room = new Room();
                room.setRoomId(rs.getInt("room_id"));
                room.setRoomNumber(rs.getString("room_number"));
                room.setRoomType(rs.getString("room_type"));
                room.setPricePerNight(rs.getDouble("price_per_night"));
                room.setAvailable(rs.getBoolean("is_available"));
                room.setDescription(rs.getString("description"));
                room.setCreatedAt(rs.getTimestamp("created_at"));
                return room;
            }
        }
        return null;
    }

    public void addRoom(Room room) throws SQLException {
        String query = "INSERT INTO Rooms (room_number, room_type, price_per_night, is_available, description, created_at) VALUES (?, ?, ?, ?, ?, GETDATE())";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, room.getRoomNumber());
            stmt.setString(2, room.getRoomType());
            stmt.setDouble(3, room.getPricePerNight());
            stmt.setBoolean(4, room.isAvailable());
            stmt.setString(5, room.getDescription());
            stmt.executeUpdate();
        }
    }

    public void updateRoom(Room room) throws SQLException {
        String query = "UPDATE Rooms SET room_number = ?, room_type = ?, price_per_night = ?, is_available = ?, description = ? WHERE room_id = ?";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, room.getRoomNumber());
            stmt.setString(2, room.getRoomType());
            stmt.setDouble(3, room.getPricePerNight());
            stmt.setBoolean(4, room.isAvailable());
            stmt.setString(5, room.getDescription());
            stmt.setInt(6, room.getRoomId());
            stmt.executeUpdate();
        }
    }

    public void deleteRoom(int roomId) throws SQLException {
        String query = "DELETE FROM Rooms WHERE room_id = ?";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, roomId);
            stmt.executeUpdate();
        }
    }
    
    public boolean isRoomNumberExists(String roomNumber) throws SQLException {
        String query = "SELECT COUNT(*) FROM Rooms WHERE room_number = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, roomNumber);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        }
        return false;
    }
}


package com.mycompany.oceanichotel.services.admin;

import com.mycompany.oceanichotel.models.LoginHistory;
import com.mycompany.oceanichotel.models.User;
import com.mycompany.oceanichotel.utils.DatabaseUtil;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import java.util.logging.Level;
import org.mindrot.jbcrypt.BCrypt;

public class AdminUserService {

    private static final int PAGE_SIZE = 10;
    private static final Logger LOGGER = Logger.getLogger(AdminUserService.class.getName());

    public List<User> getUsers(int page, String search) throws SQLException {
        if (page < 1) {
            LOGGER.log(Level.WARNING, "Invalid page number: {0}, defaulting to 1", page);
            page = 1;
        }
        List<User> users = new ArrayList<>();
        String query = "SELECT * FROM Users WHERE 1=1";
        if (search != null && !search.trim().isEmpty()) {
            query += " AND (username LIKE ? OR email LIKE ?)";
        }
        query += " ORDER BY user_id OFFSET ? ROWS FETCH NEXT ? ROWS ONLY";

        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            int paramIndex = 1;
            if (search != null && !search.trim().isEmpty()) {
                stmt.setString(paramIndex++, "%" + search + "%");
                stmt.setString(paramIndex++, "%" + search + "%");
            }
            stmt.setInt(paramIndex++, (page - 1) * PAGE_SIZE);
            stmt.setInt(paramIndex, PAGE_SIZE);

            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                User user = new User();
                user.setUserId(rs.getInt("user_id"));
                user.setUsername(rs.getString("username"));
                user.setPassword(rs.getString("password"));
                user.setEmail(rs.getString("email"));
                user.setRole(rs.getString("role"));
                user.setAvatar(rs.getString("avatar"));
                user.setActive(rs.getBoolean("is_active"));
                user.setCreatedAt(rs.getTimestamp("created_at"));
                users.add(user);
            }
        }
        return users;
    }

    public int getTotalUsers(String search) throws SQLException {
        String query = "SELECT COUNT(*) FROM Users WHERE 1=1";
        if (search != null && !search.trim().isEmpty()) {
            query += " AND (username LIKE ? OR email LIKE ?)";
        }

        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            if (search != null && !search.trim().isEmpty()) {
                stmt.setString(1, "%" + search + "%");
                stmt.setString(2, "%" + search + "%");
            }
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return 0;
    }

    public User getUserById(int userId) throws SQLException {
        if (userId <= 0) {
            LOGGER.log(Level.WARNING, "Invalid userId in getUserById: {0}", userId);
            return null;
        }
        String query = "SELECT * FROM Users WHERE user_id = ?";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, userId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                User user = new User();
                user.setUserId(rs.getInt("user_id"));
                user.setUsername(rs.getString("username"));
                user.setPassword(rs.getString("password"));
                user.setEmail(rs.getString("email"));
                user.setRole(rs.getString("role"));
                user.setAvatar(rs.getString("avatar"));
                user.setActive(rs.getBoolean("is_active"));
                user.setCreatedAt(rs.getTimestamp("created_at"));
                return user;
            }
        }
        return null;
    }

    public void addUser(User user) throws SQLException {
        if (user == null || user.getUsername() == null || user.getPassword() == null) {
            LOGGER.log(Level.SEVERE, "Invalid user data in addUser");
            throw new SQLException("User data cannot be null");
        }
        String query = "INSERT INTO Users (username, password, email, role, is_active, created_at) VALUES (?, ?, ?, ?, ?, GETDATE())";
        String hashedPassword = BCrypt.hashpw(user.getPassword(), BCrypt.gensalt());

        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, user.getUsername());
            stmt.setString(2, hashedPassword);
            stmt.setString(3, user.getEmail());
            stmt.setString(4, user.getRole());
            stmt.setBoolean(5, user.isActive());
            stmt.executeUpdate();
        }
    }

    public void updateUser(User user) throws SQLException {
        if (user == null || user.getUserId() <= 0) {
            LOGGER.log(Level.SEVERE, "Invalid user data in updateUser: {0}", user != null ? user.getUserId() : "null");
            throw new SQLException("User ID cannot be null or negative");
        }
        String query = "UPDATE Users SET username = ?, email = ?, role = ?, is_active = ? WHERE user_id = ?";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, user.getUsername());
            stmt.setString(2, user.getEmail());
            stmt.setString(3, user.getRole());
            stmt.setBoolean(4, user.isActive());
            stmt.setInt(5, user.getUserId());
            stmt.executeUpdate();
        }
    }

    public void deleteUser(int userId) throws SQLException {
        if (userId <= 0) {
            LOGGER.log(Level.WARNING, "Invalid userId in deleteUser: {0}", userId);
            throw new SQLException("User ID must be positive");
        }
        String query = "DELETE FROM Users WHERE user_id = ?";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, userId);
            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected == 0) {
                LOGGER.log(Level.WARNING, "No user found with userId: {0}", userId);
            }
        }
    }

    public List<LoginHistory> getLoginHistory(int userId) throws SQLException {
        if (userId <= 0) {
            LOGGER.log(Level.WARNING, "Invalid userId in getLoginHistory: {0}", userId);
            return new ArrayList<>();
        }
        List<LoginHistory> history = new ArrayList<>();
        String query = "SELECT login_id, user_id, login_time, ip_address FROM Login_History WHERE user_id = ? ORDER BY login_time DESC";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, userId);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                LoginHistory login = new LoginHistory();
                login.setLoginId(rs.getInt("login_id")); // Sửa: dùng "login_id" thay vì "id"
                login.setUserId(rs.getInt("user_id"));
                login.setLoginTime(rs.getTimestamp("login_time"));
                login.setIpAddress(rs.getString("ip_address"));
                // Bỏ: login.setBrowser(rs.getString("browser")); vì cột "browser" không tồn tại
                history.add(login);
            }
        }
        return history;
    }

    public boolean verifyPassword(int userId, String password) throws SQLException {
        if (userId <= 0 || password == null) {
            LOGGER.log(Level.WARNING, "Invalid input in verifyPassword: userId={0}, password={1}", new Object[]{userId, password});
            return false;
        }
        String query = "SELECT password FROM Users WHERE user_id = ?";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, userId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                String storedPassword = rs.getString("password");
                return BCrypt.checkpw(password, storedPassword); // Sử dụng BCrypt để kiểm tra
            }
        }
        return false;
    }
    
    public boolean isUsernameExists(String username) throws SQLException {
        String query = "SELECT COUNT(*) FROM Users WHERE username = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, username);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        }
        return false;
    }

    public boolean isEmailExists(String email) throws SQLException {
        String query = "SELECT COUNT(*) FROM Users WHERE email = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, email);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        }
        return false;
    }
}




AdminRoomService.java

AdminUserService.java







package com.mycompany.oceanichotel.services.user;

import com.mycompany.oceanichotel.models.User;
import com.mycompany.oceanichotel.utils.DatabaseUtil;
import org.mindrot.jbcrypt.BCrypt;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserService {

    // Kiểm tra xem username đã tồn tại hay chưa
    public boolean isUsernameExists(String username) throws SQLException {
        String sql = "SELECT COUNT(*) FROM Users WHERE username = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, username);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0; // Trả về true nếu username đã tồn tại
            }
            return false;
        }
    }

    // Đăng ký người dùng với kiểm tra username
    public void registerUser(User user) throws SQLException {
        // Kiểm tra xem username đã tồn tại chưa
        if (isUsernameExists(user.getUsername())) {
            throw new SQLException("Username already exists");
        }

        String hashedPassword = BCrypt.hashpw(user.getPassword(), BCrypt.gensalt());
        String sql = "INSERT INTO Users (username, password, email) VALUES (?, ?, ?)";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, user.getUsername());
            stmt.setString(2, hashedPassword);
            stmt.setString(3, user.getEmail());
            stmt.executeUpdate();
        }
    }

    // Đăng nhập người dùng
    public User loginUser(String username, String password) throws SQLException {
        String sql = "SELECT * FROM Users WHERE username = ? AND is_active = 1";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, username);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                String hashedPassword = rs.getString("password");
                if (BCrypt.checkpw(password, hashedPassword)) {
                    User user = new User();
                    user.setUserId(rs.getInt("user_id"));
                    user.setUsername(rs.getString("username"));
                    user.setEmail(rs.getString("email"));
                    user.setRole(rs.getString("role"));
                    user.setActive(rs.getBoolean("is_active"));
                    return user;
                }
            }
            return null; // Login failed
        }
    }
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.mycompany.oceanichotel.utils;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

/**
 *
 * @author annc1
 */
public class DatabaseUtil {
//    private static final String URL = "jdbc:mysql://localhost:3306/OceanHotel";
//    private static final String USER = "root";
//    private static final String PASSWORD = "";

    private static final String URL = "jdbc:sqlserver://localhost:1433;databaseName=OceanHotel;encrypt=true;trustServerCertificate=true";
    private static final String USER = "sa"; // Thay bằng username SQL Server của bạn
    private static final String PASSWORD = "12345"; // Thay bằng password của bạn

    public static Connection getConnection() throws SQLException {
//        try {
//            Class.forName("com.mysql.cj.jdbc.Driver");
//            return DriverManager.getConnection(URL, USER, PASSWORD);
//        } catch (ClassNotFoundException e) {
//            throw new SQLException("MySQL JDBC Driver not found", e);
//        }
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
            System.out.println("Database connection successful!");
            return conn;
        } catch (ClassNotFoundException e) {
            throw new SQLException("SQL Server JDBC Driver not found", e);
        } catch (SQLException e) {
            System.err.println("Connection failed: " + e.getMessage());
            throw e;
        }
    }
}


UserService.java

DatabaseUtil.java


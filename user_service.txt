user_servie

package com.mycompany.oceanichotel.services.user;

import com.mycompany.oceanichotel.models.Booking;
import com.mycompany.oceanichotel.models.Room;
import com.mycompany.oceanichotel.models.RoomType;
import com.mycompany.oceanichotel.utils.DatabaseUtil;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

public class UserBookingService {

    private static final Logger LOGGER = Logger.getLogger(UserBookingService.class.getName());

    public List<Booking> getUserBookings(int userId, String statusFilter, String checkInFrom, String checkInTo, String sortOption) throws SQLException {
        List<Booking> bookings = new ArrayList<>();
        StringBuilder query = new StringBuilder(
                "SELECT b.booking_id, b.user_id, b.room_id, b.check_in_date, b.check_out_date, "
                + "b.total_price, b.status, b.num_adults, b.num_children, b.created_at, r.room_number, rt.type_name "
                + "FROM Bookings b "
                + "JOIN Rooms r ON b.room_id = r.room_id "
                + "JOIN Room_Types rt ON r.type_id = rt.type_id "
                + "WHERE b.user_id = ?"
        );

        List<String> conditions = new ArrayList<>();
        if (statusFilter != null && !statusFilter.isEmpty()) {
            conditions.add("b.status = ?");
        }
        if (checkInFrom != null && !checkInFrom.isEmpty()) {
            conditions.add("b.check_in_date >= ?");
        }
        if (checkInTo != null && !checkInTo.isEmpty()) {
            conditions.add("b.check_in_date <= ?");
        }
        if (!conditions.isEmpty()) {
            query.append(" AND ").append(String.join(" AND ", conditions));
        }

        if (sortOption != null && !sortOption.isEmpty()) {
            switch (sortOption.toLowerCase()) {
                case "newest":
                    query.append(" ORDER BY b.created_at DESC");
                    break;
                case "oldest":
                    query.append(" ORDER BY b.created_at ASC");
                    break;
                case "price_asc":
                    query.append(" ORDER BY b.total_price ASC");
                    break;
                case "price_desc":
                    query.append(" ORDER BY b.total_price DESC");
                    break;
                case "room_asc":
                    query.append(" ORDER BY r.room_number ASC");
                    break;
                case "room_desc":
                    query.append(" ORDER BY r.room_number DESC");
                    break;
                default:
                    query.append(" ORDER BY b.created_at DESC");
            }
        } else {
            query.append(" ORDER BY b.created_at DESC");
        }

        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query.toString())) {
            int paramIndex = 1;
            stmt.setInt(paramIndex++, userId);
            if (statusFilter != null && !statusFilter.isEmpty()) {
                stmt.setString(paramIndex++, statusFilter);
            }
            if (checkInFrom != null && !checkInFrom.isEmpty()) {
                stmt.setDate(paramIndex++, java.sql.Date.valueOf(checkInFrom));
            }
            if (checkInTo != null && !checkInTo.isEmpty()) {
                stmt.setDate(paramIndex++, java.sql.Date.valueOf(checkInTo));
            }

            LOGGER.info("Executing query: " + query.toString());
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                Booking booking = new Booking();
                booking.setBookingId(rs.getInt("booking_id"));
                booking.setUserId(rs.getInt("user_id"));
                booking.setRoomId(rs.getInt("room_id"));
                booking.setCheckInDate(rs.getDate("check_in_date"));
                booking.setCheckOutDate(rs.getDate("check_out_date"));
                booking.setAdults(rs.getInt("num_adults"));
                booking.setChildren(rs.getInt("num_children"));
                booking.setTotalPrice(rs.getDouble("total_price"));
                booking.setStatus(rs.getString("status"));
                booking.setCreatedAt(rs.getTimestamp("created_at")); // Lấy created_at

                long diffInMillies = Math.abs(booking.getCheckOutDate().getTime() - booking.getCheckInDate().getTime());
                int nights = (int) TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);
                booking.setNights(nights);

                long hoursUntilCheckIn = TimeUnit.HOURS.convert(booking.getCheckInDate().getTime() - new Date().getTime(), TimeUnit.MILLISECONDS);
                booking.setCanCancel(hoursUntilCheckIn > 24);
                long minutesSinceCreation = TimeUnit.MINUTES.convert(new Date().getTime() - booking.getCreatedAt().getTime(), TimeUnit.MILLISECONDS);

                // Kiểm tra thời hạn thanh toán (24 giờ)
                if ("Pending".equals(booking.getStatus()) && booking.getCreatedAt() != null) {
                    long hoursSinceCreation = TimeUnit.HOURS.convert(new Date().getTime() - booking.getCreatedAt().getTime(), TimeUnit.MILLISECONDS);
//                    if (hoursSinceCreation > 24) {
                    if (minutesSinceCreation > 15) {
                        cancelExpiredBooking(booking.getBookingId(), userId);
                        continue; // Bỏ qua booking đã hủy
                    }
                }

                Room room = new Room();
                room.setRoomId(rs.getInt("room_id"));
                room.setRoomNumber(rs.getString("room_number"));
                RoomType roomType = new RoomType();
                roomType.setTypeName(rs.getString("type_name"));
                room.setRoomType(roomType);
                booking.setRoom(room);

                bookings.add(booking);
            }
            LOGGER.log(Level.INFO, "Retrieved {0} bookings for userId={1}", new Object[]{bookings.size(), userId});
        }
        return bookings;
    }

    private void cancelExpiredBooking(int bookingId, int userId) throws SQLException {
        String updateQuery = "UPDATE Bookings SET status = 'Cancelled' WHERE booking_id = ? AND user_id = ? AND status = 'Pending'";
        String insertHistoryQuery = "INSERT INTO Booking_History (booking_id, changed_by, old_status, new_status, changed_at) VALUES (?, ?, ?, ?, GETDATE())";

        try (Connection conn = DatabaseUtil.getConnection()) {
            conn.setAutoCommit(false);

            try (PreparedStatement updateStmt = conn.prepareStatement(updateQuery)) {
                updateStmt.setInt(1, bookingId);
                updateStmt.setInt(2, userId);
                updateStmt.executeUpdate();
            }

            try (PreparedStatement historyStmt = conn.prepareStatement(insertHistoryQuery)) {
                historyStmt.setInt(1, bookingId);
                historyStmt.setInt(2, userId);
                historyStmt.setString(3, "Pending");
                historyStmt.setString(4, "Cancelled");
                historyStmt.executeUpdate();
            }

            conn.commit();
            LOGGER.info("Booking ID=" + bookingId + " auto-cancelled due to payment timeout.");
        }
    }

    public Booking getBookingById(int bookingId, int userId) throws SQLException {
        String query = "SELECT b.booking_id, b.total_price, b.status "
                + "FROM Bookings b WHERE b.booking_id = ? AND b.user_id = ?";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, bookingId);
            stmt.setInt(2, userId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                Booking booking = new Booking();
                booking.setBookingId(rs.getInt("booking_id"));
                booking.setTotalPrice(rs.getDouble("total_price"));
                booking.setStatus(rs.getString("status"));
                return booking;
            }
            return null;
        }
    }

    public int createTransaction(int bookingId, int userId, double amount) throws SQLException {
        String query = "INSERT INTO Transactions (booking_id, user_id, amount, status) VALUES (?, ?, ?, 'Pending')";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS)) {
            stmt.setInt(1, bookingId);
            stmt.setInt(2, userId);
            stmt.setDouble(3, amount);
            stmt.executeUpdate();

            ResultSet rs = stmt.getGeneratedKeys();
            if (rs.next()) {
                return rs.getInt(1); // Trả về transaction_id
            }
            throw new SQLException("Failed to retrieve transaction ID.");
        }
    }

    public boolean hasPendingMoMoTransaction(int bookingId) throws SQLException {
        String query = "SELECT COUNT(*) FROM Transactions WHERE booking_id = ? AND status = 'Pending'";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, bookingId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
            return false;
        }
    }

    public void confirmMoMoPayment(int bookingId, int userId) throws SQLException {
        String updateBookingQuery = "UPDATE Bookings SET status = 'Confirmed' WHERE booking_id = ? AND user_id = ? AND status = 'Pending'";
        String updateTransactionQuery = "UPDATE Transactions SET status = 'Success' WHERE booking_id = ? AND status = 'Pending'";
        String insertHistoryQuery = "INSERT INTO Booking_History (booking_id, changed_by, old_status, new_status, changed_at) VALUES (?, ?, ?, ?, GETDATE())";

        try (Connection conn = DatabaseUtil.getConnection()) {
            conn.setAutoCommit(false); // Bắt đầu transaction

            // Cập nhật trạng thái booking
            try (PreparedStatement updateStmt = conn.prepareStatement(updateBookingQuery)) {
                updateStmt.setInt(1, bookingId);
                updateStmt.setInt(2, userId);
                int rowsAffected = updateStmt.executeUpdate();
                if (rowsAffected == 0) {
                    throw new SQLException("Booking not found or not in Pending status.");
                }
            }

            // Cập nhật trạng thái giao dịch
            try (PreparedStatement updateTransStmt = conn.prepareStatement(updateTransactionQuery)) {
                updateTransStmt.setInt(1, bookingId);
                int rowsAffected = updateTransStmt.executeUpdate();
                if (rowsAffected == 0) {
                    throw new SQLException("No pending MoMo transaction found.");
                }
            }

            // Ghi lịch sử thay đổi trạng thái
            try (PreparedStatement historyStmt = conn.prepareStatement(insertHistoryQuery)) {
                historyStmt.setInt(1, bookingId);
                historyStmt.setInt(2, userId);
                historyStmt.setString(3, "Pending");
                historyStmt.setString(4, "Confirmed");
                historyStmt.executeUpdate();
            }

            conn.commit(); // Commit transaction
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Error confirming MoMo payment for booking ID=" + bookingId, e);
            throw e;
        }
    }

    public void confirmBooking(int bookingId, int userId) throws SQLException {
        String updateQuery = "UPDATE Bookings SET status = 'Confirmed' WHERE booking_id = ? AND user_id = ? AND status = 'Pending'";
        String insertHistoryQuery = "INSERT INTO Booking_History (booking_id, changed_by, old_status, new_status, changed_at) VALUES (?, ?, ?, ?, GETDATE())";

        try (Connection conn = DatabaseUtil.getConnection()) {
            conn.setAutoCommit(false); // Bắt đầu transaction

            try (PreparedStatement updateStmt = conn.prepareStatement(updateQuery)) {
                updateStmt.setInt(1, bookingId);
                updateStmt.setInt(2, userId);
                int rowsAffected = updateStmt.executeUpdate();
                if (rowsAffected == 0) {
                    throw new SQLException("Booking not found or already confirmed/cancelled.");
                }
            }

            try (PreparedStatement historyStmt = conn.prepareStatement(insertHistoryQuery)) {
                historyStmt.setInt(1, bookingId);
                historyStmt.setInt(2, userId);
                historyStmt.setString(3, "Pending");
                historyStmt.setString(4, "Confirmed");
                historyStmt.executeUpdate();
            }

            conn.commit(); // Commit transaction
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Error confirming booking ID=" + bookingId, e);
            throw e;
        }
    }

    public double calculateTotalPrice(int roomId, String checkIn, String checkOut) throws SQLException {
        String query = "SELECT price_per_night FROM Rooms WHERE room_id = ?";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, roomId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                double pricePerNight = rs.getDouble("price_per_night");
                long diffInMillies = Math.abs(new SimpleDateFormat("yyyy-MM-dd").parse(checkOut).getTime() - new SimpleDateFormat("yyyy-MM-dd").parse(checkIn).getTime());
                long nights = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);
                return pricePerNight * nights;
            }
            return 0;
        } catch (Exception e) {
            throw new SQLException("Error calculating total price", e);
        }
    }

    public boolean isRoomAvailable(int roomId, Date checkInDate, Date checkOutDate) throws SQLException {
        String query = "SELECT COUNT(*) FROM Bookings "
                + "WHERE room_id = ? AND status != 'Cancelled' "
                + "AND (check_in_date < ? AND check_out_date > ?)";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, roomId);
            stmt.setDate(2, new java.sql.Date(checkOutDate.getTime()));
            stmt.setDate(3, new java.sql.Date(checkInDate.getTime()));
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) == 0; // Trả về true nếu không có lịch trùng
            }
            return true;
        }
    }

//    public void saveBooking(Booking booking) throws SQLException {
//        String query = "INSERT INTO Bookings (user_id, room_id, check_in_date, check_out_date, num_adults, num_children, total_price, status) "
//                + "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
//        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
//            stmt.setInt(1, booking.getUserId());
//            stmt.setInt(2, booking.getRoomId());
//            stmt.setDate(3, new java.sql.Date(booking.getCheckInDate().getTime()));
//            stmt.setDate(4, new java.sql.Date(booking.getCheckOutDate().getTime()));
//            stmt.setInt(5, booking.getAdults());
//            stmt.setInt(6, booking.getChildren());
//            stmt.setDouble(7, booking.getTotalPrice());
//            stmt.setString(8, booking.getStatus());
//            stmt.executeUpdate();
//        }
//    }
    public void saveBooking(Booking booking) throws SQLException {
        if (!isRoomAvailable(booking.getRoomId(), booking.getCheckInDate(), booking.getCheckOutDate())) {
            throw new SQLException("Room is not available for the selected dates.");
        }

        String query = "INSERT INTO Bookings (user_id, room_id, check_in_date, check_out_date, num_adults, num_children, total_price, status, created_at) "
                + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, GETDATE())";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, booking.getUserId());
            stmt.setInt(2, booking.getRoomId());
            stmt.setDate(3, new java.sql.Date(booking.getCheckInDate().getTime()));
            stmt.setDate(4, new java.sql.Date(booking.getCheckOutDate().getTime()));
            stmt.setInt(5, booking.getAdults());
            stmt.setInt(6, booking.getChildren());
            stmt.setDouble(7, booking.getTotalPrice());
            stmt.setString(8, booking.getStatus());
            stmt.executeUpdate();
            LOGGER.info("Booking saved for roomId=" + booking.getRoomId());
        }
    }

}


package com.mycompany.oceanichotel.services.user;

import com.mycompany.oceanichotel.models.Booking;
import com.mycompany.oceanichotel.utils.DatabaseUtil;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

public class UserDashboardService {
    public List<Booking> getUserBookings(int userId) {
        List<Booking> bookings = new ArrayList<>();
        String query = "SELECT * FROM Bookings WHERE user_id = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, userId);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                Booking booking = new Booking();
                booking.setBookingId(rs.getInt("booking_id"));
                booking.setUserId(rs.getInt("user_id"));
                booking.setRoomId(rs.getInt("room_id"));
                booking.setCheckInDate(rs.getDate("check_in_date"));
                booking.setCheckOutDate(rs.getDate("check_out_date"));
                booking.setTotalPrice(rs.getDouble("total_price"));
                booking.setStatus(rs.getString("status"));
                bookings.add(booking);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return bookings;
    }
}

//package com.mycompany.oceanichotel.services.user;
//
//import com.mycompany.oceanichotel.models.Room;
//import com.mycompany.oceanichotel.models.RoomType;
//import com.mycompany.oceanichotel.models.RoomTypeImage;
//import com.mycompany.oceanichotel.services.admin.AdminRoomTypeService;
//import com.mycompany.oceanichotel.utils.DatabaseUtil;
//
//import java.sql.Connection;
//import java.sql.PreparedStatement;
//import java.sql.ResultSet;
//import java.sql.SQLException;
//import java.util.ArrayList;
//import java.util.List;
//import java.util.logging.Level;
//import java.util.logging.Logger;
//
//public class UserRoomDetailsService {
//    private static final Logger LOGGER = Logger.getLogger(UserRoomDetailsService.class.getName());
//    private AdminRoomTypeService roomTypeService;
//
//    public UserRoomDetailsService() {
//        this.roomTypeService = new AdminRoomTypeService();
//    }
//
//    public Room getRoomById(int roomId) throws SQLException {
//        Room room = null;
//        String query = "SELECT r.room_id, r.room_number, r.type_id, r.price_per_night, r.max_adults, r.max_children, r.description, r.is_available, r.created_at " +
//                       "FROM rooms r " +
//                       "WHERE r.room_id = ?";
//
//        Connection conn = null;
//        try {
//            conn = DatabaseUtil.getConnection();
//            if (conn == null) {
//                LOGGER.severe("Database connection is null");
//                throw new SQLException("Failed to establish database connection");
//            }
//
//            try (PreparedStatement stmt = conn.prepareStatement(query)) {
//                stmt.setInt(1, roomId);
//                ResultSet rs = stmt.executeQuery();
//
//                if (rs.next()) {
//                    room = new Room();
//                    room.setRoomId(rs.getInt("room_id"));
//                    room.setRoomNumber(rs.getString("room_number"));
//                    room.setPricePerNight(rs.getDouble("price_per_night"));
//                    room.setMaxAdults(rs.getInt("max_adults"));
//                    room.setMaxChildren(rs.getInt("max_children"));
//                    room.setDescription(rs.getString("description"));
//                    room.setAvailable(rs.getBoolean("is_available"));
//                    room.setCreatedAt(rs.getTimestamp("created_at"));
//
//                    // Lấy RoomType
//                    int typeId = rs.getInt("type_id");
//                    RoomType roomType = roomTypeService.getRoomTypeById(typeId);
//                    if (roomType != null) {
//                        room.setRoomType(roomType);
//                    } else {
//                        LOGGER.warning("RoomType not found for type_id: " + typeId);
//                    }
//
//                    // Lấy danh sách ảnh trực tiếp từ room_images dựa trên room_id
//                    List<RoomTypeImage> images = getRoomImagesByRoomId(roomId);
//                    if (!images.isEmpty()) {
//                        roomType.setImages(images); // Gán danh sách ảnh vào RoomType
//                        room.setPrimaryImage(images.stream()
//                            .filter(RoomTypeImage::isPrimary)
//                            .findFirst()
//                            .orElse(images.get(0))); // Lấy ảnh primary hoặc ảnh đầu tiên
//                    }
//                } else {
//                    LOGGER.info("No room found for roomId: " + roomId);
//                }
//            }
//        } catch (SQLException e) {
//            LOGGER.log(Level.SEVERE, "Error fetching room details for roomId: " + roomId, e);
//            throw e;
//        } finally {
//            if (conn != null) {
//                try {
//                    conn.close();
//                } catch (SQLException e) {
//                    LOGGER.log(Level.WARNING, "Error closing connection", e);
//                }
//            }
//        }
//        return room;
//    }
//
//    private List<RoomTypeImage> getRoomImagesByRoomId(int roomId) throws SQLException {
//        List<RoomTypeImage> images = new ArrayList<>();
//        String query = "SELECT image_id, room_id, image_url, is_primary, created_at " +
//                       "FROM room_images " +
//                       "WHERE room_id = ?";
//
//        Connection conn = null;
//        try {
//            conn = DatabaseUtil.getConnection();
//            if (conn == null) {
//                LOGGER.severe("Database connection is null");
//                throw new SQLException("Failed to establish database connection");
//            }
//
//            try (PreparedStatement stmt = conn.prepareStatement(query)) {
//                stmt.setInt(1, roomId);
//                ResultSet rs = stmt.executeQuery();
//
//                while (rs.next()) {
//                    RoomTypeImage image = new RoomTypeImage();
//                    image.setImageId(rs.getInt("image_id"));
//                    image.setTypeId(rs.getInt("room_id")); // Dùng room_id thay vì type_id
//                    image.setImageUrl(rs.getString("image_url"));
//                    image.setPrimary(rs.getBoolean("is_primary"));
//                    image.setCreatedAt(rs.getTimestamp("created_at"));
//                    images.add(image);
//                }
//            }
//        } catch (SQLException e) {
//            LOGGER.log(Level.SEVERE, "Error fetching images for room id: " + roomId, e);
//            throw e;
//        } finally {
//            if (conn != null) {
//                try {
//                    conn.close();
//                } catch (SQLException e) {
//                    LOGGER.log(Level.WARNING, "Error closing connection", e);
//                }
//            }
//        }
//        return images;
//    }
//}

package com.mycompany.oceanichotel.services.user;

import com.mycompany.oceanichotel.models.Booking;
import com.mycompany.oceanichotel.models.BookingHistory;
import com.mycompany.oceanichotel.models.Room;
import com.mycompany.oceanichotel.models.RoomType;
import com.mycompany.oceanichotel.services.admin.AdminRoomTypeService;
import com.mycompany.oceanichotel.utils.DatabaseUtil;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;
import java.util.logging.Level;

public class UserRoomService {

    private final AdminRoomTypeService roomTypeService;
    private static final Logger LOGGER = Logger.getLogger(UserRoomService.class.getName());

    public UserRoomService() {
        this.roomTypeService = new AdminRoomTypeService();
    }

    public List<RoomType> getAllRoomTypes() throws SQLException {
        LOGGER.info("Bắt đầu lấy danh sách tất cả loại phòng.");
        List<RoomType> roomTypes = roomTypeService.getAllRoomTypes();
        LOGGER.log(Level.INFO, "Đã lấy được {0} loại phòng.", roomTypes.size());
        return roomTypes;
    }

    public List<Room> getAvailableRoomsByType(String typeId) throws SQLException {
        if (typeId == null || typeId.trim().isEmpty()) {
            LOGGER.warning("typeId không hợp lệ: null hoặc rỗng.");
            throw new IllegalArgumentException("typeId không được null hoặc rỗng.");
        }

        int parsedTypeId;
        try {
            parsedTypeId = Integer.parseInt(typeId);
        } catch (NumberFormatException e) {
            LOGGER.log(Level.WARNING, "typeId không phải là số: {0}", typeId);
            throw new IllegalArgumentException("typeId phải là một số nguyên hợp lệ.");
        }

        List<Room> rooms = new ArrayList<>();
        String query = "SELECT r.room_id, r.room_number, r.type_id, r.price_per_night, "
                + "r.max_adults, r.max_children, r.description, r.is_available, r.created_at "
                + "FROM Rooms r WHERE r.type_id = ? AND r.is_available = 1";

        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, parsedTypeId);
            LOGGER.info("Thực thi truy vấn lấy phòng trống cho typeId=" + parsedTypeId);

            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Room room = mapRoom(rs);
                    rooms.add(room);
                }
            }
            LOGGER.log(Level.INFO, "Đã tìm thấy {0} phòng trống cho typeId={1}", new Object[]{rooms.size(), parsedTypeId});
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Lỗi khi lấy danh sách phòng trống cho typeId={0}", parsedTypeId);
            throw e;
        }
        return rooms;
    }

    public Room getRoomById(int roomId) throws SQLException {
        if (roomId <= 0) {
            LOGGER.warning("roomId không hợp lệ: " + roomId);
            throw new IllegalArgumentException("roomId phải là số nguyên dương.");
        }

        String query = "SELECT r.room_id, r.room_number, r.type_id, r.price_per_night, "
                + "r.max_adults, r.max_children, r.description, r.is_available, r.created_at "
                + "FROM Rooms r WHERE r.room_id = ?";

        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, roomId);
            LOGGER.info("Thực thi truy vấn lấy chi tiết phòng với roomId=" + roomId);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    Room room = mapRoom(rs);
                    LOGGER.info("Đã tìm thấy phòng với roomId=" + roomId);
                    return room;
                }
            }
            LOGGER.warning("Không tìm thấy phòng với roomId=" + roomId);
            return null;
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Lỗi khi lấy chi tiết phòng với roomId={0}", roomId);
            throw e;
        }
    }

    private Room mapRoom(ResultSet rs) throws SQLException {
        Room room = new Room();
        room.setRoomId(rs.getInt("room_id"));
        room.setRoomNumber(rs.getString("room_number"));
        room.setPricePerNight(rs.getDouble("price_per_night"));
        room.setMaxAdults(rs.getInt("max_adults"));
        room.setMaxChildren(rs.getInt("max_children"));
        room.setDescription(rs.getString("description"));
        room.setAvailable(rs.getBoolean("is_available"));
        room.setCreatedAt(rs.getTimestamp("created_at"));

        int typeId = rs.getInt("type_id");
        try {
            RoomType roomType = roomTypeService.getRoomTypeById(typeId);
            room.setRoomType(roomType);
        } catch (SQLException e) {
            LOGGER.log(Level.WARNING, "Không thể lấy RoomType cho typeId={0}: {1}", new Object[]{typeId, e.getMessage()});
            room.setRoomType(null);
        }
        return room;
    }

    public void bookRoom(Booking booking) throws SQLException {
        Connection conn = null;
        PreparedStatement stmtBooking = null;
        PreparedStatement stmtRoom = null;
        PreparedStatement stmtHistory = null;

        try {
            conn = DatabaseUtil.getConnection();
            conn.setAutoCommit(false);
            LOGGER.info("Starting transaction for booking roomId=" + booking.getRoomId());

            String insertBookingQuery = "INSERT INTO Bookings (user_id, room_id, check_in_date, check_out_date, total_price, status, num_adults, num_children) "
                    + "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
            stmtBooking = conn.prepareStatement(insertBookingQuery, Statement.RETURN_GENERATED_KEYS);
            stmtBooking.setInt(1, booking.getUserId());
            stmtBooking.setInt(2, booking.getRoomId());
            stmtBooking.setDate(3, new java.sql.Date(booking.getCheckInDate().getTime()));
            stmtBooking.setDate(4, new java.sql.Date(booking.getCheckOutDate().getTime()));
            stmtBooking.setDouble(5, booking.getTotalPrice());
            stmtBooking.setString(6, booking.getStatus());
            stmtBooking.setInt(7, booking.getAdults());    // Sửa thành num_adults
            stmtBooking.setInt(8, booking.getChildren());  // Sửa thành num_children
            int rowsAffected = stmtBooking.executeUpdate();
            LOGGER.info("Inserted into Bookings, rows affected: " + rowsAffected);

            ResultSet generatedKeys = stmtBooking.getGeneratedKeys();
            int bookingId;
            if (generatedKeys.next()) {
                bookingId = generatedKeys.getInt(1);
                booking.setBookingId(bookingId);
                LOGGER.info("Generated booking_id: " + bookingId);
            } else {
                throw new SQLException("Không thể lấy booking_id sau khi tạo booking.");
            }

            String updateRoomQuery = "UPDATE Rooms SET is_available = 0 WHERE room_id = ?";
            stmtRoom = conn.prepareStatement(updateRoomQuery);
            stmtRoom.setInt(1, booking.getRoomId());
            rowsAffected = stmtRoom.executeUpdate();
            LOGGER.info("Updated Rooms availability, rows affected: " + rowsAffected);

            String insertHistoryQuery = "INSERT INTO Booking_History (booking_id, changed_by, old_status, new_status) "
                    + "VALUES (?, ?, ?, ?)";
            stmtHistory = conn.prepareStatement(insertHistoryQuery);
            stmtHistory.setInt(1, bookingId);
            stmtHistory.setInt(2, booking.getUserId());
            stmtHistory.setString(3, null);
            stmtHistory.setString(4, booking.getStatus());
            rowsAffected = stmtHistory.executeUpdate();
            LOGGER.info("Inserted into Booking_History, rows affected: " + rowsAffected);

            conn.commit();
            LOGGER.info("Transaction committed successfully for roomId=" + booking.getRoomId() + ", bookingId=" + bookingId);
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Error during booking process for roomId=" + booking.getRoomId(), e);
            if (conn != null) {
                try {
                    LOGGER.info("Rolling back transaction for roomId=" + booking.getRoomId());
                    conn.rollback();
                } catch (SQLException rollbackEx) {
                    LOGGER.log(Level.SEVERE, "Rollback failed", rollbackEx);
                }
            }
            throw e;
        } finally {
            if (stmtBooking != null) try {
                stmtBooking.close();
            } catch (SQLException ignored) {
            }
            if (stmtRoom != null) try {
                stmtRoom.close();
            } catch (SQLException ignored) {
            }
            if (stmtHistory != null) try {
                stmtHistory.close();
            } catch (SQLException ignored) {
            }
            if (conn != null) try {
                conn.close();
            } catch (SQLException ignored) {
            }
        }
    }

    public List<Booking> getUserBookings(int userId) throws SQLException {
        if (userId <= 0) {
            LOGGER.warning("userId không hợp lệ: " + userId);
            throw new IllegalArgumentException("userId phải là số nguyên dương.");
        }

        List<Booking> bookings = new ArrayList<>();
        String query = "SELECT b.booking_id, b.user_id, b.room_id, b.check_in_date, b.check_out_date, "
                + "b.total_price, b.status, b.num_adults, b.num_children, b.created_at, "
                + "r.room_number, rt.type_name "
                + "FROM Bookings b "
                + "JOIN Rooms r ON b.room_id = r.room_id "
                + "JOIN Room_Types rt ON r.type_id = rt.type_id "
                + "WHERE b.user_id = ? "
                + "ORDER BY b.created_at DESC";

        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, userId);
            LOGGER.info("Thực thi truy vấn lấy danh sách đặt phòng cho userId=" + userId);

            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Booking booking = new Booking();
                    booking.setBookingId(rs.getInt("booking_id"));
                    booking.setUserId(rs.getInt("user_id"));
                    booking.setRoomId(rs.getInt("room_id"));
                    booking.setCheckInDate(rs.getDate("check_in_date"));
                    booking.setCheckOutDate(rs.getDate("check_out_date"));
                    booking.setTotalPrice(rs.getDouble("total_price"));
                    booking.setStatus(rs.getString("status"));
                    booking.setAdults(rs.getInt("num_adults"));    // Sửa thành num_adults
                    booking.setChildren(rs.getInt("num_children")); // Sửa thành num_children
                    Room room = new Room();
                    room.setRoomNumber(rs.getString("room_number"));
                    RoomType roomType = new RoomType();
                    roomType.setTypeName(rs.getString("type_name"));
                    room.setRoomType(roomType);
                    booking.setRoom(room);
                    bookings.add(booking);
                }
            }
            LOGGER.log(Level.INFO, "Đã tìm thấy {0} đặt phòng cho userId={1}", new Object[]{bookings.size(), userId});
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Lỗi khi lấy danh sách đặt phòng cho userId={0}", userId);
            throw e;
        }
        return bookings;
    }

    public List<BookingHistory> getBookingHistory(int userId) throws SQLException {
        if (userId <= 0) {
            LOGGER.warning("userId không hợp lệ: " + userId);
            throw new IllegalArgumentException("userId phải là số nguyên dương.");
        }

        List<BookingHistory> historyList = new ArrayList<>();
        String query = "SELECT bh.history_id, bh.booking_id, bh.changed_by, bh.old_status, bh.new_status, bh.changed_at "
                + "FROM Booking_History bh "
                + "JOIN Bookings b ON bh.booking_id = b.booking_id "
                + "WHERE b.user_id = ? "
                + "ORDER BY bh.changed_at DESC";

        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, userId);
            LOGGER.info("Thực thi truy vấn lấy lịch sử đặt phòng cho userId=" + userId);

            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    BookingHistory history = new BookingHistory();
                    history.setHistoryId(rs.getInt("history_id"));
                    history.setBookingId(rs.getInt("booking_id"));
                    history.setChangedBy(rs.getInt("changed_by"));
                    history.setOldStatus(rs.getString("old_status"));
                    history.setNewStatus(rs.getString("new_status"));
                    history.setChangedAt(rs.getTimestamp("changed_at")); // Sử dụng Timestamp để giữ giờ phút giây
                    historyList.add(history);
                }
            }
            LOGGER.log(Level.INFO, "Đã tìm thấy {0} bản ghi lịch sử cho userId={1}", new Object[]{historyList.size(), userId});
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Lỗi khi lấy lịch sử đặt phòng cho userId={0}", userId);
            throw e;
        }
        return historyList;
    }

    public void cancelBooking(int bookingId, int userId) throws SQLException {
        Connection conn = null;
        PreparedStatement stmtBooking = null;
        PreparedStatement stmtRoom = null;
        PreparedStatement stmtHistory = null;

        try {
            conn = DatabaseUtil.getConnection();
            conn.setAutoCommit(false);
            LOGGER.info("Starting transaction to cancel bookingId=" + bookingId);

            // 1. Kiểm tra đặt phòng có thể hủy không
            String checkQuery = "SELECT status, check_in_date, room_id FROM Bookings WHERE booking_id = ? AND user_id = ?";
            try (PreparedStatement checkStmt = conn.prepareStatement(checkQuery)) {
                checkStmt.setInt(1, bookingId);
                checkStmt.setInt(2, userId);
                ResultSet rs = checkStmt.executeQuery();
                if (!rs.next()) {
                    throw new SQLException("Booking not found or not owned by userId=" + userId);
                }
                String status = rs.getString("status");
                java.sql.Date checkInDate = rs.getDate("check_in_date");
                int roomId = rs.getInt("room_id");

                long hoursUntilCheckIn = TimeUnit.HOURS.convert(checkInDate.getTime() - new Date().getTime(), TimeUnit.MILLISECONDS);
                if (!"Pending".equals(status) || hoursUntilCheckIn <= 24) {
                    throw new SQLException("Booking cannot be cancelled: status=" + status + ", hours until check-in=" + hoursUntilCheckIn);
                }

                // 2. Cập nhật trạng thái booking
                String updateBookingQuery = "UPDATE Bookings SET status = 'Cancelled' WHERE booking_id = ?";
                stmtBooking = conn.prepareStatement(updateBookingQuery);
                stmtBooking.setInt(1, bookingId);
                int rowsAffected = stmtBooking.executeUpdate();
                LOGGER.info("Updated Booking status to Cancelled, rows affected: " + rowsAffected);
                if (rowsAffected != 1) {
                    throw new SQLException("Failed to update booking status for bookingId=" + bookingId);
                }

                // 3. Cập nhật trạng thái phòng
                String updateRoomQuery = "UPDATE Rooms SET is_available = 1 WHERE room_id = ?";
                stmtRoom = conn.prepareStatement(updateRoomQuery);
                stmtRoom.setInt(1, roomId);
                rowsAffected = stmtRoom.executeUpdate();
                LOGGER.info("Updated Room availability, rows affected: " + rowsAffected);
                if (rowsAffected != 1) {
                    throw new SQLException("Failed to update room availability for roomId=" + roomId);
                }

                // 4. Ghi lịch sử thay đổi trạng thái
                String insertHistoryQuery = "INSERT INTO Booking_History (booking_id, changed_by, old_status, new_status) VALUES (?, ?, ?, ?)";
                stmtHistory = conn.prepareStatement(insertHistoryQuery);
                stmtHistory.setInt(1, bookingId);
                stmtHistory.setInt(2, userId);
                stmtHistory.setString(3, "Pending");
                stmtHistory.setString(4, "Cancelled");
                rowsAffected = stmtHistory.executeUpdate();
                LOGGER.info("Inserted into Booking_History, rows affected: " + rowsAffected);
                if (rowsAffected != 1) {
                    throw new SQLException("Failed to insert into Booking_History for bookingId=" + bookingId);
                }
            }

            conn.commit();
            LOGGER.info("Transaction committed successfully for cancelling bookingId=" + bookingId);
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Error cancelling bookingId=" + bookingId, e);
            if (conn != null) {
                try {
                    LOGGER.info("Rolling back transaction for bookingId=" + bookingId);
                    conn.rollback();
                } catch (SQLException rollbackEx) {
                    LOGGER.log(Level.SEVERE, "Rollback failed", rollbackEx);
                }
            }
            throw e;
        } finally {
            if (stmtBooking != null) try {
                stmtBooking.close();
            } catch (SQLException ignored) {
            }
            if (stmtRoom != null) try {
                stmtRoom.close();
            } catch (SQLException ignored) {
            }
            if (stmtHistory != null) try {
                stmtHistory.close();
            } catch (SQLException ignored) {
            }
            if (conn != null) try {
                conn.close();
            } catch (SQLException ignored) {
            }
        }
    }
}


package com.mycompany.oceanichotel.services.user;

import com.mycompany.oceanichotel.models.User;
import com.mycompany.oceanichotel.utils.DatabaseUtil;
import org.mindrot.jbcrypt.BCrypt;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserService {

    // Kiểm tra xem username đã tồn tại hay chưa
    public boolean isUsernameExists(String username) throws SQLException {
        String sql = "SELECT COUNT(*) FROM Users WHERE username = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, username);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0; // Trả về true nếu username đã tồn tại
            }
            return false;
        }
    }

    // Đăng ký người dùng với kiểm tra username
    public void registerUser(User user) throws SQLException {
        // Kiểm tra xem username đã tồn tại chưa
        if (isUsernameExists(user.getUsername())) {
            throw new SQLException("Username already exists");
        }

        String hashedPassword = BCrypt.hashpw(user.getPassword(), BCrypt.gensalt());
        String sql = "INSERT INTO Users (username, password, email) VALUES (?, ?, ?)";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, user.getUsername());
            stmt.setString(2, hashedPassword);
            stmt.setString(3, user.getEmail());
            stmt.executeUpdate();
        }
    }

    // Đăng nhập người dùng
    public User loginUser(String username, String password) throws SQLException {
        String sql = "SELECT * FROM Users WHERE username = ? AND is_active = 1";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, username);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                String hashedPassword = rs.getString("password");
                if (BCrypt.checkpw(password, hashedPassword)) {
                    User user = new User();
                    user.setUserId(rs.getInt("user_id"));
                    user.setUsername(rs.getString("username"));
                    user.setEmail(rs.getString("email"));
                    user.setRole(rs.getString("role"));
                    user.setActive(rs.getBoolean("is_active"));
                    return user;
                }
            }
            return null; // Login failed
        }
    }
    public void updateUser(User user) throws SQLException {
        String query = "UPDATE Users SET username = ?, email = ?, avatar = ? WHERE user_id = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, user.getUsername());
            stmt.setString(2, user.getEmail());
            stmt.setString(3, user.getAvatar());
            stmt.setInt(4, user.getUserId());
            stmt.executeUpdate();
        }
    }
}
USE master;
GO

-- Xóa cơ sở dữ liệu nếu có và tạo lại
DROP DATABASE IF EXISTS OceanHotel;
CREATE DATABASE OceanHotel;
USE OceanHotel;
GO
--finally
CREATE TABLE Users 
(
    user_id INT IDENTITY(1,1) PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL, -- Lưu password đã được hash
    email VARCHAR(100) UNIQUE NOT NULL,
    role VARCHAR(10) CHECK (role IN ('admin', 'user')) DEFAULT 'user',
    avatar VARCHAR(255), -- Đường dẫn đến ảnh đại diện (có thể NULL)
    is_active BIT DEFAULT 1, -- Tài khoản có hoạt động hay không
    created_at DATETIME DEFAULT GETDATE()
);


CREATE TABLE Rooms 
(
    room_id INT IDENTITY(1,1) PRIMARY KEY,
    room_number VARCHAR(10) UNIQUE NOT NULL, -- Ví dụ: 101, 102, 201, 202,...
    price_per_night DECIMAL(10, 2) NOT NULL, -- Giá phòng theo đêm
    is_available BIT DEFAULT 1, -- Phòng còn trống hay không
    description TEXT, -- Mô tả thêm về phòng (có thể NULL)
    created_at DATETIME DEFAULT GETDATE(),
    image_url VARCHAR(255), -- Đường dẫn đến hình ảnh phòng
    max_adults INT NOT NULL DEFAULT 2, -- Số người lớn tối đa, mặc định 2
    max_children INT NOT NULL DEFAULT 0, -- Số trẻ em tối đa, mặc định 0
    type_id INT NULL, -- Tham chiếu đến Room_Types
    FOREIGN KEY (type_id) REFERENCES Room_Types(type_id)
);


CREATE TABLE Bookings
(
    booking_id INT IDENTITY(1,1) PRIMARY KEY,  -- Auto-increment primary key
    user_id INT NOT NULL,
    room_id INT NOT NULL,
    check_in_date DATE NOT NULL, -- Ngày nhận phòng
    check_out_date DATE NOT NULL, -- Ngày trả phòng
    total_price DECIMAL(10, 2) NOT NULL, -- Tổng giá
    status VARCHAR(20) CHECK (status IN ('Pending', 'Confirmed', 'Cancelled')) DEFAULT 'Pending',
    num_adults INT NOT NULL DEFAULT 1,  -- Số người lớn, mặc định 1
    num_children INT NOT NULL DEFAULT 0,  -- Số trẻ em, mặc định 0
    created_at DATETIME DEFAULT GETDATE(), -- Thời gian tạo
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (room_id) REFERENCES Rooms(room_id)
);


CREATE TABLE Room_Types 
(
    type_id INT IDENTITY(1,1) PRIMARY KEY,
    type_name NVARCHAR(50) NOT NULL UNIQUE, 
    default_price DECIMAL(10, 2) NOT NULL, 
    max_adults INT NOT NULL, 
    max_children INT NOT NULL, 
    description NVARCHAR(500), 
    created_at DATETIME DEFAULT GETDATE()
);


CREATE TABLE Room_Type_Images 
(
    image_id INT IDENTITY(1,1) PRIMARY KEY,
    type_id INT NOT NULL,
    image_url NVARCHAR(255) NOT NULL,
    is_primary BIT NOT NULL DEFAULT 0, 
    created_at DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (type_id) REFERENCES Room_Types(type_id) ON DELETE CASCADE
);


CREATE TABLE Booking_History 
(
    history_id INT IDENTITY(1,1) PRIMARY KEY,
    booking_id INT NOT NULL,
    changed_by INT NOT NULL,
    old_status VARCHAR(20) CHECK (old_status IN ('Pending', 'Confirmed', 'Cancelled')),
    new_status VARCHAR(20) CHECK (new_status IN ('Pending', 'Confirmed', 'Cancelled')),
    changed_at DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (booking_id) REFERENCES Bookings(booking_id),
    FOREIGN KEY (changed_by) REFERENCES Users(user_id)
);


CREATE TABLE Room_Edit_History 
(
    history_id INT IDENTITY(1,1) PRIMARY KEY,
    room_id INT NOT NULL, 
    changed_by INT NOT NULL, 
    change_description TEXT NOT NULL, 
    changed_at DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (room_id) REFERENCES Rooms(room_id),
    FOREIGN KEY (changed_by) REFERENCES Users(user_id)
);


CREATE TABLE Login_History 
(
    login_id INT IDENTITY(1,1) PRIMARY KEY,
    user_id INT NOT NULL,
    login_time DATETIME DEFAULT GETDATE(),
    ip_address VARCHAR(45),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);


CREATE TABLE Transactions 
(
    transaction_id INT IDENTITY(1,1) PRIMARY KEY,
    booking_id INT NOT NULL,
    user_id INT NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    status VARCHAR(20) CHECK (status IN ('Success', 'Failed', 'Pending')) DEFAULT 'Pending',
    created_at DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (booking_id) REFERENCES Bookings(booking_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);


CREATE TABLE Settings 
(
    setting_id INT IDENTITY(1,1) PRIMARY KEY,
    setting_key VARCHAR(50) NOT NULL UNIQUE,
    setting_value VARCHAR(255) NOT NULL,
    updated_at DATETIME DEFAULT GETDATE()
);


CREATE TABLE Reviews
(
    review_id INT IDENTITY(1,1) PRIMARY KEY,
    booking_id INT NOT NULL,
    user_id INT NOT NULL,
    room_id INT NOT NULL,
    rating INT NOT NULL CHECK (rating >= 1 AND rating <= 5),
    comment TEXT,
    created_at DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (booking_id) REFERENCES Bookings(booking_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (room_id) REFERENCES Rooms(room_id)
);


ALTER TABLE Rooms
DROP COLUMN room_type; 

ALTER TABLE Rooms
ADD type_id INT NULL;  -- Cột tham chiếu tới Room_Types

ALTER TABLE Rooms
ADD CONSTRAINT FK_Rooms_RoomTypes FOREIGN KEY (type_id) REFERENCES Room_Types(type_id);


-- Thêm dữ liệu mẫu cho Room_Types
INSERT INTO Room_Types (type_name, default_price, max_adults, max_children, description)
VALUES 
('Single', 150000, 1, 0, 'Phòng đơn nhỏ gọn, phù hợp cho 1 người.'),
('Double', 225000, 2, 1, 'Phòng đôi thoải mái cho 2 người lớn và 1 trẻ em.'),
('Deluxe', 450000, 3, 2, 'Phòng cao cấp với không gian rộng rãi.'),
('Suite', 750000, 4, 2, 'Phòng sang trọng với tiện nghi cao cấp.');

Web Pages:

WEB-INF/views/admin/add_room.jsp

<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ page import="java.util.List" %>
<%@ page import="com.mycompany.oceanichotel.models.RoomType" %>
<%
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en";
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light";
        session.setAttribute("theme", theme);
    }
    String error = (String) request.getAttribute("error");
    List<RoomType> roomTypes = (List<RoomType>) request.getAttribute("roomTypes");
%>
<!DOCTYPE html>
<html lang="<%= language%>">
    <head>
        <meta charset="UTF-8">
        <title><%= language.equals("vi") ? "Thêm phòng - Khách sạn Oceanic" : "Add Room - Oceanic Hotel"%></title>
        <link rel="icon" href="<%= request.getContextPath()%>/assets/images/logo.png" type="image/x-icon">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/main.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/form.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/modal.css">
    </head>
    <body class="<%= theme.equals("dark") ? "dark-mode" : ""%>" data-theme="<%= theme%>">
        <div class="admin-container">
            <nav class="sidebar">
                <div class="sidebar-header">
                    <a style="color: white; margin-bottom: 20px; font-size: 24px; font-weight: 600; letter-spacing: 0.5px;" href="<%= request.getContextPath()%>/admin/dashboard">Oceanic Hotel</a>
                </div>
                <ul>
                    <li><a href="<%= request.getContextPath()%>/admin/dashboard"><%= language.equals("vi") ? "Tổng quan" : "Dashboard"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/users"><%= language.equals("vi") ? "Quản lý người dùng" : "User Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/room-types"><%= language.equals("vi") ? "Quản lý loại phòng" : "Room Type Management"%></a></li>
                    <li class="active"><a href="<%= request.getContextPath()%>/admin/rooms"><%= language.equals("vi") ? "Quản lý phòng" : "Room Management"%></a></li>

                    <li><a href="<%= request.getContextPath()%>/admin/bookings"><%= language.equals("vi") ? "Quản lý đặt phòng" : "Booking Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/transactions"><%= language.equals("vi") ? "Quản lý giao dịch" : "Transaction Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/settings"><%= language.equals("vi") ? "Cấu hình hệ thống" : "System Settings"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/reports"><%= language.equals("vi") ? "Báo cáo" : "Reports"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/logout"><%= language.equals("vi") ? "Đăng xuất" : "Logout"%></a></li>
                </ul>
            </nav>
            <div class="main-content">
                <form action="<%= request.getContextPath()%>/admin/rooms/add" method="POST">
                    <div class="form-group">
                        <label for="roomNumber"><%= language.equals("vi") ? "Số phòng" : "Room Number"%></label>
                        <input type="text" id="roomNumber" name="roomNumber" required>
                    </div>
                    <div class="form-group">
                        <label for="typeId"><%= language.equals("vi") ? "Loại phòng" : "Room Type"%></label>
                        <select id="typeId" name="typeId" required onchange="updatePrice()">
                            <% for (RoomType roomType : roomTypes) {%>
                            <option value="<%= roomType.getTypeId()%>"><%= roomType.getTypeName()%></option>
                            <% }%>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="pricePerNight"><%= language.equals("vi") ? "Giá mỗi đêm" : "Price per Night"%></label>
                        <input type="number" id="pricePerNight" name="pricePerNight" step="0.01" required value="150000">
                    </div>
                    <div class="form-group">
                        <label for="maxAdults"><%= language.equals("vi") ? "Số người lớn tối đa" : "Max Adults"%></label>
                        <input type="number" id="maxAdults" name="maxAdults" min="1" value="1" required>
                    </div>
                    <div class="form-group">
                        <label for="maxChildren"><%= language.equals("vi") ? "Số trẻ em tối đa" : "Max Children"%></label>
                        <input type="number" id="maxChildren" name="maxChildren" min="0" value="0" required>
                    </div>
                    <div class="form-group">
                        <label for="isAvailable"><%= language.equals("vi") ? "Trạng thái" : "Available"%></label>
                        <input type="checkbox" id="isAvailable" name="isAvailable" value="true" checked>
                    </div>
                    <div class="form-group">
                        <label for="description"><%= language.equals("vi") ? "Mô tả" : "Description"%></label>
                        <textarea id="description" name="description"></textarea>
                    </div>
                    <div class="form-buttons">
                        <button type="submit" class="action-btn add-btn"><%= language.equals("vi") ? "Thêm" : "Add"%></button>
                        <a href="<%= request.getContextPath()%>/admin/rooms" class="action-btn cancel-btn"><%= language.equals("vi") ? "Hủy" : "Cancel"%></a>
                    </div>
                </form>
                <% if (error != null) {%>
                <div class="custom-modal" id="errorModal" style="display: flex;">
                    <div class="modal-content animate-modal">
                        <h3><%= language.equals("vi") ? "Lỗi" : "Error"%></h3>
                        <p><%= error%></p>
                        <div class="modal-buttons">
                            <button class="modal-btn cancel-btn" onclick="document.getElementById('errorModal').style.display = 'none'">
                                <%= language.equals("vi") ? "Đóng" : "Close"%>
                            </button>
                        </div>
                    </div>
                </div>
                <% }%>
            </div>
        </div>
        <script>
            function updatePrice() {
                const typeId = document.getElementById('typeId').value;
                const priceInput = document.getElementById('pricePerNight');
                const maxAdultsInput = document.getElementById('maxAdults');
                const maxChildrenInput = document.getElementById('maxChildren');

                const roomTypes = {
            <% for (RoomType roomType : roomTypes) {%>
                    '<%= roomType.getTypeId()%>': {
                        price: <%= roomType.getDefaultPrice()%>,
                                maxAdults: <%= roomType.getMaxAdults()%>,
                        maxChildren: <%= roomType.getMaxChildren()%>
                    },
            <% }%>
                };

                const selectedType = roomTypes[typeId];
                if (selectedType) {
                    priceInput.value = selectedType.price;
                    maxAdultsInput.value = selectedType.maxAdults;
                    maxChildrenInput.value = selectedType.maxChildren;
                }
            }


            window.onload = function () {
                updatePrice();
            };
        </script>
    </body>
</html>


WEB-INF/views/admin/add_room_type.jsp
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en";
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light";
        session.setAttribute("theme", theme);
    }
    String error = (String) request.getAttribute("error");
%>
<!DOCTYPE html>
<html lang="<%= language%>">
    <head>
        <meta charset="UTF-8">
        <title><%= language.equals("vi") ? "Thêm loại phòng - Khách sạn Oceanic" : "Add Room Type - Oceanic Hotel"%></title>
        <link rel="icon" href="<%= request.getContextPath()%>/assets/images/logo.png" type="image/x-icon">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/main.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/form.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/modal.css">
    </head>
    <body class="<%= theme.equals("dark") ? "dark-mode" : ""%>" data-theme="<%= theme%>">
        <div class="admin-container">
            <nav class="sidebar">
                <div class="sidebar-header">
                    <a style="color: white; margin-bottom: 20px; font-size: 24px; font-weight: 600; letter-spacing: 0.5px;" href="<%= request.getContextPath()%>/admin/dashboard">Oceanic Hotel</a>
                </div>
                <ul>
                    <li><a href="<%= request.getContextPath()%>/admin/dashboard"><%= language.equals("vi") ? "Tổng quan" : "Dashboard"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/users"><%= language.equals("vi") ? "Quản lý người dùng" : "User Management"%></a></li>
                    <li class="active"><a href="<%= request.getContextPath()%>/admin/room-types" ><%= language.equals("vi") ? "Quản lý loại phòng" : "Room Type Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/rooms"><%= language.equals("vi") ? "Quản lý phòng" : "Room Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/bookings"><%= language.equals("vi") ? "Quản lý đặt phòng" : "Booking Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/transactions"><%= language.equals("vi") ? "Quản lý giao dịch" : "Transaction Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/settings"><%= language.equals("vi") ? "Cấu hình hệ thống" : "System Settings"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/reports"><%= language.equals("vi") ? "Báo cáo" : "Reports"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/logout"><%= language.equals("vi") ? "Đăng xuất" : "Logout"%></a></li>
                </ul>
            </nav>
            <div class="main-content">
                <form action="<%= request.getContextPath()%>/admin/room-types/add" method="POST" enctype="multipart/form-data">
                    <div class="form-group">
                        <label for="typeName"><%= language.equals("vi") ? "Tên loại phòng" : "Type Name"%></label>
                        <input type="text" id="typeName" name="typeName" required>
                    </div>
                    <div class="form-group">
                        <label for="defaultPrice"><%= language.equals("vi") ? "Giá mặc định mỗi đêm" : "Default Price per Night"%></label>
                        <input type="number" id="defaultPrice" name="defaultPrice" step="0.01" required>
                    </div>
                    <div class="form-group">
                        <label for="maxAdults"><%= language.equals("vi") ? "Số người lớn tối đa" : "Max Adults"%></label>
                        <input type="number" id="maxAdults" name="maxAdults" min="1" value="1" required>
                    </div>
                    <div class="form-group">
                        <label for="maxChildren"><%= language.equals("vi") ? "Số trẻ em tối đa" : "Max Children"%></label>
                        <input type="number" id="maxChildren" name="maxChildren" min="0" value="0" required>
                    </div>
                    <div class="form-group">
                        <label for="images"><%= language.equals("vi") ? "Hình ảnh" : "Images"%></label>
                        <input type="file" id="images" name="images" accept="image/*" multiple>
                    </div>
                    <div class="form-group">
                        <label for="description"><%= language.equals("vi") ? "Mô tả" : "Description"%></label>
                        <textarea id="description" name="description"></textarea>
                    </div>
                    <div class="form-buttons">
                        <button type="submit" class="action-btn add-btn"><%= language.equals("vi") ? "Thêm" : "Add"%></button>
                        <a href="<%= request.getContextPath()%>/admin/room-types" class="action-btn cancel-btn"><%= language.equals("vi") ? "Hủy" : "Cancel"%></a>
                    </div>
                </form>
                <% if (error != null) {%>
                <div class="custom-modal" id="errorModal" style="display: flex;">
                    <div class="modal-content animate-modal">
                        <h3><%= language.equals("vi") ? "Lỗi" : "Error"%></h3>
                        <p><%= error%></p>
                        <div class="modal-buttons">
                            <button class="modal-btn cancel-btn" onclick="document.getElementById('errorModal').style.display = 'none'">
                                <%= language.equals("vi") ? "Đóng" : "Close"%>
                            </button>
                        </div>
                    </div>
                </div>
                <% }%>
            </div>
        </div>
    </body>
</html>



WEB-INF/views/admin/add_user.jsp
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en";
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light";
        session.setAttribute("theme", theme);
    }
    String error = (String) request.getAttribute("error");
%>
<!DOCTYPE html>
<html lang="<%= language%>">
    <head>
        <meta charset="UTF-8">
        <title><%= language.equals("vi") ? "Thêm người dùng - Khách sạn Oceanic" : "Add User - Oceanic Hotel"%></title>
        <link rel="icon" href="<%= request.getContextPath()%>/assets/images/logo.png" type="image/x-icon">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/main.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/form.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/modal.css">
    </head>
    <body class="<%= theme.equals("dark") ? "dark-mode" : ""%>" data-theme="<%= theme%>">
        <div class="admin-container">
            <nav class="sidebar">
                <div class="sidebar-header">
                    <a style="color: white; margin-bottom: 20px; font-size: 24px; font-weight: 600; letter-spacing: 0.5px;" href="<%= request.getContextPath()%>/admin/dashboard">Oceanic Hotel
                    </a>
                </div>
                <ul>
                    <li><a href="<%= request.getContextPath()%>/admin/dashboard"><%= language.equals("vi") ? "Tổng quan" : "Dashboard"%></a></li>
                    <li class="active"><a href="<%= request.getContextPath()%>/admin/users"><%= language.equals("vi") ? "Quản lý người dùng" : "User Management"%></a></li>
                    <li ><a href="<%= request.getContextPath()%>/admin/room-types"><%= language.equals("vi") ? "Quản lý loại phòng" : "Room Type Management"%></a></li>

                    <li><a href="<%= request.getContextPath()%>/admin/rooms"><%= language.equals("vi") ? "Quản lý phòng" : "Room Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/bookings"><%= language.equals("vi") ? "Quản lý đặt phòng" : "Booking Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/transactions"><%= language.equals("vi") ? "Quản lý giao dịch" : "Transaction Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/settings"><%= language.equals("vi") ? "Cấu hình hệ thống" : "System Settings"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/reports"><%= language.equals("vi") ? "Báo cáo" : "Reports"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/logout"><%= language.equals("vi") ? "Đăng xuất" : "Logout"%></a></li>
                </ul>
            </nav>
            <div class="main-content">

                <form action="<%= request.getContextPath()%>/admin/users/add" method="POST">
                    <div class="form-group">
                        <label for="username"><%= language.equals("vi") ? "Tên người dùng" : "Username"%></label>
                        <input type="text" id="username" name="username" required>
                    </div>
                    <div class="form-group">
                        <label for="email"><%= language.equals("vi") ? "Email" : "Email"%></label>
                        <input type="email" id="email" name="email" required>
                    </div>
                    <div class="form-group">
                        <label for="password"><%= language.equals("vi") ? "Mật khẩu" : "Password"%></label>
                        <input type="password" id="password" name="password" required>
                    </div>
                    <div class="form-group">
                        <label for="role"><%= language.equals("vi") ? "Vai trò" : "Role"%></label>
                        <select id="role" name="role" required>
                            <option value="ADMIN"><%= language.equals("vi") ? "Quản trị viên" : "Admin"%></option>
                            <option value="USER"><%= language.equals("vi") ? "Người dùng" : "User"%></option>
                        </select>
                    </div>
                    <div class="form-buttons">
                        <button type="submit" class="action-btn add-btn"><%= language.equals("vi") ? "Thêm" : "Add"%></button>
                        <a href="<%= request.getContextPath()%>/admin/users" class="action-btn cancel-btn"><%= language.equals("vi") ? "Hủy" : "Cancel"%></a>
                    </div>
                </form>
                <% if (error != null) {%>
                <div class="custom-modal" id="errorModal" style="display: flex;">
                    <div class="modal-content animate-modal">
                        <h3><%= language.equals("vi") ? "Lỗi" : "Error"%></h3>
                        <p><%= error%></p>
                        <div class="modal-buttons">
                            <button class="modal-btn cancel-btn" onclick="document.getElementById('errorModal').style.display = 'none'">
                                <%= language.equals("vi") ? "Đóng" : "Close"%>
                            </button>
                        </div>
                    </div>
                </div>
                <% }%>
            </div>
        </div>
        <script>
            function changeLanguage() {
                const language = document.getElementById('languageSelect').value;
                fetch('<%= request.getContextPath()%>/language', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: 'language=' + encodeURIComponent(language)
                }).then(() => location.reload());
            }

            function changeTheme() {
                const theme = document.getElementById('themeSelect').value;
                fetch('<%= request.getContextPath()%>/theme', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: 'theme=' + encodeURIComponent(theme)
                }).then(() => {
                    document.body.className = theme === 'dark' ? 'dark-mode' : '';
                    document.body.setAttribute('data-theme', theme);
                });
            }
        </script>
    </body>
</html>



WEB-INF/views/admin/bookings.jsp
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ page import="java.util.List" %>
<%@ page import="com.mycompany.oceanichotel.models.Booking" %>
<%
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en";
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light";
        session.setAttribute("theme", theme);
    }
    int currentPage = request.getAttribute("currentPage") != null ? (Integer) request.getAttribute("currentPage") : 1;
    int totalPages = request.getAttribute("totalPages") != null ? (Integer) request.getAttribute("totalPages") : 1;
%>
<!DOCTYPE html>
<html lang="<%= language%>">
    <head>
        <meta charset="UTF-8">
        <title><%= language.equals("vi") ? "Quản lý đặt phòng - Khách sạn Oceanic" : "Booking Management - Oceanic Hotel"%></title>
        <link rel="icon" href="<%= request.getContextPath()%>/assets/images/logo.png" type="image/x-icon">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/main.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/sidebar.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/table.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/modal.css">
        <style>
            .dropdown {
                position: relative;
                display: inline-block;
            }
            .dropdown-btn {
                background: none;
                border: none;
                font-size: 20px;
                cursor: pointer;
                padding: 0 10px;
                color: #333;
            }
            .dropdown-content {
                display: none;
                position: absolute;
                right: 0;
                background-color: #fff;
                min-width: 160px;
                box-shadow: 0 8px 16px rgba(0,0,0,0.2);
                z-index: 1;
                border-radius: 5px;
                border: 1px solid #ddd;
            }
            .dropdown-content a {
                color: #333;
                padding: 8px 16px;
                text-decoration: none;
                display: block;
                border-bottom: 1px solid #ddd;
            }
            .dropdown-content a:last-child {
                border-bottom: none;
            }
            .dropdown-content a:hover {
                background-color: #007bff;
                color: #fff;
            }
            .dark-mode .dropdown-btn {
                color: #fff;
            }
            .dark-mode .dropdown-content {
                background-color: #555;
                border-color: #666;
            }
            .dark-mode .dropdown-content a {
                color: #fff;
            }
            .dark-mode .dropdown-content a:hover {
                background-color: #0056b3;
            }
            .status.pending {
                background-color: #ffc107;
                color: #fff;
            }
            .status.confirmed {
                background-color: #28a745;
                color: #fff;
            }
            .status.cancelled {
                background-color: #dc3545;
                color: #fff;
            }
        </style>
    </head>
    <body class="<%= theme.equals("dark") ? "dark-mode" : ""%>" data-theme="<%= theme%>">
        <div class="admin-container">
            <nav class="sidebar">
                <div class="sidebar-header">
                    <a style="color: white; margin-bottom: 20px; font-size: 24px; font-weight: 600; letter-spacing: 0.5px;" href="<%= request.getContextPath()%>/admin/dashboard">Oceanic Hotel
                    </a>
                </div>
                <ul>
                    <li><a href="<%= request.getContextPath()%>/admin/dashboard"><%= language.equals("vi") ? "Tổng quan" : "Dashboard"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/users"><%= language.equals("vi") ? "Quản lý người dùng" : "User Management"%></a></li>
                    <li class="active"><a href="<%= request.getContextPath()%>/admin/room-types"><%= language.equals("vi") ? "Quản lý loại phòng" : "Room Type Management"%></a></li>

                    <li><a href="<%= request.getContextPath()%>/admin/rooms"><%= language.equals("vi") ? "Quản lý phòng" : "Room Management"%></a></li>
                    <li class="active"><a href="<%= request.getContextPath()%>/admin/bookings"><%= language.equals("vi") ? "Quản lý đặt phòng" : "Booking Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/transactions"><%= language.equals("vi") ? "Quản lý giao dịch" : "Transaction Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/settings"><%= language.equals("vi") ? "Cấu hình hệ thống" : "System Settings"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/reports"><%= language.equals("vi") ? "Báo cáo" : "Reports"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/logout"><%= language.equals("vi") ? "Đăng xuất" : "Logout"%></a></li>
                </ul>
            </nav>
            <div class="main-content">

                <div class="table-header">
                    <div class="search">
                        <form action="<%= request.getContextPath()%>/admin/bookings" method="GET">
                            <input type="text" name="search" placeholder="<%= language.equals("vi") ? "Tìm kiếm theo ID đặt phòng" : "Search by Booking ID"%>"
                                   value="<%= request.getParameter("search") != null ? request.getParameter("search") : ""%>">
                            <button type="submit" style="display: none;"></button>
                        </form>
                    </div>
                </div>
                <table class="data-table">
                    <thead>
                        <tr>
                            <th><%= language.equals("vi") ? "ID" : "ID"%></th>
                            <th><%= language.equals("vi") ? "Người dùng" : "User"%></th>
                            <th><%= language.equals("vi") ? "Phòng" : "Room"%></th>
                            <th><%= language.equals("vi") ? "Ngày nhận" : "Check-in"%></th>
                            <th><%= language.equals("vi") ? "Ngày trả" : "Check-out"%></th>
                            <th><%= language.equals("vi") ? "Tổng tiền" : "Total Price"%></th>
                            <th><%= language.equals("vi") ? "Trạng thái" : "Status"%></th>
                            <th>...</th>
                        </tr>
                    </thead>
                    <tbody>
                        <%
                            List<Booking> bookings = (List<Booking>) request.getAttribute("bookings");
                            if (bookings != null) {
                                for (Booking booking : bookings) {
                        %>
                        <tr>
                            <td><%= booking.getBookingId()%></td>
                            <td><%= booking.getUserId()%></td>
                            <td><%= booking.getRoomId()%></td>
                            <td><%= booking.getCheckInDate()%></td>
                            <td><%= booking.getCheckOutDate()%></td>
                            <td><%= booking.getTotalPrice()%></td>
                            <td><span class="status <%= booking.getStatus().toLowerCase()%>">
                                    <%= language.equals("vi")
                                            ? (booking.getStatus().equals("Pending") ? "Đang chờ"
                                            : booking.getStatus().equals("Confirmed") ? "Đã xác nhận" : "Đã hủy")
                                    : booking.getStatus()%>
                                </span></td>
                            <td>
                                <div class="dropdown">
                                    <button class="dropdown-btn">⋮</button>
                                    <div class="dropdown-content">
                                        <a href="javascript:void(0)" onclick="updateStatus('<%= booking.getBookingId()%>', 'Confirmed')">
                                            <%= language.equals("vi") ? "Xác nhận" : "Confirm"%>
                                        </a>
                                        <a href="javascript:void(0)" onclick="updateStatus('<%= booking.getBookingId()%>', 'Cancelled')">
                                            <%= language.equals("vi") ? "Hủy" : "Cancel"%>
                                        </a>
                                        <a href="<%= request.getContextPath()%>/admin/bookings/history?bookingId=<%= booking.getBookingId()%>">
                                            <%= language.equals("vi") ? "Xem lịch sử" : "View History"%>
                                        </a>
                                    </div>
                                </div>
                            </td>
                        </tr>
                        <%
                                }
                            }
                        %>
                    </tbody>
                </table>
                <% if (totalPages > 1) { %>
                <div class="pagination">
                    <% if (currentPage > 1) {%>
                    <a href="<%= request.getContextPath()%>/admin/bookings?page=<%= currentPage - 1%><%= request.getParameter("search") != null ? "&search=" + request.getParameter("search") : ""%>">
                        <button class="page-btn">Previous</button>
                    </a>
                    <% } %>
                    <% for (int i = 1; i <= totalPages; i++) {%>
                    <a href="<%= request.getContextPath()%>/admin/bookings?page=<%= i%><%= request.getParameter("search") != null ? "&search=" + request.getParameter("search") : ""%>">
                        <button class="page-btn <%= currentPage == i ? "active" : ""%>"><%= i%></button>
                    </a>
                    <% } %>
                    <% if (currentPage < totalPages) {%>
                    <a href="<%= request.getContextPath()%>/admin/bookings?page=<%= currentPage + 1%><%= request.getParameter("search") != null ? "&search=" + request.getParameter("search") : ""%>">
                        <button class="page-btn">Next</button>
                    </a>
                    <% } %>
                </div>
                <% }%>
            </div>
        </div>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                document.querySelectorAll('.dropdown-btn').forEach(btn => {
                    btn.addEventListener('click', function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        const dropdownContent = this.nextElementSibling;
                        const isVisible = dropdownContent.style.display === 'block';
                        document.querySelectorAll('.dropdown-content').forEach(content => content.style.display = 'none');
                        dropdownContent.style.display = isVisible ? 'none' : 'block';
                    });
                });
                document.addEventListener('click', function (e) {
                    if (!e.target.closest('.dropdown')) {
                        document.querySelectorAll('.dropdown-content').forEach(content => content.style.display = 'none');
                    }
                });
            });

            function updateStatus(bookingId, status) {
                const lang = '<%= language%>';
                const message = lang === 'vi' ? (status === 'Confirmed' ? 'Bạn có chắc chắn muốn xác nhận đặt phòng này không?' : 'Bạn có chắc chắn muốn hủy đặt phòng này không?')
                        : `Are you sure you want to ${status.toLowerCase()} this booking?`;
                if (confirm(message)) {
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '<%= request.getContextPath()%>/admin/bookings/update';
                    form.innerHTML = `<input type="hidden" name="bookingId" value="${bookingId}">
                              <input type="hidden" name="status" value="${status}">`;
                    document.body.appendChild(form);
                    form.submit();
                }
            }

            function changeLanguage() {
                fetch('<%= request.getContextPath()%>/language', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: 'language=' + encodeURIComponent(document.getElementById('languageSelect').value)
                }).then(() => location.reload());
            }

            function changeTheme() {
                const theme = document.getElementById('themeSelect').value;
                fetch('<%= request.getContextPath()%>/theme', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: 'theme=' + encodeURIComponent(theme)
                }).then(() => {
                    document.body.className = theme === 'dark' ? 'dark-mode' : '';
                    document.body.setAttribute('data-theme', theme);
                });
            }
        </script>
    </body>
</html>


WEB-INF/views/admin/dashboard.jsp
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<% 
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en";
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light";
        session.setAttribute("theme", theme);
    }
    int checkInToday = (Integer) request.getAttribute("checkInToday") != null ? (Integer) request.getAttribute("checkInToday") : 0;
    int checkOutToday = (Integer) request.getAttribute("checkOutToday") != null ? (Integer) request.getAttribute("checkOutToday") : 0;
    int totalInHotel = (Integer) request.getAttribute("totalInHotel") != null ? (Integer) request.getAttribute("totalInHotel") : 0;
    int availableRooms = (Integer) request.getAttribute("availableRooms") != null ? (Integer) request.getAttribute("availableRooms") : 0;
    int occupiedRooms = (Integer) request.getAttribute("occupiedRooms") != null ? (Integer) request.getAttribute("occupiedRooms") : 0;
%>
<!DOCTYPE html>
<html lang="<%= language %>">
<head>
    <meta charset="UTF-8">
    <title><%= language.equals("vi") ? "Bảng điều khiển Quản trị - Khách sạn Oceanic" : "Admin Dashboard - Oceanic Hotel" %></title>
    <link rel="icon" href="<%= request.getContextPath() %>/assets/images/logo.png" type="image/x-icon">
    <link rel="stylesheet" href="<%= request.getContextPath() %>/assets/css/main.css">
    <link rel="stylesheet" href="<%= request.getContextPath() %>/assets/css/dashboard.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body class="<%= theme.equals("dark") ? "dark-mode" : "" %>" data-theme="<%= theme %>">
    <div class="admin-container">
        <nav class="sidebar">
                <div class="sidebar-header">
                    <a style="color: white; margin-bottom: 20px; font-size: 24px; font-weight: 600; letter-spacing: 0.5px;" href="<%= request.getContextPath()%>/admin/dashboard">Oceanic Hotel
                    </a>
                </div>
            <ul>
                <li class="active"><a href="<%= request.getContextPath() %>/admin/dashboard"><%= language.equals("vi") ? "Tổng quan" : "Dashboard" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/users"><%= language.equals("vi") ? "Quản lý người dùng" : "User Management" %></a></li>
                 <li><a href="<%= request.getContextPath() %>/admin/room-types" class="active"><%= language.equals("vi") ? "Quản lý loại phòng" : "Room Type Management" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/rooms"><%= language.equals("vi") ? "Quản lý phòng" : "Room Management" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/bookings"><%= language.equals("vi") ? "Quản lý đặt phòng" : "Booking Management" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/transactions"><%= language.equals("vi") ? "Quản lý giao dịch" : "Transaction Management" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/settings"><%= language.equals("vi") ? "Cấu hình hệ thống" : "System Settings" %></a></li>
                <li><a href="<%= request.getContextPath() %>/admin/reports"><%= language.equals("vi") ? "Báo cáo" : "Reports" %></a></li>
                <li><a href="<%= request.getContextPath() %>/logout"><%= language.equals("vi") ? "Đăng xuất" : "Logout" %></a></li>
            </ul>
        </nav>
        <div class="main-content">

            <div class="overview">
                <div class="card">
                    <h4><%= language.equals("vi") ? "Check-in hôm nay" : "Today's Check-in" %></h4>
                    <p><%= checkInToday %></p>
                </div>
                <div class="card">
                    <h4><%= language.equals("vi") ? "Check-out hôm nay" : "Today's Check-out" %></h4>
                    <p><%= checkOutToday %></p>
                </div>
                <div class="card">
                    <h4><%= language.equals("vi") ? "Tổng số khách trong khách sạn" : "Total In Hotel" %></h4>
                    <p><%= totalInHotel %></p>
                </div>
                <div class="card">
                    <h4><%= language.equals("vi") ? "Phòng trống" : "Available Rooms" %></h4>
                    <p><%= availableRooms %></p>
                </div>
                <div class="card">
                    <h4><%= language.equals("vi") ? "Phòng đã đặt" : "Occupied Rooms" %></h4>
                    <p><%= occupiedRooms %></p>
                </div>
            </div>
            <div class="chart-container" style="margin-top: 20px; width: 500px">
                <canvas id="roomStatusChart" width="400" height="200"></canvas>
            </div>
                
        </div>
    </div>
    <script>
        const ctx = document.getElementById('roomStatusChart').getContext('2d');
        const roomStatusChart = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: ['<%= language.equals("vi") ? "Phòng trống" : "Available Rooms" %>', '<%= language.equals("vi") ? "Phòng đã đặt" : "Occupied Rooms" %>'],
                datasets: [{
                    data: [<%= availableRooms %>, <%= occupiedRooms %>],
                    backgroundColor: ['#28a745', '#dc3545'],
                    borderColor: ['#fff', '#fff'],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: 'top' },
                    title: { display: true, text: '<%= language.equals("vi") ? "Trạng thái phòng" : "Room Status" %>' }
                }
            }
        });

        function changeLanguage() {
            const language = document.getElementById('languageSelect').value;
            fetch('<%= request.getContextPath() %>/language', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: 'language=' + encodeURIComponent(language)
            }).then(() => location.reload());
        }

        function changeTheme() {
            const theme = document.getElementById('themeSelect').value;
            fetch('<%= request.getContextPath() %>/theme', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: 'theme=' + encodeURIComponent(theme)
            }).then(() => {
                document.body.className = theme === 'dark' ? 'dark-mode' : '';
                document.body.setAttribute('data-theme', theme);
            });
        }
    </script>
</body>
</html>

WEB-INF/views/admin/edit_room.jsp
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ page import="com.mycompany.oceanichotel.models.Room" %>
<%@ page import="com.mycompany.oceanichotel.models.RoomType" %>
<%@ page import="java.util.List" %>
<%
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en";
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light";
        session.setAttribute("theme", theme);
    }
    Room room = (Room) request.getAttribute("room");
    List<RoomType> roomTypes = (List<RoomType>) request.getAttribute("roomTypes");
    String error = (String) request.getAttribute("error");
%>
<!DOCTYPE html>
<html lang="<%= language%>">
<head>
    <meta charset="UTF-8">
    <title><%= language.equals("vi") ? "Sửa phòng - Khách sạn Oceanic" : "Edit Room - Oceanic Hotel"%></title>
    <link rel="icon" href="<%= request.getContextPath()%>/assets/images/logo.png" type="image/x-icon">
    <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/main.css">
    <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/form.css">
    <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/modal.css">
</head>
<body class="<%= theme.equals("dark") ? "dark-mode" : ""%>" data-theme="<%= theme%>">
<div class="admin-container">
    <nav class="sidebar">
        <div class="sidebar-header">
            <a style="color: white; margin-bottom: 20px; font-size: 24px; font-weight: 600; letter-spacing: 0.5px;" href="<%= request.getContextPath()%>/admin/dashboard">Oceanic Hotel</a>
        </div>
        <ul>
            <li><a href="<%= request.getContextPath()%>/admin/dashboard"><%= language.equals("vi") ? "Tổng quan" : "Dashboard"%></a></li>
            <li><a href="<%= request.getContextPath()%>/admin/users"><%= language.equals("vi") ? "Quản lý người dùng" : "User Management"%></a></li>
            <li><a href="<%= request.getContextPath()%>/admin/room-types"><%= language.equals("vi") ? "Quản lý loại phòng" : "Room Type Management"%></a></li>
            <li class="active"><a href="<%= request.getContextPath()%>/admin/rooms"><%= language.equals("vi") ? "Quản lý phòng" : "Room Management"%></a></li>
            <li><a href="<%= request.getContextPath()%>/admin/bookings"><%= language.equals("vi") ? "Quản lý đặt phòng" : "Booking Management"%></a></li>
            <li><a href="<%= request.getContextPath()%>/admin/transactions"><%= language.equals("vi") ? "Quản lý giao dịch" : "Transaction Management"%></a></li>
            <li><a href="<%= request.getContextPath()%>/admin/settings"><%= language.equals("vi") ? "Cấu hình hệ thống" : "System Settings"%></a></li>
            <li><a href="<%= request.getContextPath()%>/admin/reports"><%= language.equals("vi") ? "Báo cáo" : "Reports"%></a></li>
            <li><a href="<%= request.getContextPath()%>/logout"><%= language.equals("vi") ? "Đăng xuất" : "Logout"%></a></li>
        </ul>
    </nav>
    <div class="main-content">
        <% if (room == null) { %>
            <p><%= language.equals("vi") ? "Không tìm thấy phòng để chỉnh sửa." : "No room found to edit." %></p>
            <a href="<%= request.getContextPath()%>/admin/rooms" class="action-btn cancel-btn"><%= language.equals("vi") ? "Quay lại" : "Back"%></a>
        <% } else { %>
            <form action="<%= request.getContextPath()%>/admin/rooms/update" method="POST">
                <input type="hidden" name="roomId" value="<%= room.getRoomId() %>">
                <div class="form-group">
                    <label for="roomNumber"><%= language.equals("vi") ? "Số phòng" : "Room Number"%></label>
                    <input type="text" id="roomNumber" name="roomNumber" value="<%= room.getRoomNumber() %>" required>
                </div>
                <div class="form-group">
                    <label for="typeId"><%= language.equals("vi") ? "Loại phòng" : "Room Type"%></label>
                    <select id="typeId" name="typeId" required onchange="updatePrice()">
                        <% for (RoomType roomType : roomTypes) { %>
                            <option value="<%= roomType.getTypeId() %>" <%= room.getRoomType() != null && room.getRoomType().getTypeId() == roomType.getTypeId() ? "selected" : "" %>>
                                <%= roomType.getTypeName() %>
                            </option>
                        <% } %>
                    </select>
                </div>
                <div class="form-group">
                    <label for="pricePerNight"><%= language.equals("vi") ? "Giá mỗi đêm" : "Price per Night"%></label>
                    <input type="number" id="pricePerNight" name="pricePerNight" step="0.01" value="<%= room.getPricePerNight() %>" required>
                </div>
                <div class="form-group">
                    <label for="maxAdults"><%= language.equals("vi") ? "Số người lớn tối đa" : "Max Adults"%></label>
                    <input type="number" id="maxAdults" name="maxAdults" min="1" value="<%= room.getMaxAdults() %>" required>
                </div>
                <div class="form-group">
                    <label for="maxChildren"><%= language.equals("vi") ? "Số trẻ em tối đa" : "Max Children"%></label>
                    <input type="number" id="maxChildren" name="maxChildren" min="0" value="<%= room.getMaxChildren() %>" required>
                </div>
                <div class="form-group">
                    <label for="isAvailable"><%= language.equals("vi") ? "Trạng thái" : "Available"%></label>
                    <input type="checkbox" id="isAvailable" name="isAvailable" value="true" <%= room.isAvailable() ? "checked" : "" %>>
                </div>
                <div class="form-group">
                    <label for="description"><%= language.equals("vi") ? "Mô tả" : "Description"%></label>
                    <textarea id="description" name="description"><%= room.getDescription() != null ? room.getDescription() : "" %></textarea>
                </div>
                <div class="form-buttons">
                    <button type="submit" class="action-btn add-btn"><%= language.equals("vi") ? "Cập nhật" : "Update"%></button>
                    <a href="<%= request.getContextPath()%>/admin/rooms" class="action-btn cancel-btn"><%= language.equals("vi") ? "Hủy" : "Cancel"%></a>
                </div>
            </form>
        <% } %>
        <% if (error != null) { %>
            <div class="custom-modal" id="errorModal" style="display: flex;">
                <div class="modal-content animate-modal">
                    <h3><%= language.equals("vi") ? "Lỗi" : "Error"%></h3>
                    <p><%= error %></p>
                    <div class="modal-buttons">
                        <button class="modal-btn cancel-btn" onclick="document.getElementById('errorModal').style.display = 'none'">
                            <%= language.equals("vi") ? "Đóng" : "Close"%>
                        </button>
                    </div>
                </div>
            </div>
        <% } %>
    </div>
</div>
<script>
    function updatePrice() {
        const typeId = document.getElementById('typeId')?.value;
        const priceInput = document.getElementById('pricePerNight');
        const maxAdultsInput = document.getElementById('maxAdults');
        const maxChildrenInput = document.getElementById('maxChildren');

        const roomTypes = {
            <% for (RoomType roomType : roomTypes) { %>
                '<%= roomType.getTypeId() %>': { price: <%= roomType.getDefaultPrice() %>, maxAdults: <%= roomType.getMaxAdults() %>, maxChildren: <%= roomType.getMaxChildren() %> },
            <% } %>
        };

        const selectedType = roomTypes[typeId];
        if (selectedType) {
            priceInput.value = selectedType.price;
            maxAdultsInput.value = selectedType.maxAdults;
            maxChildrenInput.value = selectedType.maxChildren;
        }
    }

    window.onload = function () {
        if (document.getElementById('typeId')) {
            updatePrice();
        }
    };
</script>
</body>
</html>


WEB-INF/views/admin/edit_room_type.jsp
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ page import="com.mycompany.oceanichotel.models.RoomType" %>
<%@ page import="com.mycompany.oceanichotel.models.RoomTypeImage" %>
<%
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en";
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light";
        session.setAttribute("theme", theme);
    }
    RoomType roomType = (RoomType) request.getAttribute("roomType");
    String error = (String) request.getAttribute("error");
%>
<!DOCTYPE html>
<html lang="<%= language%>">
    <head>
        <meta charset="UTF-8">
        <title><%= language.equals("vi") ? "Sửa loại phòng - Khách sạn Oceanic" : "Edit Room Type - Oceanic Hotel"%></title>
        <link rel="icon" href="<%= request.getContextPath()%>/assets/images/logo.png" type="image/x-icon">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/main.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/form.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/modal.css">
        <style>
            .image-gallery img {
                width: 100px;
                height: 100px;
                margin: 5px;
            }
            .image-gallery .primary {
                border: 2px solid #28a745;
            }
        </style>
    </head>
    <body class="<%= theme.equals("dark") ? "dark-mode" : ""%>" data-theme="<%= theme%>">
        <div class="admin-container">
            <nav class="sidebar">
                <div class="sidebar-header">
                    <a style="color: white; margin-bottom: 20px; font-size: 24px; font-weight: 600; letter-spacing: 0.5px;" href="<%= request.getContextPath()%>/admin/dashboard">Oceanic Hotel</a>
                </div>
                <ul>
                    <li><a href="<%= request.getContextPath()%>/admin/dashboard"><%= language.equals("vi") ? "Tổng quan" : "Dashboard"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/users"><%= language.equals("vi") ? "Quản lý người dùng" : "User Management"%></a></li>
                    <li class="active"><a href="<%= request.getContextPath()%>/admin/room-types"><%= language.equals("vi") ? "Quản lý loại phòng" : "Room Type Management"%></a></li>

                    <li ><a href="<%= request.getContextPath()%>/admin/rooms"><%= language.equals("vi") ? "Quản lý phòng" : "Room Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/bookings"><%= language.equals("vi") ? "Quản lý đặt phòng" : "Booking Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/transactions"><%= language.equals("vi") ? "Quản lý giao dịch" : "Transaction Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/settings"><%= language.equals("vi") ? "Cấu hình hệ thống" : "System Settings"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/reports"><%= language.equals("vi") ? "Báo cáo" : "Reports"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/logout"><%= language.equals("vi") ? "Đăng xuất" : "Logout"%></a></li>
                </ul>
            </nav>
            <div class="main-content">
                <form action="<%= request.getContextPath()%>/admin/room-types/update" method="POST" enctype="multipart/form-data">
                    <input type="hidden" name="typeId" value="<%= roomType.getTypeId()%>">
                    <div class="form-group">
                        <label for="typeName"><%= language.equals("vi") ? "Tên loại phòng" : "Type Name"%></label>
                        <input type="text" id="typeName" name="typeName" value="<%= roomType.getTypeName()%>" required>
                    </div>
                    <div class="form-group">
                        <label for="defaultPrice"><%= language.equals("vi") ? "Giá mặc định mỗi đêm" : "Default Price per Night"%></label>
                        <input type="number" id="defaultPrice" name="defaultPrice" step="0.01" value="<%= roomType.getDefaultPrice()%>" required>
                    </div>
                    <div class="form-group">
                        <label><%= language.equals("vi") ? "Hình ảnh hiện tại" : "Current Images"%></label>
                        <div class="image-gallery">
                            <% for (RoomTypeImage image : roomType.getImages()) {%>
                            <div>
                                <img src="<%= request.getContextPath()%>/assets/images/room-types/<%= image.getImageUrl()%>" 
                                     alt="<%= roomType.getTypeName()%>" 
                                     class="<%= image.isPrimary() ? "primary" : ""%>">
                                <a href="<%= request.getContextPath()%>/admin/room-types/delete-image?typeId=<%= roomType.getTypeId()%>&imageId=<%= image.getImageId()%>">Xóa</a>
                                <% if (!image.isPrimary()) {%>
                                <a href="<%= request.getContextPath()%>/admin/room-types/set-primary?typeId=<%= roomType.getTypeId()%>&imageId=<%= image.getImageId()%>">Đặt làm chính</a>
                                <% } %>
                            </div>
                            <% }%>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="images"><%= language.equals("vi") ? "Thêm hình ảnh mới" : "Add New Images"%></label>
                        <input type="file" id="images" name="images" accept="image/*" multiple>
                    </div>
                    <div class="form-group">
                        <label for="maxAdults"><%= language.equals("vi") ? "Số người lớn tối đa" : "Max Adults"%></label>
                        <input type="number" id="maxAdults" name="maxAdults" min="1" value="<%= roomType.getMaxAdults()%>" required>
                    </div>
                    <div class="form-group">
                        <label for="maxChildren"><%= language.equals("vi") ? "Số trẻ em tối đa" : "Max Children"%></label>
                        <input type="number" id="maxChildren" name="maxChildren" min="0" value="<%= roomType.getMaxChildren()%>" required>
                    </div>
                    <div class="form-group">
                        <label for="description"><%= language.equals("vi") ? "Mô tả" : "Description"%></label>
                        <textarea id="description" name="description"><%= roomType.getDescription() != null ? roomType.getDescription() : ""%></textarea>
                    </div>
                    <div class="form-buttons">
                        <button type="submit" class="action-btn add-btn"><%= language.equals("vi") ? "Lưu" : "Save"%></button>
                        <a href="<%= request.getContextPath()%>/admin/room-types" class="action-btn cancel-btn"><%= language.equals("vi") ? "Hủy" : "Cancel"%></a>
                    </div>
                </form>
                <% if (error != null) {%>
                <div class="custom-modal" id="errorModal" style="display: flex;">
                    <div class="modal-content animate-modal">
                        <h3><%= language.equals("vi") ? "Lỗi" : "Error"%></h3>
                        <p><%= error%></p>
                        <div class="modal-buttons">
                            <button class="modal-btn cancel-btn" onclick="document.getElementById('errorModal').style.display = 'none'">
                                <%= language.equals("vi") ? "Đóng" : "Close"%>
                            </button>
                        </div>
                    </div>
                </div>
                <% }%>
            </div>
        </div>
    </body>
</html>

WEB-INF/views/admin/edit_user.jsp
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ page import="com.mycompany.oceanichotel.models.User" %>
<%
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en";
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light";
        session.setAttribute("theme", theme);
    }
    User user = (User) request.getAttribute("user");
    String error = (String) request.getAttribute("error");
%>
<!DOCTYPE html>
<html lang="<%= language%>">
    <head>
        <meta charset="UTF-8">
        <title><%= language.equals("vi") ? "Sửa người dùng - Khách sạn Oceanic" : "Edit User - Oceanic Hotel"%></title>
        <link rel="icon" href="<%= request.getContextPath()%>/assets/images/logo.png" type="image/x-icon">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/main.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/form.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/modal.css">
    </head>
    <body class="<%= theme.equals("dark") ? "dark-mode" : ""%>" data-theme="<%= theme%>">
        <div class="admin-container">
            <nav class="sidebar">
                <div class="sidebar-header">
                    <a style="color: white; margin-bottom: 20px; font-size: 24px; font-weight: 600; letter-spacing: 0.5px;" href="<%= request.getContextPath()%>/admin/dashboard">Oceanic Hotel
                    </a>
                </div>
                <ul>
                    <li><a href="<%= request.getContextPath()%>/admin/dashboard"><%= language.equals("vi") ? "Tổng quan" : "Dashboard"%></a></li>
                    <li class="active"><a href="<%= request.getContextPath()%>/admin/users"><%= language.equals("vi") ? "Quản lý người dùng" : "User Management"%></a></li>
                    <li ><a href="<%= request.getContextPath()%>/admin/room-types"><%= language.equals("vi") ? "Quản lý loại phòng" : "Room Type Management"%></a></li>

                    <li><a href="<%= request.getContextPath()%>/admin/rooms"><%= language.equals("vi") ? "Quản lý phòng" : "Room Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/bookings"><%= language.equals("vi") ? "Quản lý đặt phòng" : "Booking Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/transactions"><%= language.equals("vi") ? "Quản lý giao dịch" : "Transaction Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/settings"><%= language.equals("vi") ? "Cấu hình hệ thống" : "System Settings"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/reports"><%= language.equals("vi") ? "Báo cáo" : "Reports"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/logout"><%= language.equals("vi") ? "Đăng xuất" : "Logout"%></a></li>
                </ul>
            </nav>
            <div class="main-content">

                <form action="<%= request.getContextPath()%>/admin/users/update" method="POST">
                    <input type="hidden" name="userId" value="<%= user.getUserId()%>">
                    <div class="form-group">
                        <label for="username"><%= language.equals("vi") ? "Tên người dùng" : "Username"%></label>
                        <input type="text" id="username" name="username" value="<%= user.getUsername()%>" required>
                    </div>
                    <div class="form-group">
                        <label for="email"><%= language.equals("vi") ? "Email" : "Email"%></label>
                        <input type="email" id="email" name="email" value="<%= user.getEmail()%>" required>
                    </div>
                    <div class="form-group">
                        <label for="password"><%= language.equals("vi") ? "Mật khẩu mới (để trống nếu không đổi)" : "New Password (leave blank if unchanged)"%></label>
                        <input type="password" id="password" name="password">
                    </div>
                    <div class="form-group">
                        <label for="role"><%= language.equals("vi") ? "Vai trò" : "Role"%></label>
                        <select id="role" name="role" required>
                            <option value="ADMIN" <%= user.getRole().equals("ADMIN") ? "selected" : ""%>><%= language.equals("vi") ? "Quản trị viên" : "Admin"%></option>
                            <option value="USER" <%= user.getRole().equals("USER") ? "selected" : ""%>><%= language.equals("vi") ? "Người dùng" : "User"%></option>
                        </select>
                    </div>
                    <div class="form-buttons">
                        <button type="submit" class="action-btn add-btn"><%= language.equals("vi") ? "Lưu" : "Save"%></button>
                        <a href="<%= request.getContextPath()%>/admin/users" class="action-btn cancel-btn"><%= language.equals("vi") ? "Hủy" : "Cancel"%></a>
                    </div>
                </form>
                <% if (error != null) {%>
                <div class="custom-modal" id="errorModal" style="display: flex;">
                    <div class="modal-content animate-modal">
                        <h3><%= language.equals("vi") ? "Lỗi" : "Error"%></h3>
                        <p><%= error%></p>
                        <div class="modal-buttons">
                            <button class="modal-btn cancel-btn" onclick="document.getElementById('errorModal').style.display = 'none'">
                                <%= language.equals("vi") ? "Đóng" : "Close"%>
                            </button>
                        </div>
                    </div>
                </div>
                <% }%>
            </div>
        </div>
        <script>
            function changeLanguage() {
                const language = document.getElementById('languageSelect').value;
                fetch('<%= request.getContextPath()%>/language', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: 'language=' + encodeURIComponent(language)
                }).then(() => location.reload());
            }

            function changeTheme() {
                const theme = document.getElementById('themeSelect').value;
                fetch('<%= request.getContextPath()%>/theme', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: 'theme=' + encodeURIComponent(theme)
                }).then(() => {
                    document.body.className = theme === 'dark' ? 'dark-mode' : '';
                    document.body.setAttribute('data-theme', theme);
                });
            }
        </script>
    </body>
</html>


WEB-INF/views/admin/login_history.jsp
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ page import="java.util.List" %>
<%@ page import="com.mycompany.oceanichotel.models.LoginHistory" %>
<%
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en";
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light";
        session.setAttribute("theme", theme);
    }
    List<LoginHistory> loginHistory = (List<LoginHistory>) request.getAttribute("loginHistory");
    int userId = request.getParameter("userId") != null ? Integer.parseInt(request.getParameter("userId")) : 0;
%>
<!DOCTYPE html>
<html lang="<%= language%>">
    <head>
        <meta charset="UTF-8">
        <title><%= language.equals("vi") ? "Lịch sử đăng nhập - Khách sạn Oceanic" : "Login History - Oceanic Hotel"%></title>
        <link rel="icon" href="<%= request.getContextPath()%>/assets/images/logo.png" type="image/x-icon">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/main.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/sidebar.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/table.css">
        <script>
            window.contextPath = '<%= request.getContextPath()%>';
        </script>
        <script src="<%= request.getContextPath()%>/assets/js/main.js" type="module" defer></script>
        <script src="<%= request.getContextPath()%>/assets/js/theme.js" type="module" defer></script>
        <script src="<%= request.getContextPath()%>/assets/js/language.js" type="module" defer></script>
    </head>
    <body class="<%= theme.equals("dark") ? "dark-mode" : ""%>" data-theme="<%= theme%>">
        <div class="admin-container">
            <nav class="sidebar">
                <div class="sidebar-header">
                    <a style="color: white; margin-bottom: 20px; font-size: 24px; font-weight: 600; letter-spacing: 0.5px;" href="<%= request.getContextPath()%>/admin/dashboard">Oceanic Hotel
                    </a>
                </div>
                <ul>
                    <li><a href="<%= request.getContextPath()%>/admin/dashboard"><%= language.equals("vi") ? "Tổng quan" : "Dashboard"%></a></li>
                    <li class="active"><a href="<%= request.getContextPath()%>/admin/users"><%= language.equals("vi") ? "Quản lý người dùng" : "User Management"%></a></li>
                    <li class="active"><a href="<%= request.getContextPath()%>/admin/room-types"><%= language.equals("vi") ? "Quản lý loại phòng" : "Room Type Management"%></a></li>

                    <li><a href="<%= request.getContextPath()%>/admin/rooms"><%= language.equals("vi") ? "Quản lý phòng" : "Room Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/bookings"><%= language.equals("vi") ? "Quản lý đặt phòng" : "Booking Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/transactions"><%= language.equals("vi") ? "Quản lý giao dịch" : "Transaction Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/settings"><%= language.equals("vi") ? "Cấu hình hệ thống" : "System Settings"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/reports"><%= language.equals("vi") ? "Báo cáo" : "Reports"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/logout"><%= language.equals("vi") ? "Đăng xuất" : "Logout"%></a></li>
                </ul>
            </nav>
            <div class="main-content">
                <div class="table-header">
                    <a href="<%= request.getContextPath()%>/admin/users" class="action-btn back-btn">
                        <%= language.equals("vi") ? "Quay lại" : "Back"%>
                    </a>
                </div>
                <table class="data-table">
                    <thead>
                        <tr>
                            <th><%= language.equals("vi") ? "ID" : "ID"%></th>
                            <th><%= language.equals("vi") ? "Thời gian đăng nhập" : "Login Time"%></th>
                            <th><%= language.equals("vi") ? "Địa chỉ IP" : "IP Address"%></th>
                        </tr>
                    </thead>
                    <tbody>
                        <%
                            if (loginHistory != null && !loginHistory.isEmpty()) {
                                for (LoginHistory history : loginHistory) {
                        %>
                        <tr>
                            <td><%= history.getLoginId()%></td>
                            <td><%= history.getLoginTime()%></td>
                            <td><%= history.getIpAddress() != null ? history.getIpAddress() : language.equals("vi") ? "Không có" : "N/A"%></td>
                        </tr>
                        <%
                            }
                        } else {
                        %>
                        <tr>
                            <td colspan="3"><%= language.equals("vi") ? "Không có dữ liệu lịch sử đăng nhập" : "No login history available"%></td>
                        </tr>
                        <% }%>
                    </tbody>
                </table>
            </div>
        </div>
    </body>
</html>

WEB-INF/views/admin/reports.jsp
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en";
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light";
        session.setAttribute("theme", theme);
    }
%>
<!DOCTYPE html>
<html lang="<%= language%>">
    <head>
        <meta charset="UTF-8">
        <title><%= language.equals("vi") ? "Báo cáo - Khách sạn Oceanic" : "Reports - Oceanic Hotel"%></title>
        <link rel="icon" href="<%= request.getContextPath()%>/assets/images/logo.png" type="image/x-icon">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/main.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/sidebar.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/table.css">
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <style>
            .report-section {
                margin: 20px 0;
                padding: 15px;
                border: 1px solid #ddd;
                border-radius: 5px;
                background: #fff;
            }
            .report-section h3 {
                margin-bottom: 10px;
                color: #333;
            }
            .filter-section {
                margin-bottom: 20px;
            }
            .filter-section label {
                margin-right: 10px;
            }
            .filter-section input, .filter-section select {
                padding: 5px;
                margin-right: 10px;
            }
            .chart-container {
                width: 100%;
                max-width: 500px;
                height: 300px;
                margin: 20px auto;
            }
            .dark-mode .report-section {
                background: #444;
                border-color: #666;
                color: #fff;
            }
            .dark-mode .report-section h3 {
                color: #fff;
            }
            .dark-mode .filter-section input, .dark-mode .filter-section select {
                background: #555;
                color: #fff;
                border: 1px solid #777;
            }
        </style>
    </head>
    <body class="<%= theme.equals("dark") ? "dark-mode" : ""%>" data-theme="<%= theme%>">
        <div class="admin-container">
            <nav class="sidebar">
                <div class="sidebar-header">
                    <a style="color: white; margin-bottom: 20px; font-size: 24px; font-weight: 600; letter-spacing: 0.5px;" href="<%= request.getContextPath()%>/admin/dashboard">Oceanic Hotel
                    </a>
                </div>
                <ul>
                    <li><a href="<%= request.getContextPath()%>/admin/dashboard"><%= language.equals("vi") ? "Tổng quan" : "Dashboard"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/users"><%= language.equals("vi") ? "Quản lý người dùng" : "User Management"%></a></li>
                    <li class="active"><a href="<%= request.getContextPath()%>/admin/room-types"><%= language.equals("vi") ? "Quản lý loại phòng" : "Room Type Management"%></a></li>

                    <li><a href="<%= request.getContextPath()%>/admin/rooms"><%= language.equals("vi") ? "Quản lý phòng" : "Room Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/bookings"><%= language.equals("vi") ? "Quản lý đặt phòng" : "Booking Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/transactions"><%= language.equals("vi") ? "Quản lý giao dịch" : "Transaction Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/settings"><%= language.equals("vi") ? "Cấu hình hệ thống" : "System Settings"%></a></li>
                    <li class="active"><a href="<%= request.getContextPath()%>/admin/reports"><%= language.equals("vi") ? "Báo cáo" : "Reports"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/logout"><%= language.equals("vi") ? "Đăng xuất" : "Logout"%></a></li>
                </ul>
            </nav>
            <div class="main-content">
                <div class="filter-section">
                    <form action="<%= request.getContextPath()%>/admin/reports" method="GET">
                        <label><%= language.equals("vi") ? "Loại báo cáo:" : "Report Type:"%></label>
                        <select name="reportType" onchange="this.form.submit()">
                            <option value="daily" <%= "daily".equals(request.getParameter("reportType")) ? "selected" : ""%>><%= language.equals("vi") ? "Hàng ngày" : "Daily"%></option>
                            <option value="monthly" <%= "monthly".equals(request.getParameter("reportType")) ? "selected" : ""%>><%= language.equals("vi") ? "Hàng tháng" : "Monthly"%></option>
                            <option value="yearly" <%= "yearly".equals(request.getParameter("reportType")) ? "selected" : ""%>><%= language.equals("vi") ? "Hàng năm" : "Yearly"%></option>
                        </select>
                        <label><%= language.equals("vi") ? "Ngày bắt đầu:" : "Start Date:"%></label>
                        <input type="date" name="startDate" value="<%= request.getParameter("startDate") != null ? request.getParameter("startDate") : ""%>">
                        <label><%= language.equals("vi") ? "Ngày kết thúc:" : "End Date:"%></label>
                        <input type="date" name="endDate" value="<%= request.getParameter("endDate") != null ? request.getParameter("endDate") : ""%>">
                        <button type="submit"><%= language.equals("vi") ? "Lọc" : "Filter"%></button>
                    </form>
                </div>
                <div class="report-section">
                    <h3><%= language.equals("vi") ? "Doanh thu" : "Revenue"%></h3>
                    <p><%= language.equals("vi") ? "Tổng doanh thu: " : "Total Revenue: "%> <%= request.getAttribute("totalRevenue")%> VNĐ</p>
                    <div class="chart-container">
                        <canvas id="revenueChart"></canvas>
                    </div>
                </div>
                <div class="report-section">
                    <h3><%= language.equals("vi") ? "Tỷ lệ sử dụng phòng" : "Room Utilization"%></h3>
                    <p><%= language.equals("vi") ? "Tổng số phòng: " : "Total Rooms: "%> <%= request.getAttribute("totalRooms")%></p>
                    <p><%= language.equals("vi") ? "Phòng trống: " : "Available Rooms: "%> <%= request.getAttribute("availableRooms")%></p>
                    <p><%= language.equals("vi") ? "Đặt phòng đã xác nhận: " : "Confirmed Bookings: "%> <%= request.getAttribute("confirmedBookings")%></p>
                    <p><%= language.equals("vi") ? "Tỷ lệ sử dụng: " : "Utilization Rate: "%> <%= request.getAttribute("utilizationRate")%>%</p>
                    <div class="chart-container">
                        <canvas id="utilizationChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <script>
            const revenueCtx = document.getElementById('revenueChart').getContext('2d');
            const revenueChart = new Chart(revenueCtx, {
                type: 'bar',
                data: {
                    labels: ['<%= language.equals("vi") ? "Doanh thu" : "Revenue"%>'],
                    datasets: [{
                            label: '<%= language.equals("vi") ? "Tổng doanh thu" : "Total Revenue"%>',
                            data: [<%= request.getAttribute("totalRevenue")%>],
                            backgroundColor: '#007bff',
                            borderColor: '#0056b3',
                            borderWidth: 1
                        }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {y: {beginAtZero: true}},
                    plugins: {legend: {display: false}}
                }
            });

            const utilizationCtx = document.getElementById('utilizationChart').getContext('2d');
            const utilizationChart = new Chart(utilizationCtx, {
                type: 'pie',
                data: {
                    labels: ['<%= language.equals("vi") ? "Phòng đã sử dụng" : "Occupied"%>', '<%= language.equals("vi") ? "Phòng trống" : "Available"%>'],
                    datasets: [{
                            data: [<%= (Integer) request.getAttribute("totalRooms") - (Integer) request.getAttribute("availableRooms")%>, <%= request.getAttribute("availableRooms")%>],
                            backgroundColor: ['#dc3545', '#28a745'],
                            borderColor: ['#fff', '#fff'],
                            borderWidth: 1
                        }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {legend: {position: 'top'}}
                }
            });

            function changeLanguage() {
                const language = document.getElementById('languageSelect').value;
                fetch('<%= request.getContextPath()%>/language', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: 'language=' + encodeURIComponent(language)
                }).then(() => location.reload());
            }

            function changeTheme() {
                const theme = document.getElementById('themeSelect').value;
                fetch('<%= request.getContextPath()%>/theme', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: 'theme=' + encodeURIComponent(theme)
                }).then(() => {
                    document.body.className = theme === 'dark' ? 'dark-mode' : '';
                    document.body.setAttribute('data-theme', theme);
                });
            }
        </script>
    </body>
</html>


WEB-INF/views/admin/room_types.jsp
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ page import="java.util.List" %>
<%@ page import="com.mycompany.oceanichotel.models.RoomType" %>
<%
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en";
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light";
        session.setAttribute("theme", theme);
    }
%>
<!DOCTYPE html>
<html lang="<%= language%>">
    <head>
        <meta charset="UTF-8">
        <title><%= language.equals("vi") ? "Quản lý loại phòng - Khách sạn Oceanic" : "Room Type Management - Oceanic Hotel"%></title>
        <link rel="icon" href="<%= request.getContextPath()%>/assets/images/logo.png" type="image/x-icon">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/main.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/table.css">
        <style>
            .dropdown {
                position: relative;
                display: inline-block;
            }
            .dropdown-btn {
                background: none;
                border: none;
                font-size: 20px;
                cursor: pointer;
                padding: 0 10px;
                color: #333;
            }
            .dropdown-content {
                display: none;
                position: absolute;
                right: 0;
                background-color: #fff;
                min-width: 160px;
                box-shadow: 0 8px 16px rgba(0,0,0,0.2);
                z-index: 1;
                border-radius: 5px;
                border: 1px solid #ddd;
            }
            .dropdown-content a {
                color: #333;
                padding: 8px 16px;
                text-decoration: none;
                display: block;
                border-bottom: 1px solid #ddd;
            }
            .dropdown-content a:last-child {
                border-bottom: none;
            }
            .dropdown-content a:hover {
                background-color: #007bff;
                color: #fff;
            }
            .dark-mode .dropdown-btn {
                color: #fff;
            }
            .dark-mode .dropdown-content {
                background-color: #555;
                border-color: #666;
            }
            .dark-mode .dropdown-content a {
                color: #fff;
            }
            .dark-mode .dropdown-content a:hover {
                background-color: #0056b3;
            }
        </style>
    </head>
    <body class="<%= theme.equals("dark") ? "dark-mode" : ""%>" data-theme="<%= theme%>">
        <div class="admin-container">
            <nav class="sidebar">
                <div class="sidebar-header">
                    <a style="color: white; margin-bottom: 20px; font-size: 24px; font-weight: 600; letter-spacing: 0.5px;" href="<%= request.getContextPath()%>/admin/dashboard">Oceanic Hotel</a>
                </div>
                <ul>
                    <li><a href="<%= request.getContextPath()%>/admin/dashboard"><%= language.equals("vi") ? "Tổng quan" : "Dashboard"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/users"><%= language.equals("vi") ? "Quản lý người dùng" : "User Management"%></a></li>
                    <li class="active"><a href="<%= request.getContextPath()%>/admin/room-types" ><%= language.equals("vi") ? "Quản lý loại phòng" : "Room Type Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/rooms"><%= language.equals("vi") ? "Quản lý phòng" : "Room Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/bookings"><%= language.equals("vi") ? "Quản lý đặt phòng" : "Booking Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/transactions"><%= language.equals("vi") ? "Quản lý giao dịch" : "Transaction Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/settings"><%= language.equals("vi") ? "Cấu hình hệ thống" : "System Settings"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/reports"><%= language.equals("vi") ? "Báo cáo" : "Reports"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/logout"><%= language.equals("vi") ? "Đăng xuất" : "Logout"%></a></li>
                </ul>
            </nav>
            <div class="main-content">
                <div class="table-header">
                    <div class="add-room-type">
                        <button class="action-btn add-btn" onclick="window.location.href = '<%= request.getContextPath()%>/admin/room-types/add'">
                            <%= language.equals("vi") ? "Thêm loại phòng" : "Add Room Type"%>
                        </button>
                    </div>
                </div>
                <table class="data-table">
                    <thead>
                        <tr>
                            <th><%= language.equals("vi") ? "ID" : "ID"%></th>
                            <th><%= language.equals("vi") ? "Tên loại phòng" : "Type Name"%></th>
                            <th><%= language.equals("vi") ? "Giá mặc định" : "Default Price"%></th>
                            <th><%= language.equals("vi") ? "Số người lớn tối đa" : "Max Adults"%></th>
                            <th><%= language.equals("vi") ? "Số trẻ em tối đa" : "Max Children"%></th>
                            <th><%= language.equals("vi") ? "Hình ảnh chính" : "Primary Image"%></th>
                            <th><%= language.equals("vi") ? "Mô tả" : "Description"%></th>
                            <th><%= language.equals("vi") ? "Ngày tạo" : "Created At"%></th>
                            <th>...</th>
                        </tr>
                    </thead>
                    <tbody>
                        <%
                            List<RoomType> roomTypes = (List<RoomType>) request.getAttribute("roomTypes");
                            if (roomTypes != null) {
                                for (RoomType roomType : roomTypes) {
                        %>
                        <tr>
                            <td><%= roomType.getTypeId()%></td>
                            <td><%= roomType.getTypeName()%></td>
                            <td><%= roomType.getDefaultPrice()%> VND</td>
                            <td><%= roomType.getMaxAdults()%></td>
                            <td><%= roomType.getMaxChildren()%></td>
                            <td>
                                <% if (roomType.getPrimaryImage() != null) {%>
                                <img src="<%= request.getContextPath()%>/assets/images/room-types/<%= roomType.getPrimaryImage().getImageUrl()%>" alt="<%= roomType.getTypeName()%>" style="width: 50px; height: 50px;">
                                <% } else { %>
                                N/A
                                <% }%>
                            </td>
                            <td><%= roomType.getDescription() != null ? roomType.getDescription() : "N/A"%></td>
                            <td><%= roomType.getCreatedAt()%></td>
                            <td>
                                <div class="dropdown">
                                    <button class="dropdown-btn">⋮</button>
                                    <div class="dropdown-content">
                                        <a href="<%= request.getContextPath()%>/admin/room-types/edit?typeId=<%= roomType.getTypeId()%>">
                                            <%= language.equals("vi") ? "Sửa" : "Edit"%>
                                        </a>
                                        <a href="javascript:void(0)" onclick="confirmDelete('<%= roomType.getTypeId()%>')">
                                            <%= language.equals("vi") ? "Xóa" : "Delete"%>
                                        </a>
                                    </div>
                                </div>
                            </td>
                        </tr>
                        <% }
                        }%>
                    </tbody>
                </table>
            </div>
        </div>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                document.querySelectorAll('.dropdown-btn').forEach(btn => {
                    btn.addEventListener('click', function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        const dropdownContent = this.nextElementSibling;
                        const isVisible = dropdownContent.style.display === 'block';
                        document.querySelectorAll('.dropdown-content').forEach(content => content.style.display = 'none');
                        dropdownContent.style.display = isVisible ? 'none' : 'block';
                    });
                });
                document.addEventListener('click', function (e) {
                    if (!e.target.closest('.dropdown')) {
                        document.querySelectorAll('.dropdown-content').forEach(content => content.style.display = 'none');
                    }
                });
            });

            function confirmDelete(typeId) {
                const lang = '<%= language%>';
                const message = lang === 'vi' ? 'Bạn có chắc chắn muốn xóa loại phòng này không?' : 'Are you sure you want to delete this room type?';
                if (confirm(message)) {
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '<%= request.getContextPath()%>/admin/room-types/delete';
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = 'typeId';
                    input.value = typeId;
                    form.appendChild(input);
                    document.body.appendChild(form);
                    form.submit();
                }
            }
        </script>
    </body>
</html>

WEB-INF/views/admin/rooms.jsp
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ page import="java.util.List" %>
<%@ page import="com.mycompany.oceanichotel.models.Room" %>
<%
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en";
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light";
        session.setAttribute("theme", theme);
    }
    int currentPage = request.getAttribute("currentPage") != null ? (Integer) request.getAttribute("currentPage") : 1;
    int totalPages = request.getAttribute("totalPages") != null ? (Integer) request.getAttribute("totalPages") : 1;
%>
<!DOCTYPE html>
<html lang="<%= language%>">
    <head>
        <meta charset="UTF-8">
        <title><%= language.equals("vi") ? "Quản lý phòng - Khách sạn Oceanic" : "Room Management - Oceanic Hotel"%></title>
        <link rel="icon" href="<%= request.getContextPath()%>/assets/images/logo.png" type="image/x-icon">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/main.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/sidebar.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/table.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/modal.css">
        <style>
            .dropdown {
                position: relative;
                display: inline-block;
            }
            .dropdown-btn {
                background: none;
                border: none;
                font-size: 20px;
                cursor: pointer;
                padding: 0 10px;
                color: #333;
            }
            .dropdown-content {
                display: none;
                position: absolute;
                right: 0;
                background-color: #fff;
                min-width: 160px;
                box-shadow: 0 8px 16px rgba(0,0,0,0.2);
                z-index: 1;
                border-radius: 5px;
                border: 1px solid #ddd;
            }
            .dropdown-content a {
                color: #333;
                padding: 8px 16px;
                text-decoration: none;
                display: block;
                border-bottom: 1px solid #ddd;
            }
            .dropdown-content a:last-child {
                border-bottom: none;
            }
            .dropdown-content a:hover {
                background-color: #007bff;
                color: #fff;
            }
            .dark-mode .dropdown-btn {
                color: #fff;
            }
            .dark-mode .dropdown-content {
                background-color: #555;
                border-color: #666;
            }
            .dark-mode .dropdown-content a {
                color: #fff;
            }
            .dark-mode .dropdown-content a:hover {
                background-color: #0056b3;
            }
        </style>
    </head>
    <body class="<%= theme.equals("dark") ? "dark-mode" : ""%>" data-theme="<%= theme%>">
        <div class="admin-container">
            <nav class="sidebar">
                <div class="sidebar-header"><a style="color: white; margin-bottom: 20px; font-size: 24px; font-weight: 600; letter-spacing: 0.5px;" href="<%= request.getContextPath()%>/admin/dashboard">Oceanic Hotel</a></div>
                <ul>
                    <li><a href="<%= request.getContextPath()%>/admin/dashboard"><%= language.equals("vi") ? "Tổng quan" : "Dashboard"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/users"><%= language.equals("vi") ? "Quản lý người dùng" : "User Management"%></a></li>
                    <li><a href="<%= request.getContextPath() %>/admin/room-types" class="active"><%= language.equals("vi") ? "Quản lý loại phòng" : "Room Type Management" %></a></li>
                    <li class="active"><a href="<%= request.getContextPath()%>/admin/rooms" class="active"><%= language.equals("vi") ? "Quản lý phòng" : "Room Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/bookings"><%= language.equals("vi") ? "Quản lý đặt phòng" : "Booking Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/transactions"><%= language.equals("vi") ? "Quản lý giao dịch" : "Transaction Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/settings"><%= language.equals("vi") ? "Cấu hình hệ thống" : "System Settings"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/reports"><%= language.equals("vi") ? "Báo cáo" : "Reports"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/logout"><%= language.equals("vi") ? "Đăng xuất" : "Logout"%></a></li>
                </ul>
            </nav>
            <div class="main-content">

                <div class="table-header">
                    <div class="add-room">
                        <button class="action-btn add-btn" onclick="window.location.href = '<%= request.getContextPath()%>/admin/rooms/add'">
                            <%= language.equals("vi") ? "Thêm phòng" : "Add Room"%>
                        </button>
                    </div>
                    <div class="search">
                        <form action="<%= request.getContextPath()%>/admin/rooms" method="GET">
                            <input type="text" name="search" placeholder="<%= language.equals("vi") ? "Tìm kiếm theo số phòng" : "Search by room number"%>"
                                   value="<%= request.getParameter("search") != null ? request.getParameter("search") : ""%>">
                            <button type="submit" style="display: none;"></button>
                        </form>
                    </div>
                </div>
                <table class="data-table">
                    <thead>
                        <tr>
                            <th><%= language.equals("vi") ? "ID" : "ID"%></th>
                            <th><%= language.equals("vi") ? "Số phòng" : "Room Number"%></th>
                            <th><%= language.equals("vi") ? "Loại phòng" : "Room Type"%></th>
                            <th><%= language.equals("vi") ? "Giá mỗi đêm" : "Price/Night"%></th>
                            <!--<th><%= language.equals("vi") ? "Hình ảnh" : "Image"%></th>-->
                            <th><%= language.equals("vi") ? "Số người lớn tối đa" : "Max Adults"%></th>
                            <th><%= language.equals("vi") ? "Số trẻ em tối đa" : "Max Children"%></th>
                            <th><%= language.equals("vi") ? "Trạng thái" : "Status"%></th>
                            <!--<th><%= language.equals("vi") ? "Ngày tạo" : "Created At"%></th>-->
                            <th> </th>
                        </tr>
                    </thead>
                    <tbody>
                        <%
                            List<Room> rooms = (List<Room>) request.getAttribute("rooms");
                            if (rooms != null) {
                                for (Room room : rooms) {
                        %>
                        <tr>
                            <td><%= room.getRoomId()%></td>
                            <td><%= room.getRoomNumber()%></td>
                           <td><%= room.getRoomType() != null ? room.getRoomType().getTypeName() : "N/A" %></td>
                <td><%= String.format("%.1f VNĐ", room.getPricePerNight()) %></td>
                            <td><%= room.getMaxAdults()%></td>
                            <td><%= room.getMaxChildren()%></td>
                            <td>
                                <span class="status <%= room.isAvailable() ? "clean" : "dirty"%>">
                                    <%= room.isAvailable() ? (language.equals("vi") ? "Trống" : "Available") : (language.equals("vi") ? "Đã đặt" : "Occupied")%>
                                </span>
                            </td>
                            <!--<td>
    <%--<%= room.getCreatedAt()%>--%>
<!--</td>-->
                            <td>
                                <div class="dropdown">
                                    <button class="dropdown-btn">⋮</button>
                                    <div class="dropdown-content">
                                        <a href="<%= request.getContextPath()%>/admin/rooms/edit?roomId=<%= room.getRoomId()%>">
                                            <%= language.equals("vi") ? "Sửa thông tin" : "Edit Room"%>
                                        </a>
                                        <a href="javascript:void(0)" onclick="confirmDelete('<%= room.getRoomId()%>')">
                                            <%= language.equals("vi") ? "Xóa phòng" : "Delete Room"%>
                                        </a>
                                        <a href="<%= request.getContextPath()%>/admin/rooms/edit-history?roomId=<%= room.getRoomId()%>">
                                            <%= language.equals("vi") ? "Xem lịch sử chỉnh sửa" : "View Edit History"%>
                                        </a>
                                    </div>
                                </div>
                            </td>
                        </tr>
                        <%
                                }
                            }
                        %>
                    </tbody>
                </table>
                <% if (totalPages > 1) { %>
                <div class="pagination">
                    <% if (currentPage > 1) {%>
                    <a href="<%= request.getContextPath()%>/admin/rooms?page=<%= currentPage - 1%><%= request.getParameter("search") != null ? "&search=" + request.getParameter("search") : ""%>">
                        <button class="page-btn">Previous</button>
                    </a>
                    <% } %>
                    <% for (int i = 1; i <= totalPages; i++) {%>
                    <a href="<%= request.getContextPath()%>/admin/rooms?page=<%= i%><%= request.getParameter("search") != null ? "&search=" + request.getParameter("search") : ""%>">
                        <button class="page-btn <%= currentPage == i ? "active" : ""%>"><%= i%></button>
                    </a>
                    <% } %>
                    <% if (currentPage < totalPages) {%>
                    <a href="<%= request.getContextPath()%>/admin/rooms?page=<%= currentPage + 1%><%= request.getParameter("search") != null ? "&search=" + request.getParameter("search") : ""%>">
                        <button class="page-btn">Next</button>
                    </a>
                    <% } %>
                </div>
                <% }%>
            </div>
        </div>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                document.querySelectorAll('.dropdown-btn').forEach(btn => {
                    btn.addEventListener('click', function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        const dropdownContent = this.nextElementSibling;
                        const isVisible = dropdownContent.style.display === 'block';
                        document.querySelectorAll('.dropdown-content').forEach(content => content.style.display = 'none');
                        dropdownContent.style.display = isVisible ? 'none' : 'block';
                    });
                });
                document.addEventListener('click', function (e) {
                    if (!e.target.closest('.dropdown')) {
                        document.querySelectorAll('.dropdown-content').forEach(content => content.style.display = 'none');
                    }
                });
            });

            function confirmDelete(roomId) {
                const lang = '<%= language%>';
                const message = lang === 'vi' ? 'Bạn có chắc chắn muốn xóa phòng này không?' : 'Are you sure you want to delete this room?';
                if (confirm(message)) {
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '<%= request.getContextPath()%>/admin/rooms/delete';
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = 'roomId';
                    input.value = roomId;
                    form.appendChild(input);
                    document.body.appendChild(form);
                    form.submit();
                }
            }

            function changeLanguage() {
                const language = document.getElementById('languageSelect').value;
                fetch('<%= request.getContextPath()%>/language', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: 'language=' + encodeURIComponent(language)
                }).then(() => location.reload());
            }

            function changeTheme() {
                const theme = document.getElementById('themeSelect').value;
                fetch('<%= request.getContextPath()%>/theme', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: 'theme=' + encodeURIComponent(theme)
                }).then(() => {
                    document.body.className = theme === 'dark' ? 'dark-mode' : '';
                    document.body.setAttribute('data-theme', theme);
                });
            }
        </script>
    </body>
</html>


WEB-INF/views/admin/settings.jsp
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en";
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light";
        session.setAttribute("theme", theme);
    }
    String error = (String) request.getAttribute("error");
%>
<!DOCTYPE html>
<html lang="<%= language%>">
    <head>
        <meta charset="UTF-8">
        <title><%= language.equals("vi") ? "Cấu hình hệ thống - Khách sạn Oceanic" : "System Settings - Oceanic Hotel"%></title>
        <link rel="icon" href="<%= request.getContextPath()%>/assets/images/logo.png" type="image/x-icon">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/main.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/sidebar.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/form.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/modal.css">
    </head>
    <body class="<%= theme.equals("dark") ? "dark-mode" : ""%>" data-theme="<%= theme%>">
        <div class="admin-container">
            <nav class="sidebar">
                <div class="sidebar-header">
                    <a style="color: white; margin-bottom: 20px; font-size: 24px; font-weight: 600; letter-spacing: 0.5px;" href="<%= request.getContextPath()%>/admin/dashboard">Oceanic Hotel
                    </a>
                </div>
                <ul>
                    <li><a href="<%= request.getContextPath()%>/admin/dashboard"><%= language.equals("vi") ? "Tổng quan" : "Dashboard"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/users"><%= language.equals("vi") ? "Quản lý người dùng" : "User Management"%></a></li>
                    <li class="active"><a href="<%= request.getContextPath()%>/admin/room-types"><%= language.equals("vi") ? "Quản lý loại phòng" : "Room Type Management"%></a></li>

                    <li><a href="<%= request.getContextPath()%>/admin/rooms"><%= language.equals("vi") ? "Quản lý phòng" : "Room Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/bookings"><%= language.equals("vi") ? "Quản lý đặt phòng" : "Booking Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/transactions"><%= language.equals("vi") ? "Quản lý giao dịch" : "Transaction Management"%></a></li>
                    <li class="active"><a href="<%= request.getContextPath()%>/admin/settings"><%= language.equals("vi") ? "Cấu hình hệ thống" : "System Settings"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/reports"><%= language.equals("vi") ? "Báo cáo" : "Reports"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/logout"><%= language.equals("vi") ? "Đăng xuất" : "Logout"%></a></li>
                </ul>
            </nav>
            <div class="main-content">

                <form action="<%= request.getContextPath()%>/admin/settings/update" method="POST">
                    <div class="form-group">
                        <label for="defaultLanguage"><%= language.equals("vi") ? "Ngôn ngữ mặc định" : "Default Language"%></label>
                        <select id="defaultLanguage" name="defaultLanguage" required>
                            <option value="en" <%= language.equals("en") ? "selected" : ""%>><%= language.equals("vi") ? "Tiếng Anh" : "English"%></option>
                            <option value="vi" <%= language.equals("vi") ? "selected" : ""%>><%= language.equals("vi") ? "Tiếng Việt" : "Vietnamese"%></option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="defaultTheme"><%= language.equals("vi") ? "Giao diện mặc định" : "Default Theme"%></label>
                        <select id="defaultTheme" name="defaultTheme" required>
                            <option value="light" <%= theme.equals("light") ? "selected" : ""%>><%= language.equals("vi") ? "Chế độ sáng" : "Light Mode"%></option>
                            <option value="dark" <%= theme.equals("dark") ? "selected" : ""%>><%= language.equals("vi") ? "Chế độ tối" : "Dark Mode"%></option>
                        </select>
                    </div>
                    <div class="form-buttons">
                        <button type="submit" class="action-btn add-btn"><%= language.equals("vi") ? "Lưu" : "Save"%></button>
                    </div>
                </form>
                <% if (error != null) {%>
                <div class="custom-modal" id="errorModal" style="display: flex;">
                    <div class="modal-content animate-modal">
                        <h3><%= language.equals("vi") ? "Lỗi" : "Error"%></h3>
                        <p><%= error%></p>
                        <div class="modal-buttons">
                            <button class="modal-btn cancel-btn" onclick="document.getElementById('errorModal').style.display = 'none'">
                                <%= language.equals("vi") ? "Đóng" : "Close"%>
                            </button>
                        </div>
                    </div>
                </div>
                <% }%>
            </div>
        </div>
        <script>
            function changeLanguage() {
                fetch('<%= request.getContextPath()%>/language', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: 'language=' + encodeURIComponent(document.getElementById('languageSelect').value)
                }).then(() => location.reload());
            }

            function changeTheme() {
                const theme = document.getElementById('themeSelect').value;
                fetch('<%= request.getContextPath()%>/theme', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: 'theme=' + encodeURIComponent(theme)
                }).then(() => {
                    document.body.className = theme === 'dark' ? 'dark-mode' : '';
                    document.body.setAttribute('data-theme', theme);
                });
            }
        </script>
    </body>
</html>

WEB-INF/views/admin/transactions.jsp
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ page import="java.util.List" %>
<%@ page import="com.mycompany.oceanichotel.models.Transaction" %>
<%
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en";
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light";
        session.setAttribute("theme", theme);
    }
    int currentPage = request.getAttribute("currentPage") != null ? (Integer) request.getAttribute("currentPage") : 1;
    int totalPages = request.getAttribute("totalPages") != null ? (Integer) request.getAttribute("totalPages") : 1;
%>
<!DOCTYPE html>
<html lang="<%= language%>">
    <head>
        <meta charset="UTF-8">
        <title><%= language.equals("vi") ? "Quản lý giao dịch - Khách sạn Oceanic" : "Transaction Management - Oceanic Hotel"%></title>
        <link rel="icon" href="<%= request.getContextPath()%>/assets/images/logo.png" type="image/x-icon">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/main.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/sidebar.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/table.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/modal.css">
        <style>
            .dropdown {
                position: relative;
                display: inline-block;
            }
            .dropdown-btn {
                background: none;
                border: none;
                font-size: 20px;
                cursor: pointer;
                padding: 0 10px;
                color: #333;
            }
            .dropdown-content {
                display: none;
                position: absolute;
                right: 0;
                background-color: #fff;
                min-width: 160px;
                box-shadow: 0 8px 16px rgba(0,0,0,0.2);
                z-index: 1;
                border-radius: 5px;
                border: 1px solid #ddd;
            }
            .dropdown-content a {
                color: #333;
                padding: 8px 16px;
                text-decoration: none;
                display: block;
                border-bottom: 1px solid #ddd;
            }
            .dropdown-content a:last-child {
                border-bottom: none;
            }
            .dropdown-content a:hover {
                background-color: #007bff;
                color: #fff;
            }
            .dark-mode .dropdown-btn {
                color: #fff;
            }
            .dark-mode .dropdown-content {
                background-color: #555;
                border-color: #666;
            }
            .dark-mode .dropdown-content a {
                color: #fff;
            }
            .dark-mode .dropdown-content a:hover {
                background-color: #0056b3;
            }
            .stats {
                margin: 20px 0;
                display: flex;
                gap: 20px;
            }
            .stats div {
                padding: 10px;
                background: #f8f9fa;
                border-radius: 5px;
            }
            .dark-mode .stats div {
                background: #444;
                color: #fff;
            }
        </style>
    </head>
    <body class="<%= theme.equals("dark") ? "dark-mode" : ""%>" data-theme="<%= theme%>">
        <div class="admin-container">
            <nav class="sidebar">
                <div class="sidebar-header">
                    <a style="color: white; margin-bottom: 20px; font-size: 24px; font-weight: 600; letter-spacing: 0.5px;" href="<%= request.getContextPath()%>/admin/dashboard">Oceanic Hotel
                    </a>
                </div>
                <ul>
                    <li><a href="<%= request.getContextPath()%>/admin/dashboard"><%= language.equals("vi") ? "Tổng quan" : "Dashboard"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/users"><%= language.equals("vi") ? "Quản lý người dùng" : "User Management"%></a></li>
                    <li class="active"><a href="<%= request.getContextPath()%>/admin/room-types"><%= language.equals("vi") ? "Quản lý loại phòng" : "Room Type Management"%></a></li>

                    <li><a href="<%= request.getContextPath()%>/admin/rooms"><%= language.equals("vi") ? "Quản lý phòng" : "Room Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/bookings"><%= language.equals("vi") ? "Quản lý đặt phòng" : "Booking Management"%></a></li>
                    <li class="active"><a href="<%= request.getContextPath()%>/admin/transactions"><%= language.equals("vi") ? "Quản lý giao dịch" : "Transaction Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/settings"><%= language.equals("vi") ? "Cấu hình hệ thống" : "System Settings"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/reports"><%= language.equals("vi") ? "Báo cáo" : "Reports"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/logout"><%= language.equals("vi") ? "Đăng xuất" : "Logout"%></a></li>
                </ul>
            </nav>
            <div class="main-content">

                <div class="stats">
                    <div><%= language.equals("vi") ? "Tổng doanh thu: " : "Total Revenue: "%><%= request.getAttribute("totalRevenue")%></div>
                    <div><%= language.equals("vi") ? "Thành công: " : "Successful: "%><%= request.getAttribute("successfulTransactions")%></div>
                    <div><%= language.equals("vi") ? "Thất bại: " : "Failed: "%><%= request.getAttribute("failedTransactions")%></div>
                </div>
                <div class="table-header">
                    <div class="search">
                        <form action="<%= request.getContextPath()%>/admin/transactions" method="GET">
                            <input type="text" name="search" placeholder="<%= language.equals("vi") ? "Tìm kiếm theo ID giao dịch" : "Search by Transaction ID"%>"
                                   value="<%= request.getParameter("search") != null ? request.getParameter("search") : ""%>">
                            <button type="submit" style="display: none;"></button>
                        </form>
                    </div>
                </div>
                <table class="data-table">
                    <thead>
                        <tr>
                            <th><%= language.equals("vi") ? "ID" : "ID"%></th>
                            <th><%= language.equals("vi") ? "Đặt phòng" : "Booking"%></th>
                            <th><%= language.equals("vi") ? "Số tiền" : "Amount"%></th>
                            <th><%= language.equals("vi") ? "Trạng thái" : "Status"%></th>
                            <th><%= language.equals("vi") ? "Ngày tạo" : "Created At"%></th>
                        </tr>
                    </thead>
                    <tbody>
                        <%
                            List<Transaction> transactions = (List<Transaction>) request.getAttribute("transactions");
                            if (transactions != null) {
                                for (Transaction transaction : transactions) {
                        %>
                        <tr>
                            <td><%= transaction.getTransactionId()%></td>
                            <td><%= transaction.getBookingId()%></td>
                            <td><%= transaction.getAmount()%> VNĐ</td>
                            <td><%= language.equals("vi") ? (transaction.getStatus().equals("Success") ? "Thành công" : "Thất bại") : transaction.getStatus()%></td>
                            <td><%= transaction.getCreatedAt()%></td>
                        </tr>
                        <%
                                }
                            }
                        %>
                    </tbody>
                </table>
                <% if (totalPages > 1) { %>
                <div class="pagination">
                    <% if (currentPage > 1) {%>
                    <a href="<%= request.getContextPath()%>/admin/transactions?page=<%= currentPage - 1%><%= request.getParameter("search") != null ? "&search=" + request.getParameter("search") : ""%>">
                        <button class="page-btn">Previous</button>
                    </a>
                    <% } %>
                    <% for (int i = 1; i <= totalPages; i++) {%>
                    <a href="<%= request.getContextPath()%>/admin/transactions?page=<%= i%><%= request.getParameter("search") != null ? "&search=" + request.getParameter("search") : ""%>">
                        <button class="page-btn <%= currentPage == i ? "active" : ""%>"><%= i%></button>
                    </a>
                    <% } %>
                    <% if (currentPage < totalPages) {%>
                    <a href="<%= request.getContextPath()%>/admin/transactions?page=<%= currentPage + 1%><%= request.getParameter("search") != null ? "&search=" + request.getParameter("search") : ""%>">
                        <button class="page-btn">Next</button>
                    </a>
                    <% } %>
                </div>
                <% }%>
            </div>
        </div>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                document.querySelectorAll('.dropdown-btn').forEach(btn => {
                    btn.addEventListener('click', function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        const dropdownContent = this.nextElementSibling;
                        const isVisible = dropdownContent.style.display === 'block';
                        document.querySelectorAll('.dropdown-content').forEach(content => content.style.display = 'none');
                        dropdownContent.style.display = isVisible ? 'none' : 'block';
                    });
                });
                document.addEventListener('click', function (e) {
                    if (!e.target.closest('.dropdown')) {
                        document.querySelectorAll('.dropdown-content').forEach(content => content.style.display = 'none');
                    }
                });
            });

            function changeLanguage() {
                fetch('<%= request.getContextPath()%>/language', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: 'language=' + encodeURIComponent(document.getElementById('languageSelect').value)
                }).then(() => location.reload());
            }

            function changeTheme() {
                const theme = document.getElementById('themeSelect').value;
                fetch('<%= request.getContextPath()%>/theme', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: 'theme=' + encodeURIComponent(theme)
                }).then(() => {
                    document.body.className = theme === 'dark' ? 'dark-mode' : '';
                    document.body.setAttribute('data-theme', theme);
                });
            }
        </script>
    </body>
</html>


WEB-INF/views/admin/users.jsp
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ page import="java.util.List" %>
<%@ page import="com.mycompany.oceanichotel.models.User" %>
<%
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en";
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light";
        session.setAttribute("theme", theme);
    }

    int currentPage = request.getAttribute("currentPage") != null ? (Integer) request.getAttribute("currentPage") : 1;
    int totalPages = request.getAttribute("totalPages") != null ? (Integer) request.getAttribute("totalPages") : 1;
%>
<!DOCTYPE html>
<html lang="<%= language%>">
    <head>
        <meta charset="UTF-8">
        <title><%= language.equals("vi") ? "Quản lý người dùng - Khách sạn Oceanic" : "User Management - Oceanic Hotel"%></title>
        <link rel="icon" href="<%= request.getContextPath()%>/assets/images/logo.png" type="image/x-icon">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/main.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/sidebar.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/table.css">
        <link rel="stylesheet" href="<%= request.getContextPath()%>/assets/css/modal.css">
        <style>
            .dropdown {
                position: relative;
                display: inline-block;
            }
            .dropdown-btn {
                background: none;
                border: none;
                font-size: 20px;
                cursor: pointer;
                padding: 0 10px;
                color: #333;
            }
            .dropdown-content {
                display: none;
                position: absolute;
                right: 0;
                background-color: #fff;
                min-width: 160px;
                box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
                z-index: 1;
                border-radius: 5px;
                border: 1px solid #ddd;
            }
            .dropdown-content a {
                color: #333;
                padding: 8px 16px;
                text-decoration: none;
                display: block;
                border-bottom: 1px solid #ddd;
            }
            .dropdown-content a:last-child {
                border-bottom: none;
            }
            .dropdown-content a:hover {
                background-color: #007bff;
                color: #fff;
            }
            .dark-mode .dropdown-btn {
                color: #fff;
            }
            .dark-mode .dropdown-content {
                background-color: #555;
                border-color: #666;
            }
            .dark-mode .dropdown-content a {
                color: #fff;
            }
            .dark-mode .dropdown-content a:hover {
                background-color: #0056b3;
            }
        </style>
    </head>
    <body class="<%= theme.equals("dark") ? "dark-mode" : ""%>" data-theme="<%= theme%>">
        <div class="admin-container">
            <nav class="sidebar">
                <div class="sidebar-header">
                    <a style="color: white; margin-bottom: 20px; font-size: 24px; font-weight: 600; letter-spacing: 0.5px;" href="<%= request.getContextPath()%>/admin/dashboard">Oceanic Hotel
                    </a>
                </div>
                <ul>
                    <li><a href="<%= request.getContextPath()%>/admin/dashboard"><%= language.equals("vi") ? "Tổng quan" : "Dashboard"%></a></li>
                    <li class="active"><a href="<%= request.getContextPath()%>/admin/users"><%= language.equals("vi") ? "Quản lý người dùng" : "User Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/room-types"><%= language.equals("vi") ? "Quản lý loại phòng" : "Room Type Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/rooms"><%= language.equals("vi") ? "Quản lý phòng" : "Room Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/bookings"><%= language.equals("vi") ? "Quản lý đặt phòng" : "Booking Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/transactions"><%= language.equals("vi") ? "Quản lý giao dịch" : "Transaction Management"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/settings"><%= language.equals("vi") ? "Cấu hình hệ thống" : "System Settings"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/admin/reports"><%= language.equals("vi") ? "Báo cáo" : "Reports"%></a></li>
                    <li><a href="<%= request.getContextPath()%>/logout"><%= language.equals("vi") ? "Đăng xuất" : "Logout"%></a></li>
                </ul>
            </nav>
            <div class="main-content">
                <div class="table-header">
                    <div class="add-user">
                        <button class="action-btn add-btn" onclick="window.location.href = '<%= request.getContextPath()%>/admin/users/add'">
                            <%= language.equals("vi") ? "Thêm người dùng" : "Add User"%>
                        </button>
                    </div>
                    <div class="search">
                        <form action="<%= request.getContextPath()%>/admin/users" method="GET">
                            <input type="text" name="search" placeholder="<%= language.equals("vi") ? "Tìm kiếm theo tên người dùng" : "Search by username"%>"
                                   value="<%= request.getParameter("search") != null ? request.getParameter("search") : ""%>">
                            <button type="submit" style="display: none;"></button>
                        </form>
                    </div>
                </div>
                <table class="data-table">
                    <thead>
                        <tr>
                            <th><%= language.equals("vi") ? "ID" : "ID"%></th>
                            <th><%= language.equals("vi") ? "Tên người dùng" : "Username"%></th>
                            <th><%= language.equals("vi") ? "Email" : "Email"%></th>
                            <th><%= language.equals("vi") ? "Vai trò" : "Role"%></th>
                            <th><%= language.equals("vi") ? "Ngày tạo" : "Created At"%></th>
                            <th></th>

                        </tr>
                    </thead>
                    <tbody>
                        <%
                            List<User> users = (List<User>) request.getAttribute("users");
                            if (users != null) {
                                for (User user : users) {
                        %>
                        <tr>
                            <td><%= user.getUserId()%></td>
                            <td><%= user.getUsername()%></td>
                            <td><%= user.getEmail()%></td>
                            <td><%= user.getRole()%></td>
                            <td><%= user.getCreatedAt()%></td>
                            <td>
                                <div class="dropdown">
                                    <button class="dropdown-btn">⋮</button>
                                    <div class="dropdown-content">
                                        <a href="<%= request.getContextPath()%>/admin/users/edit?userId=<%= user.getUserId()%>">
                                            <%= language.equals("vi") ? "Sửa thông tin" : "Edit User"%>
                                        </a>
                                        <a href="javascript:void(0)" onclick="confirmDelete('<%= user.getUserId()%>')">
                                            <%= language.equals("vi") ? "Xóa người dùng" : "Delete User"%>
                                        </a>
                                    </div>
                                </div>
                            </td>
                        </tr>
                        <%
                                }
                            }
                        %>
                    </tbody>
                </table>
                <% if (totalPages > 1) { %>
                <div class="pagination">
                    <% if (currentPage > 1) {%>
                    <a href="<%= request.getContextPath()%>/admin/users?page=<%= currentPage - 1%><%= request.getParameter("search") != null ? "&search=" + request.getParameter("search") : ""%>">
                        <button class="page-btn">Previous</button>
                    </a>
                    <% } %>
                    <% for (int i = 1; i <= totalPages; i++) {%>
                    <a href="<%= request.getContextPath()%>/admin/users?page=<%= i%><%= request.getParameter("search") != null ? "&search=" + request.getParameter("search") : ""%>">
                        <button class="page-btn <%= currentPage == i ? "active" : ""%>"><%= i%></button>
                    </a>
                    <% } %>
                    <% if (currentPage < totalPages) {%>
                    <a href="<%= request.getContextPath()%>/admin/users?page=<%= currentPage + 1%><%= request.getParameter("search") != null ? "&search=" + request.getParameter("search") : ""%>">
                        <button class="page-btn">Next</button>
                    </a>
                    <% } %>
                </div>
                <% }%>
            </div>
        </div>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                document.querySelectorAll('.dropdown-btn').forEach(btn => {
                    btn.addEventListener('click', function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        const dropdownContent = this.nextElementSibling;
                        const isVisible = dropdownContent.style.display === 'block';
                        document.querySelectorAll('.dropdown-content').forEach(content => {
                            content.style.display = 'none';
                        });
                        dropdownContent.style.display = isVisible ? 'none' : 'block';
                    });
                });

                document.addEventListener('click', function (e) {
                    if (!e.target.closest('.dropdown')) {
                        document.querySelectorAll('.dropdown-content').forEach(content => {
                            content.style.display = 'none';
                        });
                    }
                });
            });

            function confirmDelete(userId) {
                const lang = '<%= language%>';
                const message = lang === 'vi' ? 'Bạn có chắc chắn muốn xóa người dùng này không?' : 'Are you sure you want to delete this user?';
                if (confirm(message)) {
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '<%= request.getContextPath()%>/admin/users/delete';
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = 'userId';
                    input.value = userId;
                    form.appendChild(input);
                    document.body.appendChild(form);
                    form.submit();
                }
            }

            function changeLanguage() {
                const language = document.getElementById('languageSelect').value;
                fetch('<%= request.getContextPath()%>/language', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: 'language=' + encodeURIComponent(language)
                }).then(() => location.reload());
            }

            function changeTheme() {
                const theme = document.getElementById('themeSelect').value;
                fetch('<%= request.getContextPath()%>/theme', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: 'theme=' + encodeURIComponent(theme)
                }).then(() => {
                    document.body.className = theme === 'dark' ? 'dark-mode' : '';
                    document.body.setAttribute('data-theme', theme);
                });
            }
        </script>
    </body>
</html>

Public Pages:

WEB-INF/views/public/dashboard.jsp
chưa có
WEB-INF/views/public/login.jsp
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<% 
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en"; // Mặc định là tiếng Anh
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light"; // Mặc định là chế độ sáng
        session.setAttribute("theme", theme);
    }
%>
<!DOCTYPE html>
<html lang="<%= language %>">
<head>
    <meta charset="UTF-8">
    <title><%= language.equals("vi") ? "Đăng nhập - Khách sạn Oceanic" : "Login - Oceanic Hotel" %></title>
    <link rel="icon" href="<%= request.getContextPath() %>/assets/images/logo.png" type="image/x-icon">
    <link rel="stylesheet" href="<%= request.getContextPath() %>/assets/css/main.css">
    <script>
        window.contextPath = '<%= request.getContextPath() %>';
    </script>
    <script type="module" src="<%= request.getContextPath() %>/assets/js/main.js" defer></script>
</head>
<body class="<%= theme.equals("dark") ? "dark-mode" : "" %>" data-theme="<%= theme %>">
    <div class="settings">
        <select id="languageSelect">
            <option value="en" <%= language.equals("en") ? "selected" : "" %>><%= language.equals("vi") ? "Tiếng Anh" : "English" %></option>
            <option value="vi" <%= language.equals("vi") ? "selected" : "" %>><%= language.equals("vi") ? "Tiếng Việt" : "Vietnamese" %></option>
        </select>
        <select id="themeSelect">
            <option value="light" <%= theme.equals("light") ? "selected" : "" %>><%= language.equals("vi") ? "Chế độ sáng" : "Light Mode" %></option>
            <option value="dark" <%= theme.equals("dark") ? "selected" : "" %>><%= language.equals("vi") ? "Chế độ tối" : "Dark Mode" %></option>
        </select>
    </div>
    <div class="container">
        <img src="<%= request.getContextPath() %>/assets/images/logo.png" alt="Oceanic Hotel Logo" style="width: 100px; margin-bottom: 20px;">
        <h2><%= language.equals("vi") ? "Đăng nhập" : "Login" %></h2>
        <form action="<%= request.getContextPath() %>/login" method="post">
            <label for="username"><%= language.equals("vi") ? "Tên người dùng:" : "Username:" %></label>
            <input type="text" id="username" name="username" required>
            <label for="password"><%= language.equals("vi") ? "Mật khẩu:" : "Password:" %></label>
            <input type="password" id="password" name="password" required autocomplete="current-password">
            <button type="submit"><%= language.equals("vi") ? "Đăng nhập" : "Login" %></button>
        </form>
        <div id="error-message" style="display: none; color: red;"></div>
        <% if (request.getAttribute("error") != null) { %>
            <p style="color: red;"><%= language.equals("vi") ? "Tên người dùng hoặc mật khẩu không đúng" : request.getAttribute("error") %></p>
        <% } %>
        <p><%= language.equals("vi") ? "Chưa có tài khoản?" : "Don't have an account?" %> <a href="<%= request.getContextPath() %>/register"><%= language.equals("vi") ? "Đăng ký tại đây" : "Register here" %></a></p>
    </div>
</body>
</html>


WEB-INF/views/public/register.jsp
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<% 
    String language = (String) session.getAttribute("language");
    if (language == null) {
        language = "en";
        session.setAttribute("language", language);
    }
    String theme = (String) session.getAttribute("theme");
    if (theme == null) {
        theme = "light";
        session.setAttribute("theme", theme);
    }
%>
<!DOCTYPE html>
<html lang="<%= language %>">
<head>
    <meta charset="UTF-8">
    <title><%= language.equals("vi") ? "Đăng ký - Khách sạn Oceanic" : "Register - Oceanic Hotel" %></title>
    <link rel="icon" href="<%= request.getContextPath() %>/assets/images/logo.png" type="image/x-icon">
    <link rel="stylesheet" href="<%= request.getContextPath() %>/assets/css/main.css">
    <script>
        window.contextPath = '<%= request.getContextPath() %>';
    </script>
    <script type="module" src="<%= request.getContextPath() %>/assets/js/main.js" defer></script>
    
    
</head>
<body class="<%= theme.equals("dark") ? "dark-mode" : "" %>" data-theme="<%= theme %>">
    <div class="settings">
        <select id="languageSelect">
            <option value="en" <%= language.equals("en") ? "selected" : "" %>><%= language.equals("vi") ? "Tiếng Anh" : "English" %></option>
            <option value="vi" <%= language.equals("vi") ? "selected" : "" %>><%= language.equals("vi") ? "Tiếng Việt" : "Vietnamese" %></option>
        </select>
        <select id="themeSelect">
            <option value="light" <%= theme.equals("light") ? "selected" : "" %>><%= language.equals("vi") ? "Chế độ sáng" : "Light Mode" %></option>
            <option value="dark" <%= theme.equals("dark") ? "selected" : "" %>><%= language.equals("vi") ? "Chế độ tối" : "Dark Mode" %></option>
        </select>
    </div>
    <div class="container">
        <h2><%= language.equals("vi") ? "Đăng ký" : "Register" %></h2>
        <form action="<%= request.getContextPath() %>/register" method="post">
            <label for="username"><%= language.equals("vi") ? "Tên người dùng:" : "Username:" %></label>
            <input type="text" id="username" name="username" required>
            <label for="email"><%= language.equals("vi") ? "Email:" : "Email:" %></label>
            <input type="email" id="email" name="email" required>
            <label for="password"><%= language.equals("vi") ? "Mật khẩu:" : "Password:" %></label>
            <input type="password" id="password" name="password" required>
            <button type="submit"><%= language.equals("vi") ? "Đăng ký" : "Register" %></button>
        </form>
        <div id="error-message" style="display: none; color: red;"></div>
        <% if (request.getAttribute("error") != null) { %>
            <p style="color: red;"><%= request.getAttribute("error") %></p>
        <% } %>
        <p><%= language.equals("vi") ? "Đã có tài khoản?" : "Already have an account?" %> <a href="<%= request.getContextPath() %>/login"><%= language.equals("vi") ? "Đăng nhập tại đây" : "Login here" %></a></p>
    </div>
</body>
</html>

Assets (CSS):

assets/css/base.css
/* Base styles for body, headings, and links */
body {
    background-image: var(--background-image);
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    background-color: var(--background-color);
    min-height: 95vh;
    padding: 20px;
    transition: background-color 0.5s ease;
}

h2 {
    color: var(--title-color);
    margin-bottom: 20px;
    font-size: 24px;
    font-weight: 600;
    letter-spacing: 0.5px;
}

a {
    color: var(--link-color);
    text-decoration: none;
}


assets/css/button.css
/* Button styles */
.action-btn {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
}

.add-btn {
    background-color: #2ecc71;
    color: #fff;
}

.add-btn:hover {
    background-color: #27ae60;
    transform: scale(1.02);
}

.cancel-btn {
    background-color: #e74c3c;
    color: #fff;
    text-decoration: none;
    display: flex;
    align-items: center;
    justify-content: center;
}

.cancel-btn:hover {
    background-color: #c0392b;
    transform: scale(1.02);
}


assets/css/container.css
/* Container styles */
.admin-container {
    display: flex;
    min-height: 95vh;
    width: 96.5vw;
    opacity: 0.95;
}

.main-content {
    flex: 1;
    padding: 20px;
    background-color: var(--background-color);
}

header {
    margin-bottom: 30px;
}


assets/css/dashboard.css
/* dashboard.css - Style cho trang dashboard */

/* Tổng quan (Overview) */
.overview {
    display: flex;
    gap: 20px;
    flex-wrap: wrap;
}

.card {
    background-color: #fff;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    flex: 1;
    min-width: 150px;
    text-align: center;
}

.card h4 {
    margin-bottom: 10px;
    font-size: 16px;
    color: #2c3e50;
}

.card p {
    font-size: 24px;
    font-weight: bold;
    color: #3498db;
}

.dark-mode .card {
    background-color: #444;
}

.dark-mode .card h4 {
    color: #fff;
}

.dark-mode .card p {
    color: #1e90ff;
}

/* Action Buttons */
.action-buttons {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
}

.check-in-btn {
    background-color: #3498db;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.check-in-btn:hover {
    background-color: #2980b9;
}

.check-out-btn {
    background-color: #e74c3c;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.check-out-btn:hover {
    background-color: #c0392b;
}



assets/css/form.css
/* Form styles */
.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
    color: var(--text-color);
}

.form-group input[type="text"],
.form-group input[type="email"],
.form-group input[type="password"],
.form-group input[type="number"],
.form-group input[type="file"],
#description,
.form-group select {
    width: 50%;
    padding: 10px;
    border: 1px solid var(--border-color);
    border-radius: 5px;
    font-size: 14px;
    background-color: var(--container-bg);
    color: var(--text-color);
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

.form-group input[type="text"]:focus,
.form-group input[type="email"]:focus,
.form-group input[type="password"]:focus,
.form-group input[type="number"]:focus,
.form-group select:focus {
    border-color: var(--button-bg);
    box-shadow: 0 0 5px rgba(52, 152, 219, 0.3);
    outline: none;
}

.form-group input[type="checkbox"] {
    margin-left: 10px;
}

.form-buttons {
    display: flex;
    gap: 10px;
}


assets/css/main.css
/* Main CSS to import all others */
@import url('reset.css');
@import url('variables.css');
@import url('base.css');
@import url('container.css');
@import url('sidebar.css');
@import url('form.css');
@import url('button.css');
@import url('table.css');
@import url('modal.css');
@import url('settings.css');


assets/css/modal.css
/* Modal styles */
.custom-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.6);
    display: none; /* Ẩn mặc định */
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.custom-modal[style*="display: flex"] {
    display: flex; /* Hiển thị khi được kích hoạt */
}

.modal-content {
    background: var(--container-bg);
    padding: 25px;
    border-radius: 15px;
    box-shadow: 0 8px 20px var(--shadow-color);
    width: 350px;
    text-align: center;
}

.modal-content h3 {
    color: var(--title-color);
    margin-bottom: 15px;
    font-size: 22px;
    font-weight: 600;
}

.modal-content p {
    color: var(--text-color);
    margin-bottom: 20px;
    font-size: 16px;
}

.modal-buttons {
    display: flex;
    gap: 15px;
    justify-content: center;
}

.modal-btn {
    padding: 10px 20px;
    border-radius: 25px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    transition: transform 0.2s ease, background-color 0.3s ease;
}

.modal-btn:hover {
    transform: translateY(-2px);
}

.confirm-btn {
    background-color: #2ecc71;
    color: #fff;
    border: none;
}

.confirm-btn:hover {
    background-color: #27ae60;
}

.cancel-btn {
    background-color: #e74c3c;
    color: #fff;
    border: none;
}

.cancel-btn:hover {
    background-color: #c0392b;
}

.dark-mode .modal-content {
    background: rgba(80, 80, 80, 0.9);
}


assets/css/notification.css
/*Style cho thông báo thành công hoặc lỗi (notification, success, error).*/

.notification {
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 20px;
    text-align: center;
}

.notification.success {
    background-color: #1e90ff;
    color: #fff;
}

.notification.error {
    background-color: #e74c3c;
    color: #fff;
}


assets/css/reset.css
/* Reset default browser styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Arial', sans-serif;
}


assets/css/settings.css
/* Settings styles */
.settings {
    position: absolute;
    top: 20px;
    right: 20px;
    display: flex;
    gap: 10px;
    z-index: 1000;
}

.settings select {
    padding: 5px 10px;
    border-radius: 5px;
    border: 1px solid var(--border-color);
    background-color: var(--container-bg);
    color: var(--text-color);
    cursor: pointer;
    font-size: 14px;
    transition: border-color 0.3s ease, background-color 0.3s ease;
}

.settings select:focus {
    outline: none;
    border-color: var(--button-bg);
}


assets/css/sidebar.css
/* Sidebar styles */
.sidebar {
    width: 250px;
    background-color: #2c3e50;
    color: #fff;
    padding: 20px;
}

.sidebar-header {
    text-align: center;
    margin-bottom: 30px;
}

.sidebar-header h3 {
    color: #fff;
    font-size: 24px;
}

.sidebar ul {
    list-style: none;
    padding: 0;
}

.sidebar ul li {
    margin-bottom: 15px;
}

.sidebar ul li a {
    color: #fff;
    text-decoration: none;
    font-size: 16px;
    display: block;
    padding: 10px;
    border-radius: 5px;
}

.sidebar ul li a:hover,
.sidebar ul li.active a {
    background-color: #3498db;
}
 
assets/css/table.css
/* Table styles */
.table-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.search input {
    padding: 8px 15px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 14px;
    width: 200px;
}

.data-table {
    width: 100%;
    border-collapse: collapse;
    background-color: #fff;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.data-table th,
.data-table td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

.data-table th {
    background-color: #f5f5f5;
    font-weight: 600;
    color: #2c3e50;
}

.data-table td {
    color: #34495e;
}

.status {
    padding: 5px 10px;
    border-radius: 5px;
    font-size: 12px;
    font-weight: 500;
}

.status.clean {
    background-color: #2ecc71;
    color: #fff;
}

.status.dirty {
    background-color: #e74c3c;
    color: #fff;
}

.pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 10px;
    margin-top: 20px;
}

.page-btn {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background-color: #fff;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.page-btn:hover {
    background-color: #f5f5f5;
}

.page-btn.active {
    background-color: #3498db;
    color: #fff;
    border-color: #3498db;
}

.dropdown {
    position: relative;
    display: inline-block;
}
.dropdown-btn {
    background: none;
    border: none;
    font-size: 20px;
    cursor: pointer;
    padding: 0 10px;
    color: var(--text-color);
}
.dropdown-content {
    display: none;
    position: absolute;
    right: 0;
    background-color: var(--container-bg);
    min-width: 160px;
    box-shadow: 0 8px 16px var(--shadow-color);
    z-index: 1;
    border-radius: 5px;
    border: 1px solid var(--border-color);
}
.dropdown-content a {
    color: var(--text-color);
    padding: 8px 16px;
    text-decoration: none;
    display: block;
    border-bottom: 1px solid var(--border-color);
}
.dropdown-content a:last-child {
    border-bottom: none;
}
.dropdown-content a:hover {
    background-color: var(--button-hover-bg);
    color: #fff;
}
.dark-mode .dropdown-btn {
    color: #fff;
}
.dark-mode .dropdown-content {
    background-color: #555;
}


assets/css/variables.css
/* Global variables */
:root {
    --background-color: #f0f4f8;
    --container-bg: rgba(255, 255, 255, 0.65);
    --text-color: #34495e;
    --title-color: #2c3e50;
    --border-color: #dcdcdc;
    --button-bg: #3498db;
    --button-hover-bg: #2980b9;
    --link-color: #3498db;
    --error-color: #e74c3c;
    --shadow-color: rgba(0, 0, 0, 0.1);
    --background-image: url('../images/Home-BG.png');
}

body.dark-mode {
    --background-color: #1a1a1a;
    --container-bg: rgba(80, 80, 80, 0.8);
    --text-color: #f0f0f0;
    --title-color: #ffffff;
    --border-color: #666666;
    --button-bg: #1e90ff;
    --button-hover-bg: #1c86ee;
    --link-color: #1e90ff;
    --error-color: #ff5555;
    --shadow-color: rgba(255, 255, 255, 0.2);
    --background-image: url('../images/darkbackground.png');
}

Assets (JS):

assets/js/dropdown.js
// assets/js/dropdown.js

// Xử lý dropdown
export function initDropdown() {
    document.querySelectorAll('.dropdown-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            const dropdownContent = this.nextElementSibling;
            const isVisible = dropdownContent.style.display === 'block';
            document.querySelectorAll('.dropdown-content').forEach(content => {
                content.style.display = 'none';
            });
            dropdownContent.style.display = isVisible ? 'none' : 'block';
        });
    });

    document.addEventListener('click', function(e) {
        if (!e.target.classList.contains('dropdown-btn')) {
            document.querySelectorAll('.dropdown-content').forEach(content => {
                content.style.display = 'none';
            });
        }
    });
}

// Khởi tạo dropdown khi trang tải
document.addEventListener('DOMContentLoaded', () => {
    initDropdown();
});


assets/js/error.js
document.addEventListener('DOMContentLoaded', function () {
    const contextPath = window.contextPath || '';
    fetch(contextPath + '/get-error')
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.text();
        })
        .then(errorMessage => {
            if (errorMessage) {
                const errorDiv = document.getElementById("error-message");
                if (errorDiv) {
                    errorDiv.textContent = errorMessage;
                    errorDiv.style.display = "block";
                }
            }
        })
        .catch(error => console.error('Error fetching error message:', error));
});

assets/js/language.js
    document.addEventListener('DOMContentLoaded', () => {
        const languageSelect = document.getElementById('languageSelect');
        if (languageSelect) {
            languageSelect.addEventListener('change', (e) => {
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = window.contextPath + '/settings';
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'language';
                input.value = e.target.value;
                form.appendChild(input);
                document.body.appendChild(form);
                form.submit();
            });
        }
    });


assets/js/main.js
import './theme.js';
import './language.js';
import './error.js';
import './modal.js';
import './dropdown.js';


assets/js/modal.js
// assets/js/modal.js

// Đóng modal
export function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    modal.classList.remove('active');
    setTimeout(() => modal.style.display = 'none', 300); // Chờ animation hoàn tất
}

// Hiển thị modal với hiệu ứng
export function showModal(modalId) {
    const modal = document.getElementById(modalId);
    modal.style.display = 'flex';
    setTimeout(() => modal.classList.add('active'), 10); // Thêm class sau khi display để chạy animation
}

// Hiển thị modal xác nhận
export function showConfirmModal(action, userId, contextPath, language) {
    const modal = document.getElementById('confirmModal');
    const message = document.getElementById('confirmMessage');
    const yesBtn = document.getElementById('confirmYes');

    if (action === 'delete') {
        message.textContent = language === 'vi' ? 'Bạn có chắc chắn muốn xóa người dùng này không?' : 'Are you sure you want to delete this user?';
        yesBtn.onclick = function() {
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = `${contextPath}/admin/users/delete`;
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = 'userId';
            input.value = userId;
            form.appendChild(input);
            document.body.appendChild(form);
            form.submit();
        };
    } else if (action === 'edit') {
        message.textContent = language === 'vi' ? 'Bạn có chắc chắn muốn chỉnh sửa thông tin người dùng này không?' : 'Are you sure you want to edit this user\'s information?';
        yesBtn.onclick = function() {
            window.location.href = `${contextPath}/admin/users/edit?userId=${userId}`;
        };
    }

    showModal('confirmModal');
}

// Tự động hiển thị notification modal nếu có
export function initNotificationModal() {
    if (document.getElementById('notificationModal')) {
        showModal('notificationModal');
    }
}

// Khởi tạo modal khi trang tải
document.addEventListener('DOMContentLoaded', () => {
    initNotificationModal();
});


assets/js/theme.js
document.addEventListener('DOMContentLoaded', () => {
    const themeSelect = document.getElementById('themeSelect');
    if (themeSelect) {
        themeSelect.addEventListener('change', (e) => {
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = window.contextPath + '/settings';
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = 'theme';
            input.value = e.target.value;
            form.appendChild(input);
            document.body.appendChild(form);
            form.submit();
        });
    }
});


Source Packages (Java Controllers):

com.oceanichotel.controller.AdminBookingController.java
package com.mycompany.oceanichotel.controllers.admin;

import com.mycompany.oceanichotel.models.Booking;
import com.mycompany.oceanichotel.models.User;
import com.mycompany.oceanichotel.services.admin.AdminBookingService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

@WebServlet("/admin/bookings/*")
public class AdminBookingController extends HttpServlet {

    private AdminBookingService bookingService;
    private static final Logger LOGGER = Logger.getLogger(AdminBookingController.class.getName());

    @Override
    public void init() throws ServletException {
        bookingService = new AdminBookingService();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String pathInfo = request.getPathInfo();
        try {
            if (pathInfo == null || pathInfo.equals("/")) {
                int page = request.getParameter("page") != null ? Integer.parseInt(request.getParameter("page")) : 1;
                String search = request.getParameter("search");

                List<Booking> bookings = bookingService.getBookings(page, search);
                int totalBookings = bookingService.getTotalBookings(search);
                int totalPages = (int) Math.ceil((double) totalBookings / 10);

                request.setAttribute("bookings", bookings);
                request.setAttribute("currentPage", page);
                request.setAttribute("totalPages", totalPages);
                request.getRequestDispatcher("/WEB-INF/views/admin/bookings.jsp").forward(request, response);
            } else if (pathInfo.equals("/history")) {
                int bookingId = Integer.parseInt(request.getParameter("bookingId"));
                // Chuyển hướng đến trang lịch sử thay đổi (chưa triển khai JSP)
                response.sendRedirect(request.getContextPath() + "/admin/bookings");
            }
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Database error in doGet", e);
            throw new ServletException("Database error", e);
        } catch (NumberFormatException e) {
            LOGGER.log(Level.WARNING, "Invalid bookingId in doGet", e);
            response.sendRedirect(request.getContextPath() + "/admin/bookings?error=invalid_input");
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String pathInfo = request.getPathInfo();
        try {
            if (pathInfo.equals("/update")) {
                int bookingId = Integer.parseInt(request.getParameter("bookingId"));
                String status = request.getParameter("status");
                bookingService.updateBookingStatus(bookingId, status, ((User) request.getSession().getAttribute("user")).getUserId());
                response.sendRedirect(request.getContextPath() + "/admin/bookings?message=update_success");
            }
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Database error in doPost", e);
            throw new ServletException("Database error", e);
        } catch (NumberFormatException e) {
            LOGGER.log(Level.WARNING, "Invalid bookingId in doPost", e);
            response.sendRedirect(request.getContextPath() + "/admin/bookings?error=invalid_input");
        }
    }
}


com.oceanichotel.controller.AdminDashboardController.java
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.mycompany.oceanichotel.controllers.admin;

import com.mycompany.oceanichotel.models.User;
import com.mycompany.oceanichotel.utils.DatabaseUtil;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;

/**
 *
 * @author annc1
 */
@WebServlet("/admin/dashboard")
public class AdminDashboardController extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        if (session != null && session.getAttribute("user") != null) {
            User user = (User) session.getAttribute("user");
            if ("admin".equals(user.getRole())) {
                try {
                    // Lấy dữ liệu tổng quan
                    int checkInToday = getCheckInToday();
                    int checkOutToday = getCheckOutToday();
                    int totalInHotel = getTotalInHotel();
                    int availableRooms = getAvailableRooms();
                    int occupiedRooms = getOccupiedRooms();

                    // Đặt dữ liệu vào request
                    request.setAttribute("checkInToday", checkInToday);
                    request.setAttribute("checkOutToday", checkOutToday);
                    request.setAttribute("totalInHotel", totalInHotel);
                    request.setAttribute("availableRooms", availableRooms);
                    request.setAttribute("occupiedRooms", occupiedRooms);
                    request.setAttribute("username", user.getUsername());

                    request.getRequestDispatcher("/WEB-INF/views/admin/dashboard.jsp").forward(request, response);
                    return;
                } catch (SQLException e) {
                    throw new ServletException("Database error", e);
                }
            }
        }
        response.sendRedirect(request.getContextPath() + "/login");
    }
    
    private int getCheckInToday() throws SQLException {
        String query = "SELECT COUNT(*) FROM Bookings WHERE check_in_date = ? AND status = 'Confirmed'";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setDate(1, java.sql.Date.valueOf(LocalDate.now()));
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return 0;
    }

    private int getCheckOutToday() throws SQLException {
        String query = "SELECT COUNT(*) FROM Bookings WHERE check_out_date = ? AND status = 'Confirmed'";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setDate(1, java.sql.Date.valueOf(LocalDate.now()));
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return 0;
    }
    
    private int getTotalInHotel() throws SQLException {
        String query = "SELECT COUNT(*) FROM Bookings WHERE check_in_date <= ? AND check_out_date >= ? AND status = 'Confirmed'";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            LocalDate today = LocalDate.now();
            stmt.setDate(1, java.sql.Date.valueOf(today));
            stmt.setDate(2, java.sql.Date.valueOf(today));
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return 0;
    }

    private int getAvailableRooms() throws SQLException {
        String query = "SELECT COUNT(*) FROM Rooms WHERE is_available = 1";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return 0;
    }

    private int getOccupiedRooms() throws SQLException {
        String query = "SELECT COUNT(*) FROM Rooms WHERE is_available = 0";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return 0;
    }
}


com.oceanichotel.controller.AdminReportController.java
package com.mycompany.oceanichotel.controllers.admin;

import com.mycompany.oceanichotel.services.admin.AdminReportService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

@WebServlet("/admin/reports/*")
public class AdminReportController extends HttpServlet {

    private AdminReportService reportService;
    private static final Logger LOGGER = Logger.getLogger(AdminReportController.class.getName());

    @Override
    public void init() throws ServletException {
        reportService = new AdminReportService();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            String reportType = request.getParameter("reportType") != null ? request.getParameter("reportType") : "daily";
            String startDateStr = request.getParameter("startDate");
            String endDateStr = request.getParameter("endDate");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date startDate = startDateStr != null && !startDateStr.isEmpty() ? sdf.parse(startDateStr) : null;
            Date endDate = endDateStr != null && !endDateStr.isEmpty() ? sdf.parse(endDateStr) : null;

            double totalRevenue = reportService.getRevenue(reportType, startDate, endDate);
            int totalRooms = reportService.getTotalRooms();
            int availableRooms = reportService.getAvailableRooms();
            int confirmedBookings = reportService.getConfirmedBookings(reportType, startDate, endDate);
            double utilizationRate = totalRooms > 0 ? (double) (totalRooms - availableRooms) / totalRooms * 100 : 0;

            request.setAttribute("totalRevenue", String.format("%.2f", totalRevenue));
            request.setAttribute("totalRooms", totalRooms);
            request.setAttribute("availableRooms", availableRooms);
            request.setAttribute("confirmedBookings", confirmedBookings);
            request.setAttribute("utilizationRate", String.format("%.2f", utilizationRate));
            request.getRequestDispatcher("/WEB-INF/views/admin/reports.jsp").forward(request, response);
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Database error in doGet", e);
            throw new ServletException("Database error", e);
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "Error parsing dates", e);
            throw new ServletException("Invalid date format", e);
        }
    }
}


com.oceanichotel.controller.AdminRoomController.java
package com.mycompany.oceanichotel.controllers.admin;

import com.mycompany.oceanichotel.models.Room;
import com.mycompany.oceanichotel.models.RoomType;
import com.mycompany.oceanichotel.services.admin.AdminRoomService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList; // Thêm import này
import java.util.List;
import java.util.logging.Logger;
import java.util.logging.Level;

@WebServlet("/admin/rooms/*")
public class AdminRoomController extends HttpServlet {

    private AdminRoomService roomService;
    private static final Logger LOGGER = Logger.getLogger(AdminRoomController.class.getName());

    @Override
    public void init() throws ServletException {
        roomService = new AdminRoomService();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String pathInfo = request.getPathInfo();
        try {
            if (pathInfo == null || pathInfo.equals("/")) {
                int page = request.getParameter("page") != null ? Integer.parseInt(request.getParameter("page")) : 1;
                String search = request.getParameter("search");
                String status = request.getParameter("status");
                String typeId = request.getParameter("typeId");

                List<Room> rooms = roomService.getRooms(page, search, status, typeId);
                int totalRooms = roomService.getTotalRooms(search, status, typeId);
                int totalPages = (int) Math.ceil((double) totalRooms / 10);
                List<RoomType> roomTypes = roomService.getAllRoomTypes();

                request.setAttribute("rooms", rooms);
                request.setAttribute("currentPage", page);
                request.setAttribute("totalPages", totalPages);
                request.setAttribute("roomTypes", roomTypes);
                request.getRequestDispatcher("/WEB-INF/views/admin/rooms.jsp").forward(request, response);
            } else if (pathInfo.equals("/add")) {
                List<RoomType> roomTypes = roomService.getAllRoomTypes();
                request.setAttribute("roomTypes", roomTypes);
                request.getRequestDispatcher("/WEB-INF/views/admin/add_room.jsp").forward(request, response);
            } else if (pathInfo.equals("/edit")) {
                int roomId = Integer.parseInt(request.getParameter("roomId"));
                Room room = roomService.getRoomById(roomId);
                List<RoomType> roomTypes = roomService.getAllRoomTypes();
                if (room != null) {
                    request.setAttribute("room", room);
                    request.setAttribute("roomTypes", roomTypes);
                    request.getRequestDispatcher("/WEB-INF/views/admin/edit_room.jsp").forward(request, response);
                } else {
                    response.sendRedirect(request.getContextPath() + "/admin/rooms?error=room_not_found");
                }
            }
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Database error in doGet", e);
            throw new ServletException("Database error", e);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String pathInfo = request.getPathInfo();
        String language = (String) request.getSession().getAttribute("language");
        if (language == null) {
            language = "en";
        }

        try {
            if (pathInfo.equals("/add")) {
                Room room = new Room();
                String roomNumber = request.getParameter("roomNumber");
                if (roomNumber == null || roomNumber.trim().isEmpty()) {
                    throw new IllegalArgumentException("Room number is required.");
                }
                room.setRoomNumber(roomNumber);

                int typeId = Integer.parseInt(request.getParameter("typeId"));
                RoomType roomType = roomService.getRoomTypeById(typeId);
                if (roomType == null) {
                    throw new SQLException("Invalid room type ID: " + typeId);
                }
                room.setRoomType(roomType);

                room.setPricePerNight(Double.parseDouble(request.getParameter("pricePerNight")));
                room.setAvailable("true".equals(request.getParameter("isAvailable")));
                room.setDescription(request.getParameter("description"));
                room.setMaxAdults(Integer.parseInt(request.getParameter("maxAdults")));
                room.setMaxChildren(Integer.parseInt(request.getParameter("maxChildren")));

                roomService.addRoom(room);
                response.sendRedirect(request.getContextPath() + "/admin/rooms?message=add_success");
            } else if (pathInfo.equals("/update")) {
                int roomId = Integer.parseInt(request.getParameter("roomId"));
                Room room = new Room();
                room.setRoomId(roomId);
                String roomNumber = request.getParameter("roomNumber");
                if (roomNumber == null || roomNumber.trim().isEmpty()) {
                    throw new IllegalArgumentException("Room number is required.");
                }
                room.setRoomNumber(roomNumber);

                int typeId = Integer.parseInt(request.getParameter("typeId"));
                RoomType roomType = roomService.getRoomTypeById(typeId);
                if (roomType == null) {
                    throw new SQLException("Invalid room type ID: " + typeId);
                }
                room.setRoomType(roomType);

                room.setPricePerNight(Double.parseDouble(request.getParameter("pricePerNight")));
                room.setAvailable("true".equals(request.getParameter("isAvailable")));
                room.setDescription(request.getParameter("description"));
                room.setMaxAdults(Integer.parseInt(request.getParameter("maxAdults")));
                room.setMaxChildren(Integer.parseInt(request.getParameter("maxChildren")));

                roomService.updateRoom(room);
                response.sendRedirect(request.getContextPath() + "/admin/rooms?message=update_success");
            } else if (pathInfo.equals("/delete")) {
                int roomId = Integer.parseInt(request.getParameter("roomId"));
                roomService.deleteRoom(roomId);
                response.sendRedirect(request.getContextPath() + "/admin/rooms?message=delete_success");
            }
        } catch (IllegalArgumentException e) {
            LOGGER.log(Level.WARNING, "Invalid input in doPost", e);
            request.setAttribute("error", language.equals("vi") ? "Dữ liệu không hợp lệ: " + e.getMessage() : "Invalid input: " + e.getMessage());
            handleError(request, response, pathInfo);
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Database error in doPost", e);
            request.setAttribute("error", language.equals("vi") ? "Lỗi cơ sở dữ liệu: " + e.getMessage() : "Database error: " + e.getMessage());
            handleError(request, response, pathInfo);
        }
    }

    private void handleError(HttpServletRequest request, HttpServletResponse response, String pathInfo) throws ServletException, IOException {
        List<RoomType> roomTypes;
        try {
            roomTypes = roomService.getAllRoomTypes();
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Failed to retrieve room types", e);
            roomTypes = new ArrayList<>(); // Trả về danh sách rỗng nếu lỗi
        }
        request.setAttribute("roomTypes", roomTypes);

        if (pathInfo.equals("/add")) {
            Room room = new Room();
            room.setRoomNumber(request.getParameter("roomNumber"));
            room.setPricePerNight(parseDoubleOrDefault(request.getParameter("pricePerNight"), 0.0));
            room.setAvailable("true".equals(request.getParameter("isAvailable")));
            room.setDescription(request.getParameter("description"));
            room.setMaxAdults(parseIntOrDefault(request.getParameter("maxAdults"), 0));
            room.setMaxChildren(parseIntOrDefault(request.getParameter("maxChildren"), 0));
            try {
                int typeId = Integer.parseInt(request.getParameter("typeId"));
                RoomType roomType = roomService.getRoomTypeById(typeId);
                room.setRoomType(roomType);
            } catch (NumberFormatException | SQLException ignored) {
                // Không gán RoomType nếu lỗi
            }
            request.setAttribute("room", room);
            request.getRequestDispatcher("/WEB-INF/views/admin/add_room.jsp").forward(request, response);
        } else if (pathInfo.equals("/update")) {
            int roomId = parseIntOrDefault(request.getParameter("roomId"), -1);
            Room room;
            try {
                room = roomService.getRoomById(roomId);
                if (room != null) {
                    room.setRoomNumber(request.getParameter("roomNumber"));
                    room.setPricePerNight(parseDoubleOrDefault(request.getParameter("pricePerNight"), room.getPricePerNight()));
                    room.setAvailable("true".equals(request.getParameter("isAvailable")));
                    room.setDescription(request.getParameter("description"));
                    room.setMaxAdults(parseIntOrDefault(request.getParameter("maxAdults"), room.getMaxAdults()));
                    room.setMaxChildren(parseIntOrDefault(request.getParameter("maxChildren"), room.getMaxChildren()));
                    int typeId = Integer.parseInt(request.getParameter("typeId"));
                    RoomType roomType = roomService.getRoomTypeById(typeId);
                    room.setRoomType(roomType);
                }
            } catch (SQLException e) {
                LOGGER.log(Level.SEVERE, "Failed to retrieve room for update", e);
                room = null;
            }
            request.setAttribute("room", room);
            request.getRequestDispatcher("/WEB-INF/views/admin/edit_room.jsp").forward(request, response);
        } else {
            request.getRequestDispatcher("/WEB-INF/views/admin/rooms.jsp").forward(request, response);
        }
    }

    private int parseIntOrDefault(String value, int defaultValue) {
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e) {
            return defaultValue;
        }
    }

    private double parseDoubleOrDefault(String value, double defaultValue) {
        try {
            return Double.parseDouble(value);
        } catch (NumberFormatException e) {
            return defaultValue;
        }
    }
}


com.oceanichotel.controller.AdminRoomTypeController.java
package com.mycompany.oceanichotel.controllers.admin;

import com.mycompany.oceanichotel.models.RoomType;
import com.mycompany.oceanichotel.models.RoomTypeImage;
import com.mycompany.oceanichotel.services.admin.AdminRoomTypeService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.Part;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Logger;
import java.util.logging.Level;
import java.util.stream.Collectors;

@WebServlet("/admin/room-types/*")
@MultipartConfig(fileSizeThreshold = 1024 * 1024 * 2, maxFileSize = 1024 * 1024 * 10, maxRequestSize = 1024 * 1024 * 50)
public class AdminRoomTypeController extends HttpServlet {

    private AdminRoomTypeService roomTypeService;
    private static final Logger LOGGER = Logger.getLogger(AdminRoomTypeController.class.getName());
    private static final String UPLOAD_DIR = "assets/images/room-types";

    @Override
    public void init() throws ServletException {
        roomTypeService = new AdminRoomTypeService();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String pathInfo = request.getPathInfo();
        try {
            if (pathInfo == null || pathInfo.equals("/")) {
                List<RoomType> roomTypes = roomTypeService.getAllRoomTypes();
                request.setAttribute("roomTypes", roomTypes);
                request.getRequestDispatcher("/WEB-INF/views/admin/room_types.jsp").forward(request, response);
            } else if (pathInfo.equals("/add")) {
                request.getRequestDispatcher("/WEB-INF/views/admin/add_room_type.jsp").forward(request, response);
            } else if (pathInfo.equals("/edit")) {
                int typeId = Integer.parseInt(request.getParameter("typeId"));
                RoomType roomType = roomTypeService.getRoomTypeById(typeId);
                if (roomType != null) {
                    request.setAttribute("roomType", roomType);
                    request.getRequestDispatcher("/WEB-INF/views/admin/edit_room_type.jsp").forward(request, response);
                } else {
                    response.sendRedirect(request.getContextPath() + "/admin/room-types?error=type_not_found");
                }
            }
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Database error in doGet", e);
            throw new ServletException("Database error", e);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String pathInfo = request.getPathInfo();
        String language = (String) request.getSession().getAttribute("language");
        if (language == null) language = "en";

        try {
            if (pathInfo.equals("/add")) {
                RoomType roomType = new RoomType();
                roomType.setTypeName(request.getParameter("typeName"));
                roomType.setDefaultPrice(Double.parseDouble(request.getParameter("defaultPrice")));
                roomType.setMaxAdults(Integer.parseInt(request.getParameter("maxAdults")));
                roomType.setMaxChildren(Integer.parseInt(request.getParameter("maxChildren")));
                roomType.setDescription(request.getParameter("description"));

                List<Part> fileParts = request.getParts().stream()
                        .filter(part -> "images".equals(part.getName()) && part.getSize() > 0)
                        .collect(Collectors.toList());
                String uploadPath = getServletContext().getRealPath("") + File.separator + UPLOAD_DIR;
                File uploadDir = new File(uploadPath);
                if (!uploadDir.exists()) uploadDir.mkdir();

                for (int i = 0; i < fileParts.size(); i++) {
                    Part filePart = fileParts.get(i);
                    String fileName = extractFileName(filePart);
                    filePart.write(uploadPath + File.separator + fileName);
                    RoomTypeImage image = new RoomTypeImage();
                    image.setImageUrl(fileName);
                    image.setPrimary(i == 0); // Hình đầu tiên là chính
                    roomType.addImage(image);
                }

                roomTypeService.addRoomType(roomType);
                response.sendRedirect(request.getContextPath() + "/admin/room-types?message=add_success");
            } else if (pathInfo.equals("/update")) {
                int typeId = Integer.parseInt(request.getParameter("typeId"));
                RoomType roomType = new RoomType();
                roomType.setTypeId(typeId);
                roomType.setTypeName(request.getParameter("typeName"));
                roomType.setDefaultPrice(Double.parseDouble(request.getParameter("defaultPrice")));
                roomType.setMaxAdults(Integer.parseInt(request.getParameter("maxAdults")));
                roomType.setMaxChildren(Integer.parseInt(request.getParameter("maxChildren")));
                roomType.setDescription(request.getParameter("description"));

                List<Part> fileParts = request.getParts().stream()
                        .filter(part -> "images".equals(part.getName()) && part.getSize() > 0)
                        .collect(Collectors.toList());
                String uploadPath = getServletContext().getRealPath("") + File.separator + UPLOAD_DIR;
                File uploadDir = new File(uploadPath);
                if (!uploadDir.exists()) uploadDir.mkdir();

                if (!fileParts.isEmpty()) {
                    RoomType existingRoomType = roomTypeService.getRoomTypeById(typeId);
                    roomType.setImages(existingRoomType.getImages());
                    for (int i = 0; i < fileParts.size(); i++) {
                        Part filePart = fileParts.get(i);
                        String fileName = extractFileName(filePart);
                        filePart.write(uploadPath + File.separator + fileName);
                        RoomTypeImage image = new RoomTypeImage();
                        image.setImageUrl(fileName);
                        image.setPrimary(i == 0 && roomType.getImages().isEmpty());
                        roomTypeService.addRoomTypeImage(typeId, image);
                    }
                }

                roomTypeService.updateRoomType(roomType);
                response.sendRedirect(request.getContextPath() + "/admin/room-types?message=update_success");
            } else if (pathInfo.equals("/delete")) {
                int typeId = Integer.parseInt(request.getParameter("typeId"));
                roomTypeService.deleteRoomType(typeId);
                response.sendRedirect(request.getContextPath() + "/admin/room-types?message=delete_success");
            } else if (pathInfo.equals("/delete-image")) {
                int imageId = Integer.parseInt(request.getParameter("imageId"));
                roomTypeService.deleteRoomTypeImage(imageId);
                response.sendRedirect(request.getContextPath() + "/admin/room-types/edit?typeId=" + request.getParameter("typeId"));
            } else if (pathInfo.equals("/set-primary")) {
                int typeId = Integer.parseInt(request.getParameter("typeId"));
                int imageId = Integer.parseInt(request.getParameter("imageId"));
                roomTypeService.setPrimaryImage(typeId, imageId);
                response.sendRedirect(request.getContextPath() + "/admin/room-types/edit?typeId=" + typeId);
            }
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Database error in doPost", e);
            request.setAttribute("error", language.equals("vi") ? "Lỗi cơ sở dữ liệu!" : "Database error!");
            request.getRequestDispatcher("/WEB-INF/views/admin/edit_room_type.jsp").forward(request, response);
        }
    }

    private String extractFileName(Part part) {
        String contentDisp = part.getHeader("content-disposition");
        String[] items = contentDisp.split(";");
        for (String s : items) {
            if (s.trim().startsWith("filename")) {
                return s.substring(s.indexOf("=") + 2, s.length() - 1);
            }
        }
        return "";
    }
}

com.oceanichotel.controller.AdminSettingsController.java
package com.mycompany.oceanichotel.controllers.admin;

import com.mycompany.oceanichotel.services.admin.AdminSettingsService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

@WebServlet("/admin/settings/*")
public class AdminSettingsController extends HttpServlet {

    private AdminSettingsService settingsService;
    private static final Logger LOGGER = Logger.getLogger(AdminSettingsController.class.getName());

    @Override
    public void init() throws ServletException {
        settingsService = new AdminSettingsService();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.getRequestDispatcher("/WEB-INF/views/admin/settings.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String pathInfo = request.getPathInfo();
        try {
            if (pathInfo.equals("/update")) {
                String defaultLanguage = request.getParameter("defaultLanguage");
                String defaultTheme = request.getParameter("defaultTheme");
                settingsService.updateSettings(defaultLanguage, defaultTheme);
                request.getSession().setAttribute("language", defaultLanguage);
                request.getSession().setAttribute("theme", defaultTheme);
                response.sendRedirect(request.getContextPath() + "/admin/settings?message=update_success");
            }
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Database error in doPost", e);
            request.setAttribute("error", "Failed to update settings: " + e.getMessage());
            request.getRequestDispatcher("/WEB-INF/views/admin/settings.jsp").forward(request, response);
        }
    }
}


com.oceanichotel.controller.AdminTransactionController.java
package com.mycompany.oceanichotel.controllers.admin;

import com.mycompany.oceanichotel.models.Transaction;
import com.mycompany.oceanichotel.services.admin.AdminTransactionService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

@WebServlet("/admin/transactions/*")
public class AdminTransactionController extends HttpServlet {

    private AdminTransactionService transactionService;
    private static final Logger LOGGER = Logger.getLogger(AdminTransactionController.class.getName());

    @Override
    public void init() throws ServletException {
        transactionService = new AdminTransactionService();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String pathInfo = request.getPathInfo();
        try {
            if (pathInfo == null || pathInfo.equals("/")) {
                int page = request.getParameter("page") != null ? Integer.parseInt(request.getParameter("page")) : 1;
                String search = request.getParameter("search");

                List<Transaction> transactions = transactionService.getTransactions(page, search);
                int totalTransactions = transactionService.getTotalTransactions(search);
                double totalRevenue = transactionService.getTotalRevenue();
                int successfulTransactions = transactionService.getTransactionCountByStatus("Success");
                int failedTransactions = transactionService.getTransactionCountByStatus("Failed");

                request.setAttribute("transactions", transactions);
                request.setAttribute("currentPage", page);
                request.setAttribute("totalPages", (int) Math.ceil((double) totalTransactions / 10));
                request.setAttribute("totalRevenue", totalRevenue);
                request.setAttribute("successfulTransactions", successfulTransactions);
                request.setAttribute("failedTransactions", failedTransactions);
                request.getRequestDispatcher("/WEB-INF/views/admin/transactions.jsp").forward(request, response);
            }
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Database error in doGet", e);
            throw new ServletException("Database error", e);
        } catch (NumberFormatException e) {
            LOGGER.log(Level.WARNING, "Invalid page in doGet", e);
            response.sendRedirect(request.getContextPath() + "/admin/transactions?error=invalid_input");
        }
    }
}


com.oceanichotel.controller.AdminUserController.java
package com.mycompany.oceanichotel.controllers.admin;

import com.mycompany.oceanichotel.models.User;
import com.mycompany.oceanichotel.services.admin.AdminUserService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Logger;
import java.util.logging.Level;

@WebServlet("/admin/users/*")
public class AdminUserController extends HttpServlet {

    private AdminUserService userService;
    private static final Logger LOGGER = Logger.getLogger(AdminUserController.class.getName());

    @Override
    public void init() throws ServletException {
        userService = new AdminUserService();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String pathInfo = request.getPathInfo();
        try {
            if (pathInfo == null || pathInfo.equals("/")) {
                int page = request.getParameter("page") != null ? Integer.parseInt(request.getParameter("page")) : 1;
                String search = request.getParameter("search");

                List<User> users = userService.getUsers(page, search);
                int totalUsers = userService.getTotalUsers(search);
                int totalPages = (int) Math.ceil((double) totalUsers / 10);

                request.setAttribute("users", users);
                request.setAttribute("currentPage", page);
                request.setAttribute("totalPages", totalPages);
                request.getRequestDispatcher("/WEB-INF/views/admin/users.jsp").forward(request, response);
            } else if (pathInfo.equals("/add")) {
                request.getRequestDispatcher("/WEB-INF/views/admin/add_user.jsp").forward(request, response);
            } else if (pathInfo.equals("/edit")) {
                int userId = Integer.parseInt(request.getParameter("userId"));
                User user = userService.getUserById(userId);
                if (user != null) {
                    request.setAttribute("user", user);
                    request.getRequestDispatcher("/WEB-INF/views/admin/edit_user.jsp").forward(request, response);
                } else {
                    response.sendRedirect(request.getContextPath() + "/admin/users?error=user_not_found");
                }
            }
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Database error in doGet", e);
            throw new ServletException("Database error", e);
        } catch (NumberFormatException e) {
            LOGGER.log(Level.WARNING, "Invalid userId in doGet: " + request.getParameter("userId"), e);
            response.sendRedirect(request.getContextPath() + "/admin/users?error=invalid_user_id");
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String pathInfo = request.getPathInfo();
        String language = (String) request.getSession().getAttribute("language");
        if (language == null) {
            language = "en";
            request.getSession().setAttribute("language", language);
        }
        try {
            if (pathInfo.equals("/add")) {
                User user = new User();
                user.setUsername(request.getParameter("username"));
                user.setEmail(request.getParameter("email"));
                user.setPassword(request.getParameter("password")); // Nên mã hóa mật khẩu trong thực tế
                user.setRole(request.getParameter("role"));
                try {
                    userService.addUser(user);
                    response.sendRedirect(request.getContextPath() + "/admin/users?message=add_success");
                } catch (SQLException e) {
                    if (e.getMessage().contains("Username already exists")) {
                        request.setAttribute("error", language.equals("vi") ? "Tên người dùng đã tồn tại!" : "Username already exists!");
                    } else if (e.getMessage().contains("Email already exists")) {
                        request.setAttribute("error", language.equals("vi") ? "Email đã tồn tại!" : "Email already exists!");
                    } else {
                        throw e;
                    }
                    request.getRequestDispatcher("/WEB-INF/views/admin/add_user.jsp").forward(request, response);
                }
            } else if (pathInfo.equals("/update")) {
                int userId = Integer.parseInt(request.getParameter("userId"));
                User user = new User();
                user.setUserId(userId);
                user.setUsername(request.getParameter("username"));
                user.setEmail(request.getParameter("email"));
                String password = request.getParameter("password");
                if (password != null && !password.isEmpty()) {
                    user.setPassword(password); // Nên mã hóa mật khẩu trong thực tế
                }
                user.setRole(request.getParameter("role"));
                try {
                    userService.updateUser(user);
                    response.sendRedirect(request.getContextPath() + "/admin/users?message=update_success");
                } catch (SQLException e) {
                    if (e.getMessage().contains("Username already exists")) {
                        request.setAttribute("error", language.equals("vi") ? "Tên người dùng đã tồn tại!" : "Username already exists!");
                    } else if (e.getMessage().contains("Email already exists")) {
                        request.setAttribute("error", language.equals("vi") ? "Email đã tồn tại!" : "Email already exists!");
                    } else {
                        throw e;
                    }
                    request.setAttribute("user", user);
                    request.getRequestDispatcher("/WEB-INF/views/admin/edit_user.jsp").forward(request, response);
                }
            } else if (pathInfo.equals("/delete")) {
                int userId = Integer.parseInt(request.getParameter("userId"));
                userService.deleteUser(userId);
                response.sendRedirect(request.getContextPath() + "/admin/users?message=delete_success");
            }
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Database error in doPost", e);
            throw new ServletException("Database error", e);
        } catch (NumberFormatException e) {
            LOGGER.log(Level.WARNING, "Invalid userId in doPost: " + request.getParameter("userId"), e);
            response.sendRedirect(request.getContextPath() + "/admin/users?error=invalid_input");
        }
    }
}


com.mycompany.oceanichotel.controllers.user
ErrorHandlerServlet
package com.mycompany.oceanichotel.controllers.user;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import jakarta.servlet.annotation.WebServlet;

import java.io.IOException;

@WebServlet("/get-error")
public class ErrorHandlerServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        String error = (session != null && session.getAttribute("error") != null)
                ? (String) session.getAttribute("error")
                : "";
        if (session != null) {
            session.removeAttribute("error");
        }
        response.setContentType("text/plain");
        response.getWriter().write(error);
    }
}


IndexServlet
package com.mycompany.oceanichotel.controllers.user;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@WebServlet("/index")
public class IndexServlet extends HttpServlet {
    private static final Logger logger = LoggerFactory.getLogger(IndexServlet.class);

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        logger.info("Handling request for URL: {}", request.getRequestURI());
        logger.info("Forwarding to login.jsp");
        request.getRequestDispatcher("/WEB-INF/views/public/login.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        doGet(request, response);
    }
}




SettingsServlet.java
package com.mycompany.oceanichotel.controllers.user;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import jakarta.servlet.annotation.WebServlet;

import java.io.IOException;

@WebServlet("/settings")
public class SettingsServlet extends HttpServlet {
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession();
        
        String language = request.getParameter("language");
        if (language != null && (language.equals("en") || language.equals("vi"))) {
            session.setAttribute("language", language);
        }

        String theme = request.getParameter("theme");
        if (theme != null && (theme.equals("light") || theme.equals("dark"))) {
            session.setAttribute("theme", theme);
        }

        String referer = request.getHeader("Referer");
        response.sendRedirect(referer != null ? referer : request.getContextPath() + "/admin/users");
    }
}


.UserDashboardController.java
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.mycompany.oceanichotel.controllers.user;

import com.mycompany.oceanichotel.models.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;

/**
 *
 * @author annc1
 */
@WebServlet("/user/dashboard")
public class UserDashboardController extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        if (session != null && session.getAttribute("user") != null) {
            User user = (User) session.getAttribute("user");
            if ("user".equals(user.getRole())) {
                request.setAttribute("username", user.getUsername());
                request.getRequestDispatcher("/WEB-INF/views/public/dashboard.jsp").forward(request, response);
                return;
            }
        }
        response.sendRedirect(request.getContextPath() + "/login");
    }
}


LoginController
package com.mycompany.oceanichotel.controllers.user;

import com.mycompany.oceanichotel.models.User;
import com.mycompany.oceanichotel.services.user.UserService;
import com.mycompany.oceanichotel.utils.DatabaseUtil;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

@WebServlet("/login")
public class LoginController extends HttpServlet {

    private UserService userService;

    @Override
    public void init() throws ServletException {
        userService = new UserService();
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        req.getRequestDispatcher("/WEB-INF/views/public/login.jsp").forward(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String username = req.getParameter("username");
        String password = req.getParameter("password");

        try {
            User user = userService.loginUser(username, password);
            if (user != null) {
                HttpSession session = req.getSession();
                session.setAttribute("user", user);

                String ipAddress = req.getRemoteAddr();
                try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(
                        "INSERT INTO Login_History (user_id, ip_address) VALUES (?, ?)")) {
                    stmt.setInt(1, user.getUserId());
                    stmt.setString(2, ipAddress);
                    stmt.executeUpdate();
                } catch (SQLException e) {
                    throw new ServletException("Error logging login history", e);
                }

                if ("admin".equals(user.getRole())) {
                    resp.sendRedirect(req.getContextPath() + "/admin/dashboard");
                } else {
                    resp.sendRedirect(req.getContextPath() + "/user/dashboard");
                    
                }

            } else {
                req.setAttribute("error", "Invalid username or password");
                req.getRequestDispatcher("/WEB-INF/views/public/login.jsp").forward(req, resp);
            }
        } catch (SQLException e) {
            throw new ServletException("Database error", e);
        }
    }
}


LogoutController
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.mycompany.oceanichotel.controllers.user;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;
/**
 *
 * @author annc1
 */
@WebServlet("/logout")
public class LogoutController extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        HttpSession session = req.getSession(false);
        if (session != null) {
            session.invalidate();
        }
        resp.sendRedirect(req.getContextPath() + "/login");
    }
}


RegisterController
package com.mycompany.oceanichotel.controllers.user;

import com.mycompany.oceanichotel.models.User;
import com.mycompany.oceanichotel.services.user.UserService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.sql.SQLException;

@WebServlet("/register")
public class RegisterController extends HttpServlet {
    private UserService userService;

    @Override
    public void init() throws ServletException {
        userService = new UserService();
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        req.getRequestDispatcher("/WEB-INF/views/public/register.jsp").forward(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String username = req.getParameter("username");
        String email = req.getParameter("email");
        String password = req.getParameter("password");

        User user = new User(username, password, email);
        try {
            userService.registerUser(user);
            resp.sendRedirect(req.getContextPath() + "/login"); // Đã đúng: chuyển đến login
        } catch (SQLException e) {
            req.setAttribute("error", e.getMessage());
            req.getRequestDispatcher("/WEB-INF/views/public/register.jsp").forward(req, resp);
        }
    }
}


com.oceanichotel.model.Booking.java
package com.mycompany.oceanichotel.models;

import java.util.Date;

public class Booking {
    private int bookingId;
    private int userId;
    private int roomId;
    private Date checkInDate;
    private Date checkOutDate;
    private double totalPrice;
    private String status;

    // Getters and Setters
    public int getBookingId() { return bookingId; }
    public void setBookingId(int bookingId) { this.bookingId = bookingId; }
    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }
    public int getRoomId() { return roomId; }
    public void setRoomId(int roomId) { this.roomId = roomId; }
    public Date getCheckInDate() { return checkInDate; }
    public void setCheckInDate(Date checkInDate) { this.checkInDate = checkInDate; }
    public Date getCheckOutDate() { return checkOutDate; }
    public void setCheckOutDate(Date checkOutDate) { this.checkOutDate = checkOutDate; }
    public double getTotalPrice() { return totalPrice; }
    public void setTotalPrice(double totalPrice) { this.totalPrice = totalPrice; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}


com.oceanichotel.model.LoginHistory.java
package com.mycompany.oceanichotel.models;

import java.sql.Timestamp;

public class LoginHistory {
    private int loginId;
    private int userId;
    private Timestamp loginTime;
    private String ipAddress;

    // Getters and Setters
    public int getLoginId() { return loginId; }
    public void setLoginId(int loginId) { this.loginId = loginId; }
    public int getUserId() { return userId; }
    public void setUserId(int userId) { this.userId = userId; }
    public Timestamp getLoginTime() { return loginTime; }
    public void setLoginTime(Timestamp loginTime) { this.loginTime = loginTime; }
    public String getIpAddress() { return ipAddress; }
    public void setIpAddress(String ipAddress) { this.ipAddress = ipAddress; }
}

com.oceanichotel.model.Room.java
package com.mycompany.oceanichotel.models;

import java.sql.Timestamp;

public class Room {
    private int roomId;
    private String roomNumber;
    private RoomType roomType;
    private double pricePerNight;
    private boolean isAvailable;
    private String description;
    private int maxAdults;
    private int maxChildren;
    private Timestamp createdAt;

    // Getters và Setters
    public int getRoomId() { return roomId; }
    public void setRoomId(int roomId) { this.roomId = roomId; }
    public String getRoomNumber() { return roomNumber; }
    public void setRoomNumber(String roomNumber) { this.roomNumber = roomNumber; }
    public RoomType getRoomType() { return roomType; }
    public void setRoomType(RoomType roomType) { this.roomType = roomType; }
    public double getPricePerNight() { return pricePerNight; }
    public void setPricePerNight(double pricePerNight) { this.pricePerNight = pricePerNight; }
    public boolean isAvailable() { return isAvailable; }
    public void setAvailable(boolean available) { isAvailable = available; }
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
    public int getMaxAdults() { return maxAdults; }
    public void setMaxAdults(int maxAdults) { this.maxAdults = maxAdults; }
    public int getMaxChildren() { return maxChildren; }
    public void setMaxChildren(int maxChildren) { this.maxChildren = maxChildren; }
    public Timestamp getCreatedAt() { return createdAt; }
    public void setCreatedAt(Timestamp createdAt) { this.createdAt = createdAt; }
}

com.oceanichotel.model.RoomImage.java
package com.mycompany.oceanichotel.models;

import java.sql.Timestamp;

public class RoomImage {
    private int imageId;
    private int roomId;
    private String imageUrl;
    private boolean isPrimary;
    private Timestamp createdAt;

    // Getters và Setters
    public int getImageId() { return imageId; }
    public void setImageId(int imageId) { this.imageId = imageId; }
    public int getRoomId() { return roomId; }
    public void setRoomId(int roomId) { this.roomId = roomId; }
    public String getImageUrl() { return imageUrl; }
    public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; }
    public boolean isPrimary() { return isPrimary; }
    public void setPrimary(boolean primary) { isPrimary = primary; }
    public Timestamp getCreatedAt() { return createdAt; }
    public void setCreatedAt(Timestamp createdAt) { this.createdAt = createdAt; }
}


com.oceanichotel.model.RoomType.java
package com.mycompany.oceanichotel.models;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

public class RoomType {
    private int typeId;
    private String typeName;
    private double defaultPrice;
    private int maxAdults;
    private int maxChildren;
    private String description;
    private Timestamp createdAt;
    private List<RoomTypeImage> images = new ArrayList<>();

    // Getters và Setters
    public int getTypeId() { return typeId; }
    public void setTypeId(int typeId) { this.typeId = typeId; }
    public String getTypeName() { return typeName; }
    public void setTypeName(String typeName) { this.typeName = typeName; }
    public double getDefaultPrice() { return defaultPrice; }
    public void setDefaultPrice(double defaultPrice) { this.defaultPrice = defaultPrice; }
    public int getMaxAdults() { return maxAdults; }
    public void setMaxAdults(int maxAdults) { this.maxAdults = maxAdults; }
    public int getMaxChildren() { return maxChildren; }
    public void setMaxChildren(int maxChildren) { this.maxChildren = maxChildren; }
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
    public Timestamp getCreatedAt() { return createdAt; }
    public void setCreatedAt(Timestamp createdAt) { this.createdAt = createdAt; }
    public List<RoomTypeImage> getImages() { return images; }
    public void setImages(List<RoomTypeImage> images) { this.images = images; }
    public void addImage(RoomTypeImage image) { this.images.add(image); }

    // Lấy hình ảnh chính
    public RoomTypeImage getPrimaryImage() {
        return images.stream().filter(RoomTypeImage::isPrimary).findFirst().orElse(null);
    }
}

com.oceanichotel.model.RoomTypeImage.java
package com.mycompany.oceanichotel.models;

import java.sql.Timestamp;

public class RoomTypeImage {
    private int imageId;
    private int typeId;
    private String imageUrl;
    private boolean isPrimary;
    private Timestamp createdAt;

    // Getters và Setters
    public int getImageId() { return imageId; }
    public void setImageId(int imageId) { this.imageId = imageId; }
    public int getTypeId() { return typeId; }
    public void setTypeId(int typeId) { this.typeId = typeId; }
    public String getImageUrl() { return imageUrl; }
    public void setImageUrl(String imageUrl) { this.imageUrl = imageUrl; }
    public boolean isPrimary() { return isPrimary; }
    public void setPrimary(boolean primary) { isPrimary = primary; }
    public Timestamp getCreatedAt() { return createdAt; }
    public void setCreatedAt(Timestamp createdAt) { this.createdAt = createdAt; }
}


com.oceanichotel.model.Transaction.java
package com.mycompany.oceanichotel.models;

import java.sql.Timestamp;

public class Transaction {
    private int transactionId;
    private int bookingId;
    private double amount;
    private String status;
    private Timestamp createdAt;

    // Getters and Setters
    public int getTransactionId() { return transactionId; }
    public void setTransactionId(int transactionId) { this.transactionId = transactionId; }
    public int getBookingId() { return bookingId; }
    public void setBookingId(int bookingId) { this.bookingId = bookingId; }
    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
    public Timestamp getCreatedAt() { return createdAt; }
    public void setCreatedAt(Timestamp createdAt) { this.createdAt = createdAt; }
}


com.oceanichotel.model.User.java
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.mycompany.oceanichotel.models;

import java.sql.Timestamp;

/**
 *
 * @author annc1
 */
public class User {

    private int userId;
    private String username;
    private String email;
    private String password;
    private String role;
    private String avatar;
    private boolean isActive;
    private Timestamp createdAt;

    private String language;
    private String theme;

    public User() {
        this.language = "en";
        this.theme = "light";
    }

    public User(String username, String password, String email) {
        this.username = username;
        this.password = password;
        this.email = email;
        this.role = "user";
        this.isActive = true;
        this.language = "en";
        this.theme = "light";
    }

    // Getter và Setter
    public int getUserId() {
        return userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    // Thêm các getter/setter còn lại tương tự
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    public String getAvatar() {
        return avatar;
    }

    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }

    public boolean isActive() {
        return isActive;
    }

    public void setActive(boolean active) {
        isActive = active;
    }

    public Timestamp getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(Timestamp createdAt) {
        this.createdAt = createdAt;
    }
    
    public String getLanguage() {
        return language;
    }

    public void setLanguage(String language) {
        this.language = language;
    }

    public String getTheme() {
        return theme;
    }

    public void setTheme(String theme) {
        this.theme = theme;
    }
}


Source Packages (Java Services):

com.oceanichotel.service.AdminBookingService.java
package com.mycompany.oceanichotel.services.admin;

import com.mycompany.oceanichotel.models.Booking;
import com.mycompany.oceanichotel.utils.DatabaseUtil;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import java.util.logging.Level;

public class AdminBookingService {

    private static final int PAGE_SIZE = 10;
    private static final Logger LOGGER = Logger.getLogger(AdminBookingService.class.getName());

    public List<Booking> getBookings(int page, String search) throws SQLException {
        if (page < 1) page = 1;
        List<Booking> bookings = new ArrayList<>();
        String query = "SELECT * FROM Bookings WHERE 1=1";
        if (search != null && !search.trim().isEmpty()) {
            query += " AND booking_id LIKE ?";
        }
        query += " ORDER BY booking_id OFFSET ? ROWS FETCH NEXT ? ROWS ONLY";

        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            int paramIndex = 1;
            if (search != null && !search.trim().isEmpty()) {
                stmt.setString(paramIndex++, "%" + search + "%");
            }
            stmt.setInt(paramIndex++, (page - 1) * PAGE_SIZE);
            stmt.setInt(paramIndex, PAGE_SIZE);

            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                Booking booking = new Booking();
                booking.setBookingId(rs.getInt("booking_id"));
                booking.setUserId(rs.getInt("user_id"));
                booking.setRoomId(rs.getInt("room_id"));
                booking.setCheckInDate(rs.getDate("check_in_date"));
                booking.setCheckOutDate(rs.getDate("check_out_date"));
                booking.setTotalPrice(rs.getDouble("total_price"));
                booking.setStatus(rs.getString("status"));
                bookings.add(booking);
            }
        }
        return bookings;
    }

    public int getTotalBookings(String search) throws SQLException {
        String query = "SELECT COUNT(*) FROM Bookings WHERE 1=1";
        if (search != null && !search.trim().isEmpty()) {
            query += " AND booking_id LIKE ?";
        }
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            if (search != null && !search.trim().isEmpty()) {
                stmt.setString(1, "%" + search + "%");
            }
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) return rs.getInt(1);
        }
        return 0;
    }

    public void updateBookingStatus(int bookingId, String newStatus, int changedBy) throws SQLException {
        String oldStatusQuery = "SELECT status FROM Bookings WHERE booking_id = ?";
        String updateQuery = "UPDATE Bookings SET status = ? WHERE booking_id = ?";
        String historyQuery = "INSERT INTO Booking_History (booking_id, old_status, new_status, changed_by, changed_at) VALUES (?, ?, ?, ?, GETDATE())";

        try (Connection conn = DatabaseUtil.getConnection()) {
            conn.setAutoCommit(false);
            String oldStatus = null;
            try (PreparedStatement stmt = conn.prepareStatement(oldStatusQuery)) {
                stmt.setInt(1, bookingId);
                ResultSet rs = stmt.executeQuery();
                if (rs.next()) oldStatus = rs.getString("status");
            }
            try (PreparedStatement stmt = conn.prepareStatement(updateQuery)) {
                stmt.setString(1, newStatus);
                stmt.setInt(2, bookingId);
                stmt.executeUpdate();
            }
            try (PreparedStatement stmt = conn.prepareStatement(historyQuery)) {
                stmt.setInt(1, bookingId);
                stmt.setString(2, oldStatus);
                stmt.setString(3, newStatus);
                stmt.setInt(4, changedBy);
                stmt.executeUpdate();
            }
            conn.commit();
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Error updating booking status", e);
            throw e;
        }
    }
}

com.oceanichotel.service.AdminReportService.java
package com.mycompany.oceanichotel.services.admin;

import com.mycompany.oceanichotel.utils.DatabaseUtil;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.logging.Logger;

public class AdminReportService {

    private static final Logger LOGGER = Logger.getLogger(AdminReportService.class.getName());

    public double getRevenue(String reportType, Date startDate, Date endDate) throws SQLException {
        String query = "SELECT SUM(amount) FROM Transactions WHERE status = 'Success'";
        if (startDate != null && endDate != null) {
            query += " AND created_at BETWEEN ? AND ?";
        } else if ("daily".equals(reportType)) {
            query += " AND CONVERT(date, created_at) = CONVERT(date, GETDATE())";
        } else if ("monthly".equals(reportType)) {
            query += " AND MONTH(created_at) = MONTH(GETDATE()) AND YEAR(created_at) = YEAR(GETDATE())";
        } else if ("yearly".equals(reportType)) {
            query += " AND YEAR(created_at) = YEAR(GETDATE())";
        }

        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            if (startDate != null && endDate != null) {
                stmt.setTimestamp(1, new java.sql.Timestamp(startDate.getTime()));
                stmt.setTimestamp(2, new java.sql.Timestamp(endDate.getTime()));
            }
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) return rs.getDouble(1);
        }
        return 0;
    }
    

    public int getTotalRooms() throws SQLException {
        String query = "SELECT COUNT(*) FROM Rooms";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) return rs.getInt(1);
        }
        return 0;
    }

    public int getAvailableRooms() throws SQLException {
        String query = "SELECT COUNT(*) FROM Rooms WHERE is_available = 1";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) return rs.getInt(1);
        }
        return 0;
    }

    public int getConfirmedBookings(String reportType, Date startDate, Date endDate) throws SQLException {
        String query = "SELECT COUNT(*) FROM Bookings WHERE status = 'Confirmed'";
        if (startDate != null && endDate != null) {
            query += " AND check_in_date BETWEEN ? AND ?";
        } else if ("daily".equals(reportType)) {
            query += " AND CONVERT(date, check_in_date) = CONVERT(date, GETDATE())";
        } else if ("monthly".equals(reportType)) {
            query += " AND MONTH(check_in_date) = MONTH(GETDATE()) AND YEAR(check_in_date) = YEAR(GETDATE())";
        } else if ("yearly".equals(reportType)) {
            query += " AND YEAR(check_in_date) = YEAR(GETDATE())";
        }

        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            if (startDate != null && endDate != null) {
                stmt.setTimestamp(1, new java.sql.Timestamp(startDate.getTime()));
                stmt.setTimestamp(2, new java.sql.Timestamp(endDate.getTime()));
            }
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) return rs.getInt(1);
        }
        return 0;
    }
}

com.oceanichotel.service.AdminRoomService.java
package com.mycompany.oceanichotel.services.admin;

import com.mycompany.oceanichotel.models.Room;
import com.mycompany.oceanichotel.models.RoomType;
import com.mycompany.oceanichotel.utils.DatabaseUtil;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import java.util.logging.Level;

public class AdminRoomService {

    private static final int PAGE_SIZE = 10;
    private static final Logger LOGGER = Logger.getLogger(AdminRoomService.class.getName());

    public boolean isRoomNumberExists(String roomNumber, Integer excludeRoomId) throws SQLException {
        String query = "SELECT COUNT(*) FROM Rooms WHERE room_number = ? AND (room_id != ? OR ? IS NULL)";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, roomNumber);
            stmt.setObject(2, excludeRoomId, Types.INTEGER);
            stmt.setObject(3, excludeRoomId, Types.INTEGER);
            ResultSet rs = stmt.executeQuery();
            return rs.next() && rs.getInt(1) > 0;
        }
    }

    public List<Room> getRooms(int page, String search, String status, String typeId) throws SQLException {
        if (page < 1) {
            LOGGER.log(Level.WARNING, "Invalid page number: {0}, defaulting to 1", page);
            page = 1;
        }
        List<Room> rooms = new ArrayList<>();
        String query = "SELECT r.*, rt.type_id, rt.type_name, rt.default_price, rt.max_adults AS rt_max_adults, rt.max_children AS rt_max_children " +
                      "FROM Rooms r JOIN Room_Types rt ON r.type_id = rt.type_id WHERE 1=1";
        if (search != null && !search.trim().isEmpty()) {
            query += " AND r.room_number LIKE ?";
        }
        if (status != null && !status.isEmpty()) {
            query += " AND r.is_available = ?";
        }
        if (typeId != null && !typeId.isEmpty()) {
            query += " AND r.type_id = ?";
        }
        query += " ORDER BY r.room_id OFFSET ? ROWS FETCH NEXT ? ROWS ONLY";

        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            int paramIndex = 1;
            if (search != null && !search.trim().isEmpty()) {
                stmt.setString(paramIndex++, "%" + search + "%");
            }
            if (status != null && !status.isEmpty()) {
                stmt.setBoolean(paramIndex++, Boolean.parseBoolean(status));
            }
            if (typeId != null && !typeId.isEmpty()) {
                stmt.setInt(paramIndex++, Integer.parseInt(typeId));
            }
            stmt.setInt(paramIndex++, (page - 1) * PAGE_SIZE);
            stmt.setInt(paramIndex, PAGE_SIZE);

            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                Room room = mapRoom(rs);
                rooms.add(room);
            }
        }
        return rooms;
    }

    public int getTotalRooms(String search, String status, String typeId) throws SQLException {
        String query = "SELECT COUNT(*) FROM Rooms r WHERE 1=1";
        if (search != null && !search.trim().isEmpty()) {
            query += " AND r.room_number LIKE ?";
        }
        if (status != null && !status.isEmpty()) {
            query += " AND r.is_available = ?";
        }
        if (typeId != null && !typeId.isEmpty()) {
            query += " AND r.type_id = ?";
        }
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            int paramIndex = 1;
            if (search != null && !search.trim().isEmpty()) {
                stmt.setString(paramIndex++, "%" + search + "%");
            }
            if (status != null && !status.isEmpty()) {
                stmt.setBoolean(paramIndex++, Boolean.parseBoolean(status));
            }
            if (typeId != null && !typeId.isEmpty()) {
                stmt.setInt(paramIndex++, Integer.parseInt(typeId));
            }
            ResultSet rs = stmt.executeQuery();
            return rs.next() ? rs.getInt(1) : 0;
        }
    }

    public Room getRoomById(int roomId) throws SQLException {
        String query = "SELECT r.*, rt.type_id, rt.type_name, rt.default_price, rt.max_adults AS rt_max_adults, rt.max_children AS rt_max_children " +
                      "FROM Rooms r JOIN Room_Types rt ON r.type_id = rt.type_id WHERE r.room_id = ?";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, roomId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return mapRoom(rs);
            }
        }
        return null;
    }

    public List<RoomType> getAllRoomTypes() throws SQLException {
        List<RoomType> roomTypes = new ArrayList<>();
        String query = "SELECT * FROM Room_Types";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                RoomType roomType = new RoomType();
                roomType.setTypeId(rs.getInt("type_id"));
                roomType.setTypeName(rs.getString("type_name"));
                roomType.setDefaultPrice(rs.getDouble("default_price"));
                roomType.setMaxAdults(rs.getInt("max_adults"));
                roomType.setMaxChildren(rs.getInt("max_children"));
                roomTypes.add(roomType);
            }
        }
        return roomTypes;
    }

    public RoomType getRoomTypeById(int typeId) throws SQLException {
        String query = "SELECT * FROM Room_Types WHERE type_id = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, typeId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                RoomType roomType = new RoomType();
                roomType.setTypeId(rs.getInt("type_id"));
                roomType.setTypeName(rs.getString("type_name"));
                roomType.setDefaultPrice(rs.getDouble("default_price"));
                roomType.setMaxAdults(rs.getInt("max_adults"));
                roomType.setMaxChildren(rs.getInt("max_children"));
                return roomType;
            }
        }
        return null;
    }

    public void addRoom(Room room) throws SQLException {
        if (room.getRoomType() == null || room.getRoomType().getTypeId() <= 0) {
            throw new SQLException("Room type is required.");
        }
        if (isRoomNumberExists(room.getRoomNumber(), null)) {
            throw new SQLException("Room number already exists: " + room.getRoomNumber());
        }
        String query = "INSERT INTO Rooms (room_number, type_id, price_per_night, is_available, description, max_adults, max_children, created_at) " +
                      "VALUES (?, ?, ?, ?, ?, ?, ?, GETDATE())";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, room.getRoomNumber());
            stmt.setInt(2, room.getRoomType().getTypeId());
            stmt.setDouble(3, room.getPricePerNight());
            stmt.setBoolean(4, room.isAvailable());
            stmt.setString(5, room.getDescription());
            stmt.setInt(6, room.getMaxAdults());
            stmt.setInt(7, room.getMaxChildren());
            stmt.executeUpdate();
        }
    }

    public void updateRoom(Room room) throws SQLException {
        if (room.getRoomType() == null || room.getRoomType().getTypeId() <= 0) {
            throw new SQLException("Room type is required.");
        }
        if (isRoomNumberExists(room.getRoomNumber(), room.getRoomId())) {
            throw new SQLException("Room number already exists: " + room.getRoomNumber());
        }
        String query = "UPDATE Rooms SET room_number = ?, type_id = ?, price_per_night = ?, is_available = ?, description = ?, max_adults = ?, max_children = ? " +
                      "WHERE room_id = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, room.getRoomNumber());
            stmt.setInt(2, room.getRoomType().getTypeId());
            stmt.setDouble(3, room.getPricePerNight());
            stmt.setBoolean(4, room.isAvailable());
            stmt.setString(5, room.getDescription());
            stmt.setInt(6, room.getMaxAdults());
            stmt.setInt(7, room.getMaxChildren());
            stmt.setInt(8, room.getRoomId());
            stmt.executeUpdate();
        }
    }

    public void deleteRoom(int roomId) throws SQLException {
        String query = "DELETE FROM Rooms WHERE room_id = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, roomId);
            stmt.executeUpdate();
        }
    }

    private Room mapRoom(ResultSet rs) throws SQLException {
        Room room = new Room();
        room.setRoomId(rs.getInt("room_id"));
        room.setRoomNumber(rs.getString("room_number"));

        RoomType roomType = new RoomType();
        roomType.setTypeId(rs.getInt("type_id"));
        roomType.setTypeName(rs.getString("type_name"));
        roomType.setDefaultPrice(rs.getDouble("default_price"));
        roomType.setMaxAdults(rs.getInt("rt_max_adults"));
        roomType.setMaxChildren(rs.getInt("rt_max_children"));
        room.setRoomType(roomType);

        room.setPricePerNight(rs.getDouble("price_per_night"));
        room.setAvailable(rs.getBoolean("is_available"));
        room.setDescription(rs.getString("description"));
        room.setMaxAdults(rs.getInt("max_adults"));
        room.setMaxChildren(rs.getInt("max_children"));
        room.setCreatedAt(rs.getTimestamp("created_at"));
        return room;
    }
}

com.oceanichotel.service.AdminRoomTypeService.java
package com.mycompany.oceanichotel.services.admin;

import com.mycompany.oceanichotel.models.RoomType;
import com.mycompany.oceanichotel.models.RoomTypeImage;
import com.mycompany.oceanichotel.utils.DatabaseUtil;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import java.util.logging.Level;

public class AdminRoomTypeService {

    private static final Logger LOGGER = Logger.getLogger(AdminRoomTypeService.class.getName());

    public List<RoomType> getAllRoomTypes() throws SQLException {
        List<RoomType> roomTypes = new ArrayList<>();
        String query = "SELECT * FROM Room_Types ORDER BY type_name";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                RoomType roomType = mapRoomType(rs);
                roomType.setImages(getRoomTypeImages(roomType.getTypeId()));
                roomTypes.add(roomType);
            }
        }
        return roomTypes;
    }

    public RoomType getRoomTypeById(int typeId) throws SQLException {
        String query = "SELECT * FROM Room_Types WHERE type_id = ?";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, typeId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                RoomType roomType = mapRoomType(rs);
                roomType.setImages(getRoomTypeImages(typeId));
                return roomType;
            }
        }
        return null;
    }

    public void addRoomType(RoomType roomType) throws SQLException {
        String query = "INSERT INTO Room_Types (type_name, default_price, max_adults, max_children, description, created_at) " +
                      "VALUES (?, ?, ?, ?, ?, GETDATE())";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
            stmt.setString(1, roomType.getTypeName());
            stmt.setDouble(2, roomType.getDefaultPrice());
            stmt.setInt(3, roomType.getMaxAdults());
            stmt.setInt(4, roomType.getMaxChildren());
            stmt.setString(5, roomType.getDescription());
            stmt.executeUpdate();

            ResultSet rs = stmt.getGeneratedKeys();
            if (rs.next()) {
                int typeId = rs.getInt(1);
                for (RoomTypeImage image : roomType.getImages()) {
                    addRoomTypeImage(typeId, image);
                }
            }
        }
    }

    public void updateRoomType(RoomType roomType) throws SQLException {
        String query = "UPDATE Room_Types SET type_name = ?, default_price = ?, max_adults = ?, max_children = ?, description = ? WHERE type_id = ?";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, roomType.getTypeName());
            stmt.setDouble(2, roomType.getDefaultPrice());
            stmt.setInt(3, roomType.getMaxAdults());
            stmt.setInt(4, roomType.getMaxChildren());
            stmt.setString(5, roomType.getDescription());
            stmt.setInt(6, roomType.getTypeId());
            stmt.executeUpdate();
        }
    }

    public void deleteRoomType(int typeId) throws SQLException {
        String query = "DELETE FROM Room_Types WHERE type_id = ?";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, typeId);
            stmt.executeUpdate();
        }
    }

    public List<RoomTypeImage> getRoomTypeImages(int typeId) throws SQLException {
        List<RoomTypeImage> images = new ArrayList<>();
        String query = "SELECT * FROM Room_Type_Images WHERE type_id = ? ORDER BY is_primary DESC, created_at ASC";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, typeId);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                RoomTypeImage image = new RoomTypeImage();
                image.setImageId(rs.getInt("image_id"));
                image.setTypeId(rs.getInt("type_id"));
                image.setImageUrl(rs.getString("image_url"));
                image.setPrimary(rs.getBoolean("is_primary"));
                image.setCreatedAt(rs.getTimestamp("created_at"));
                images.add(image);
            }
        }
        return images;
    }

    public void addRoomTypeImage(int typeId, RoomTypeImage image) throws SQLException {
        String query = "INSERT INTO Room_Type_Images (type_id, image_url, is_primary, created_at) VALUES (?, ?, ?, GETDATE())";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, typeId);
            stmt.setString(2, image.getImageUrl());
            stmt.setBoolean(3, image.isPrimary());
            stmt.executeUpdate();
        }
    }

    public void deleteRoomTypeImage(int imageId) throws SQLException {
        String query = "DELETE FROM Room_Type_Images WHERE image_id = ?";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, imageId);
            stmt.executeUpdate();
        }
    }

    public void setPrimaryImage(int typeId, int imageId) throws SQLException {
        try (Connection conn = DatabaseUtil.getConnection()) {
            String resetQuery = "UPDATE Room_Type_Images SET is_primary = 0 WHERE type_id = ?";
            try (PreparedStatement stmt = conn.prepareStatement(resetQuery)) {
                stmt.setInt(1, typeId);
                stmt.executeUpdate();
            }
            String setQuery = "UPDATE Room_Type_Images SET is_primary = 1 WHERE image_id = ? AND type_id = ?";
            try (PreparedStatement stmt = conn.prepareStatement(setQuery)) {
                stmt.setInt(1, imageId);
                stmt.setInt(2, typeId);
                stmt.executeUpdate();
            }
        }
    }

    private RoomType mapRoomType(ResultSet rs) throws SQLException {
        RoomType roomType = new RoomType();
        roomType.setTypeId(rs.getInt("type_id"));
        roomType.setTypeName(rs.getString("type_name"));
        roomType.setDefaultPrice(rs.getDouble("default_price"));
        roomType.setMaxAdults(rs.getInt("max_adults"));
        roomType.setMaxChildren(rs.getInt("max_children"));
        roomType.setDescription(rs.getString("description"));
        roomType.setCreatedAt(rs.getTimestamp("created_at"));
        return roomType;
    }
}

com.oceanichotel.service.AdminSettingsService.java
package com.mycompany.oceanichotel.services.admin;

import com.mycompany.oceanichotel.utils.DatabaseUtil;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.logging.Logger;
import java.util.logging.Level;

public class AdminSettingsService {

    private static final Logger LOGGER = Logger.getLogger(AdminSettingsService.class.getName());

    public void updateSettings(String defaultLanguage, String defaultTheme) throws SQLException {
        String query = "MERGE INTO Settings AS target " +
                       "USING (VALUES ('default_language', ?), ('default_theme', ?)) AS source (setting_key, setting_value) " +
                       "ON target.setting_key = source.setting_key " +
                       "WHEN MATCHED THEN UPDATE SET setting_value = source.setting_value " +
                       "WHEN NOT MATCHED THEN INSERT (setting_key, setting_value) VALUES (source.setting_key, source.setting_value);";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, defaultLanguage);
            stmt.setString(2, defaultTheme);
            stmt.executeUpdate();
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Error updating settings", e);
            throw e;
        }
    }
}

com.oceanichotel.service.AdminTransactionService.java
package com.mycompany.oceanichotel.services.admin;

import com.mycompany.oceanichotel.models.Transaction;
import com.mycompany.oceanichotel.utils.DatabaseUtil;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import java.util.logging.Level;

public class AdminTransactionService {

    private static final int PAGE_SIZE = 10;
    private static final Logger LOGGER = Logger.getLogger(AdminTransactionService.class.getName());

    public List<Transaction> getTransactions(int page, String search) throws SQLException {
        if (page < 1) page = 1;
        List<Transaction> transactions = new ArrayList<>();
        String query = "SELECT * FROM Transactions WHERE 1=1";
        if (search != null && !search.trim().isEmpty()) {
            query += " AND transaction_id LIKE ?";
        }
        query += " ORDER BY transaction_id OFFSET ? ROWS FETCH NEXT ? ROWS ONLY";

        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            int paramIndex = 1;
            if (search != null && !search.trim().isEmpty()) {
                stmt.setString(paramIndex++, "%" + search + "%");
            }
            stmt.setInt(paramIndex++, (page - 1) * PAGE_SIZE);
            stmt.setInt(paramIndex, PAGE_SIZE);

            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                Transaction transaction = new Transaction();
                transaction.setTransactionId(rs.getInt("transaction_id"));
                transaction.setBookingId(rs.getInt("booking_id"));
                transaction.setAmount(rs.getDouble("amount"));
                transaction.setStatus(rs.getString("status"));
                transaction.setCreatedAt(rs.getTimestamp("created_at"));
                transactions.add(transaction);
            }
        }
        return transactions;
    }

    public int getTotalTransactions(String search) throws SQLException {
        String query = "SELECT COUNT(*) FROM Transactions WHERE 1=1";
        if (search != null && !search.trim().isEmpty()) {
            query += " AND transaction_id LIKE ?";
        }
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            if (search != null && !search.trim().isEmpty()) {
                stmt.setString(1, "%" + search + "%");
            }
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) return rs.getInt(1);
        }
        return 0;
    }

    public double getTotalRevenue() throws SQLException {
        String query = "SELECT SUM(amount) FROM Transactions WHERE status = 'Success'";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) return rs.getDouble(1);
        }
        return 0;
    }

    public int getTransactionCountByStatus(String status) throws SQLException {
        String query = "SELECT COUNT(*) FROM Transactions WHERE status = ?";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, status);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) return rs.getInt(1);
        }
        return 0;
    }
}

com.oceanichotel.service.AdminUserService.java
package com.mycompany.oceanichotel.services.admin;

import com.mycompany.oceanichotel.models.User;
import com.mycompany.oceanichotel.utils.DatabaseUtil;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import java.util.logging.Level;

public class AdminUserService {

    private static final int PAGE_SIZE = 10;
    private static final Logger LOGGER = Logger.getLogger(AdminUserService.class.getName());

    public boolean isUsernameExists(String username, Integer excludeUserId) throws SQLException {
        String query = "SELECT COUNT(*) FROM Users WHERE username = ? AND (user_id != ? OR ? IS NULL)";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, username);
            stmt.setObject(2, excludeUserId, java.sql.Types.INTEGER);
            stmt.setObject(3, excludeUserId, java.sql.Types.INTEGER);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        }
        return false;
    }

    public boolean isEmailExists(String email, Integer excludeUserId) throws SQLException {
        String query = "SELECT COUNT(*) FROM Users WHERE email = ? AND (user_id != ? OR ? IS NULL)";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, email);
            stmt.setObject(2, excludeUserId, java.sql.Types.INTEGER);
            stmt.setObject(3, excludeUserId, java.sql.Types.INTEGER);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        }
        return false;
    }

    public List<User> getUsers(int page, String search) throws SQLException {
        if (page < 1) {
            LOGGER.log(Level.WARNING, "Invalid page number: {0}, defaulting to 1", page);
            page = 1;
        }
        List<User> users = new ArrayList<>();
        String query = "SELECT * FROM Users WHERE 1=1";
        if (search != null && !search.trim().isEmpty()) {
            query += " AND username LIKE ?";
        }
        query += " ORDER BY user_id OFFSET ? ROWS FETCH NEXT ? ROWS ONLY";

        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            int paramIndex = 1;
            if (search != null && !search.trim().isEmpty()) {
                stmt.setString(paramIndex++, "%" + search + "%");
            }
            stmt.setInt(paramIndex++, (page - 1) * PAGE_SIZE);
            stmt.setInt(paramIndex, PAGE_SIZE);

            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                User user = new User();
                user.setUserId(rs.getInt("user_id"));
                user.setUsername(rs.getString("username"));
                user.setEmail(rs.getString("email"));
                user.setPassword(rs.getString("password")); // Lưu ý: Trong thực tế, mật khẩu nên được mã hóa
                user.setRole(rs.getString("role"));
                user.setCreatedAt(rs.getTimestamp("created_at"));
                users.add(user);
            }
        }
        return users;
    }

    public int getTotalUsers(String search) throws SQLException {
        String query = "SELECT COUNT(*) FROM Users WHERE 1=1";
        if (search != null && !search.trim().isEmpty()) {
            query += " AND username LIKE ?";
        }
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            if (search != null && !search.trim().isEmpty()) {
                stmt.setString(1, "%" + search + "%");
            }
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        }
        return 0;
    }

    public User getUserById(int userId) throws SQLException {
        String query = "SELECT * FROM Users WHERE user_id = ?";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, userId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                User user = new User();
                user.setUserId(rs.getInt("user_id"));
                user.setUsername(rs.getString("username"));
                user.setEmail(rs.getString("email"));
                user.setPassword(rs.getString("password"));
                user.setRole(rs.getString("role"));
                user.setCreatedAt(rs.getTimestamp("created_at"));
                return user;
            }
        }
        return null;
    }

    public void addUser(User user) throws SQLException {
        if (isUsernameExists(user.getUsername(), null)) {
            throw new SQLException("Username already exists: " + user.getUsername());
        }
        if (isEmailExists(user.getEmail(), null)) {
            throw new SQLException("Email already exists: " + user.getEmail());
        }
        String query = "INSERT INTO Users (username, email, password, role, created_at) VALUES (?, ?, ?, ?, GETDATE())";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, user.getUsername());
            stmt.setString(2, user.getEmail());
            stmt.setString(3, user.getPassword()); // Nên mã hóa mật khẩu trong thực tế
            stmt.setString(4, user.getRole());
            stmt.executeUpdate();
        }
    }

    public void updateUser(User user) throws SQLException {
        if (isUsernameExists(user.getUsername(), user.getUserId())) {
            throw new SQLException("Username already exists: " + user.getUsername());
        }
        if (isEmailExists(user.getEmail(), user.getUserId())) {
            throw new SQLException("Email already exists: " + user.getEmail());
        }
        String query = "UPDATE Users SET username = ?, email = ?, role = ?" + 
                      (user.getPassword() != null ? ", password = ?" : "") + 
                      " WHERE user_id = ?";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, user.getUsername());
            stmt.setString(2, user.getEmail());
            stmt.setString(3, user.getRole());
            int paramIndex = 4;
            if (user.getPassword() != null) {
                stmt.setString(paramIndex++, user.getPassword());
            }
            stmt.setInt(paramIndex, user.getUserId());
            stmt.executeUpdate();
        }
    }

    public void deleteUser(int userId) throws SQLException {
        String query = "DELETE FROM Users WHERE user_id = ?";
        try (Connection conn = DatabaseUtil.getConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, userId);
            stmt.executeUpdate();
        }
    }
}

com.oceanichotel.service.UserDashboardService.java
package com.mycompany.oceanichotel.services.user;

import com.mycompany.oceanichotel.models.Booking;
import com.mycompany.oceanichotel.utils.DatabaseUtil;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

public class UserDashboardService {
    public List<Booking> getUserBookings(int userId) {
        List<Booking> bookings = new ArrayList<>();
        String query = "SELECT * FROM Bookings WHERE user_id = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, userId);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                Booking booking = new Booking();
                booking.setBookingId(rs.getInt("booking_id"));
                booking.setUserId(rs.getInt("user_id"));
                booking.setRoomId(rs.getInt("room_id"));
                booking.setCheckInDate(rs.getDate("check_in_date"));
                booking.setCheckOutDate(rs.getDate("check_out_date"));
                booking.setTotalPrice(rs.getDouble("total_price"));
                booking.setStatus(rs.getString("status"));
                bookings.add(booking);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return bookings;
    }
}

com.oceanichotel.service.UserService.java
package com.mycompany.oceanichotel.services.user;

import com.mycompany.oceanichotel.models.User;
import com.mycompany.oceanichotel.utils.DatabaseUtil;
import org.mindrot.jbcrypt.BCrypt;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserService {

    // Kiểm tra xem username đã tồn tại hay chưa
    public boolean isUsernameExists(String username) throws SQLException {
        String sql = "SELECT COUNT(*) FROM Users WHERE username = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, username);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0; // Trả về true nếu username đã tồn tại
            }
            return false;
        }
    }

    // Đăng ký người dùng với kiểm tra username
    public void registerUser(User user) throws SQLException {
        // Kiểm tra xem username đã tồn tại chưa
        if (isUsernameExists(user.getUsername())) {
            throw new SQLException("Username already exists");
        }

        String hashedPassword = BCrypt.hashpw(user.getPassword(), BCrypt.gensalt());
        String sql = "INSERT INTO Users (username, password, email) VALUES (?, ?, ?)";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, user.getUsername());
            stmt.setString(2, hashedPassword);
            stmt.setString(3, user.getEmail());
            stmt.executeUpdate();
        }
    }

    // Đăng nhập người dùng
    public User loginUser(String username, String password) throws SQLException {
        String sql = "SELECT * FROM Users WHERE username = ? AND is_active = 1";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, username);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                String hashedPassword = rs.getString("password");
                if (BCrypt.checkpw(password, hashedPassword)) {
                    User user = new User();
                    user.setUserId(rs.getInt("user_id"));
                    user.setUsername(rs.getString("username"));
                    user.setEmail(rs.getString("email"));
                    user.setRole(rs.getString("role"));
                    user.setActive(rs.getBoolean("is_active"));
                    return user;
                }
            }
            return null; // Login failed
        }
    }
}


com.oceanichotel.utils.DatabaseUtil.java

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.mycompany.oceanichotel.utils;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

/**
 *
 * @author annc1
 */
public class DatabaseUtil {
//    private static final String URL = "jdbc:mysql://localhost:3306/OceanHotel";
//    private static final String USER = "root";
//    private static final String PASSWORD = "";

    private static final String URL = "jdbc:sqlserver://localhost:1433;databaseName=OceanHotel;encrypt=true;trustServerCertificate=true";
    private static final String USER = "sa"; // Thay bằng username SQL Server của bạn
    private static final String PASSWORD = "12345"; // Thay bằng password của bạn

    public static Connection getConnection() throws SQLException {
//        try {
//            Class.forName("com.mysql.cj.jdbc.Driver");
//            return DriverManager.getConnection(URL, USER, PASSWORD);
//        } catch (ClassNotFoundException e) {
//            throw new SQLException("MySQL JDBC Driver not found", e);
//        }
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
            System.out.println("Database connection successful!");
            return conn;
        } catch (ClassNotFoundException e) {
            throw new SQLException("SQL Server JDBC Driver not found", e);
        } catch (SQLException e) {
            System.err.println("Connection failed: " + e.getMessage());
            throw e;
        }
    }
}


